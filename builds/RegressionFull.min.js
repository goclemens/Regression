!function(e,r){"object"==typeof exports&&"undefined"!=typeof module?module.exports=r():"function"==typeof define&&define.amd?define(r):e.Regression=r()}(this,function(){"use strict";var e="undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{};function r(e,r){return e(r={exports:{}},r.exports),r.exports}var t=function(e){return e&&e.constructor.prototype.isBigNumber||!1},i=r(function(e,r){r.clone=function e(n){var i=typeof n;if("number"===i||"string"===i||"boolean"===i||null===n||void 0===n)return n;if("function"==typeof n.clone)return n.clone();if(Array.isArray(n))return n.map(function(r){return e(r)});if(n instanceof Number)return new Number(n.valueOf());if(n instanceof String)return new String(n.valueOf());if(n instanceof Boolean)return new Boolean(n.valueOf());if(n instanceof Date)return new Date(n.valueOf());if(t(n))return n;if(n instanceof RegExp)throw new TypeError("Cannot clone "+n);return r.map(n,e)},r.map=function(e,t){var n={};for(var i in e)r.hasOwnProperty(e,i)&&(n[i]=t(e[i]));return n},r.extend=function(e,t){for(var n in t)r.hasOwnProperty(t,n)&&(e[n]=t[n]);return e},r.deepExtend=function e(t,n){if(Array.isArray(n))throw new TypeError("Arrays are not supported by deepExtend");for(var i in n)if(r.hasOwnProperty(n,i))if(n[i]&&n[i].constructor===Object)void 0===t[i]&&(t[i]={}),t[i].constructor===Object?e(t[i],n[i]):t[i]=n[i];else{if(Array.isArray(n[i]))throw new TypeError("Arrays are not supported by deepExtend");t[i]=n[i]}return t},r.deepEqual=function(e,t){var n,i,a;if(Array.isArray(e)){if(!Array.isArray(t))return!1;if(e.length!=t.length)return!1;for(i=0,a=e.length;i<a;i++)if(!r.deepEqual(e[i],t[i]))return!1;return!0}if(e instanceof Object){if(Array.isArray(t)||!(t instanceof Object))return!1;for(n in e)if(!r.deepEqual(e[n],t[n]))return!1;for(n in t)if(!r.deepEqual(e[n],t[n]))return!1;return!0}return typeof e==typeof t&&e==t},r.canDefineProperty=function(){try{if(Object.defineProperty)return Object.defineProperty({},"x",{get:function(){}}),!0}catch(e){}return!1},r.lazy=function(e,t,n){if(r.canDefineProperty()){var i,a=!0;Object.defineProperty(e,t,{get:function(){return a&&(i=n(),a=!1),i},set:function(e){i=e,a=!1},configurable:!0,enumerable:!0})}else e[t]=n()},r.traverse=function(e,r){var t=e;if(r)for(var n=r.split("."),i=0;i<n.length;i++){var a=n[i];a in t||(t[a]={}),t=t[a]}return t},r.hasOwnProperty=function(e,r){return e&&Object.hasOwnProperty.call(e,r)},r.isFactory=function(e){return e&&"function"==typeof e.factory}}),a=(i.clone,i.map,i.extend,i.deepExtend,i.deepEqual,i.canDefineProperty,i.lazy,i.traverse,i.isFactory,r(function(e,r){var t;t=function(){function e(){return!0}function r(){return!1}function t(){}return function n(){var i=[{name:"number",test:function(e){return"number"==typeof e}},{name:"string",test:function(e){return"string"==typeof e}},{name:"boolean",test:function(e){return"boolean"==typeof e}},{name:"Function",test:function(e){return"function"==typeof e}},{name:"Array",test:Array.isArray},{name:"Date",test:function(e){return e instanceof Date}},{name:"RegExp",test:function(e){return e instanceof RegExp}},{name:"Object",test:function(e){return"object"==typeof e&&e.constructor===Object}},{name:"null",test:function(e){return null===e}},{name:"undefined",test:function(e){return void 0===e}}],a={name:"any",test:e},o=[],s=[],u={types:i,conversions:s,ignore:o};function c(e){var r=D(u.types,function(r){return r.name===e});if(r)return r;if("any"===e)return a;var t=D(u.types,function(r){return r.name.toLowerCase()===e.toLowerCase()});throw new TypeError('Unknown type "'+e+'"'+(t?'. Did you mean "'+t.name+'"?':""))}function f(e){return e===a?999:u.types.indexOf(e)}function l(e){var r=D(u.types,function(r){return r.test(e)});if(r)return r.name;throw new TypeError("Value has unknown type. Value: "+e)}function p(e){return e.map(function(e){var r=e.types.map(w);return(e.restParam?"...":"")+r.join("|")}).join(",")}function m(e,r){var t=0===e.indexOf("..."),n=(t?e.length>3?e.slice(3):"any":e).split("|").map(z).filter(B).filter(C),i=function(e,r){var t={};return e.forEach(function(e){-1!==r.indexOf(e.from)||-1===r.indexOf(e.to)||t[e.from]||(t[e.from]=e)}),Object.keys(t).map(function(e){return t[e]})}(r,n),a=n.map(function(e){var r=c(e);return{name:e,typeIndex:f(r),test:r.test,conversion:null,conversionIndex:-1}}),o=i.map(function(e){var t=c(e.from);return{name:e.from,typeIndex:f(t),test:t.test,conversion:e,conversionIndex:r.indexOf(e)}});return{types:a.concat(o),restParam:t}}function h(e){var r=R(e);return!!r&&r.restParam}function d(e){return e.types.some(function(e){return null!=e.conversion})}function g(r){if(r&&0!==r.types.length){if(1===r.types.length)return c(r.types[0].name).test;if(2===r.types.length){var t=c(r.types[0].name).test,n=c(r.types[1].name).test;return function(e){return t(e)||n(e)}}var i=r.types.map(function(e){return c(e.name).test});return function(e){for(var r=0;r<i.length;r++)if(i[r](e))return!0;return!1}}return e}function v(e){var r,t,n,i;if(h(e)){var a=(r=(i=e,i.slice(0,i.length-1)).map(g)).length,o=g(R(e));return function(e){for(var t=0;t<r.length;t++)if(!r[t](e[t]))return!1;return function(e){for(var r=a;r<e.length;r++)if(!o(e[r]))return!1;return!0}(e)&&e.length>=a+1}}return 0===e.length?function(e){return 0===e.length}:1===e.length?(t=g(e[0]),function(e){return t(e[0])&&1===e.length}):2===e.length?(t=g(e[0]),n=g(e[1]),function(e){return t(e[0])&&n(e[1])&&2===e.length}):(r=e.map(g),function(e){for(var t=0;t<r.length;t++)if(!r[t](e[t]))return!1;return e.length===r.length})}function y(e,r){return r<e.params.length?e.params[r]:h(e.params)?R(e.params):null}function x(e,r,t){var n=y(e,r);return(n?t?n.types.filter(b):n.types:[]).map(w)}function w(e){return e.name}function b(e){return null===e.conversion||void 0===e.conversion}function N(e,r){var t=function(e){for(var r={},t=0;t<e.length;t++)r[e[t]]=!0;return Object.keys(r)}(q(e,function(e){return x(e,r,!1)}));return-1!==t.indexOf("any")?["any"]:t}function M(e){for(var r=999,t=0;t<e.types.length;t++)b(e.types[t])&&(r=Math.min(r,e.types[t].typeIndex));return r}function E(e){for(var r=999,t=0;t<e.types.length;t++)b(e.types[t])||(r=Math.min(r,e.types[t].conversionIndex));return r}function A(e,r){var t;return 0!=(t=e.restParam-r.restParam)?t:0!=(t=d(e)-d(r))?t:0!=(t=M(e)-M(r))?t:E(e)-E(r)}function O(e,r){var t,n,i=Math.min(e.params.length,r.params.length);if(0!=(n=e.params.some(d)-r.params.some(d)))return n;for(t=0;t<i;t++)if(0!=(n=d(e.params[t])-d(r.params[t])))return n;for(t=0;t<i;t++)if(0!==(n=A(e.params[t],r.params[t])))return n;return e.params.length-r.params.length}function S(e){var r,t,n,i,a=[],o=[];switch(e.types.forEach(function(e){e.conversion&&(a.push(c(e.conversion.from).test),o.push(e.conversion.convert))}),o.length){case 0:return function(e){return e};case 1:return r=a[0],n=o[0],function(e){return r(e)?n(e):e};case 2:return r=a[0],t=a[1],n=o[0],i=o[1],function(e){return r(e)?n(e):t(e)?i(e):e};default:return function(e){for(var r=0;r<o.length;r++)if(a[r](e))return o[r](e);return e}}}function _(e,r){return function e(t,n,i){if(n<t.length){var a,o=t[n],s=r?o.types.filter(b):o.types;if(o.restParam){var u=s.filter(b);a=u.length<s.length?[u,s]:[s]}else a=s.map(function(e){return[e]});return q(a,function(r){return e(t,n+1,i.concat([r]))})}return[i.map(function(e,r){return{types:e,restParam:r===t.length-1&&h(t)}})]}(e,0,[])}function T(e,n){if(0===Object.keys(n).length)throw new SyntaxError("No signatures provided");var i=[];Object.keys(n).map(function(e){return function(e,r,t){var n=[];return""!==e.trim()&&(n=e.split(",").map(z).map(function(e,r,n){var i=m(e,t);if(i.restParam&&r!==n.length-1)throw new SyntaxError('Unexpected rest parameter "'+e+'": only allowed for the last parameter');return i})),n.some(I)?null:{params:n,fn:r}}(e,n[e],u.conversions)}).filter(P).forEach(function(e){var r=D(i,function(r){return function(e,r){for(var t=Math.max(e.params.length,r.params.length),n=0;n<t;n++)if(!k(x(e,n,!0),x(r,n,!0)))return!1;var i=e.params.length,a=r.params.length,o=h(e.params),s=h(r.params);return o?s?i===a:a>=i:s?i>=a:i===a}(r,e)});if(r)throw new TypeError('Conflicting signatures "'+p(r.params)+'" and "'+p(e.params)+'".');i.push(e)});var a=q(i,function(e){return(e?_(e.params,!1):[]).map(function(r){return{params:r,fn:e.fn}})}).filter(P);a.sort(O);var o=a[0]&&a[0].params.length<=2&&!h(a[0].params),s=a[1]&&a[1].params.length<=2&&!h(a[1].params),c=a[2]&&a[2].params.length<=2&&!h(a[2].params),f=a[3]&&a[3].params.length<=2&&!h(a[3].params),w=a[4]&&a[4].params.length<=2&&!h(a[4].params),b=a[5]&&a[5].params.length<=2&&!h(a[5].params),M=o&&s&&c&&f&&w&&b,E=a.map(function(e){return v(e.params)}),A=o?g(a[0].params[0]):r,T=s?g(a[1].params[0]):r,C=c?g(a[2].params[0]):r,B=f?g(a[3].params[0]):r,R=w?g(a[4].params[0]):r,L=b?g(a[5].params[0]):r,F=o?g(a[0].params[1]):r,j=s?g(a[1].params[1]):r,H=c?g(a[2].params[1]):r,$=f?g(a[3].params[1]):r,G=w?g(a[4].params[1]):r,V=b?g(a[5].params[1]):r,Z=a.map(function(e){return function(e,r){var t=r;if(e.some(d)){var n=h(e),i=e.map(S);t=function(){for(var e=[],t=n?arguments.length-1:arguments.length,a=0;a<t;a++)e[a]=i[a](arguments[a]);return n&&(e[t]=arguments[t].map(i[t])),r.apply(null,e)}}var a=t;if(h(e)){var o=e.length-1;a=function(){return t.apply(null,U(arguments,0,o).concat([U(arguments,o)]))}}return a}(e.params,e.fn)}),W=o?Z[0]:t,J=s?Z[1]:t,Y=c?Z[2]:t,X=f?Z[3]:t,Q=w?Z[4]:t,K=b?Z[5]:t,ee=o?a[0].params.length:-1,re=s?a[1].params.length:-1,te=c?a[2].params.length:-1,ne=f?a[3].params.length:-1,ie=w?a[4].params.length:-1,ae=b?a[5].params.length:-1,oe=M?6:0,se=a.length,ue=function(){for(var r=oe;r<se;r++)if(E[r](arguments))return Z[r].apply(null,arguments);throw function(e,r,t){var n,i,a,o=e||"unnamed",s=t;for(a=0;a<r.length;a++){var u=s.filter(function(e){var t=g(y(e,a));return(a<e.params.length||h(e.params))&&t(r[a])});if(0===u.length){if((i=N(s,a)).length>0){var c=l(r[a]);return(n=new TypeError("Unexpected type of argument in function "+o+" (expected: "+i.join(" or ")+", actual: "+c+", index: "+a+")")).data={category:"wrongType",fn:o,index:a,actual:c,expected:i},n}}else s=u}var f=s.map(function(e){return h(e.params)?1/0:e.params.length});if(r.length<Math.min.apply(null,f))return i=N(s,a),(n=new TypeError("Too few arguments in function "+o+" (expected: "+i.join(" or ")+", index: "+r.length+")")).data={category:"tooFewArgs",fn:o,index:r.length,expected:i},n;var p=Math.max.apply(null,f);return r.length>p?((n=new TypeError("Too many arguments in function "+o+" (expected: "+p+", actual: "+r.length+")")).data={category:"tooManyArgs",fn:o,index:r.length,expectedLength:p},n):((n=new TypeError('Arguments of type "'+r.join(", ")+'" do not match any of the defined signatures of function '+o+".")).data={category:"mismatch",actual:r.map(l)},n)}(e,arguments,a)},ce=function(e,r){return arguments.length===ee&&A(e)&&F(r)?W.apply(null,arguments):arguments.length===re&&T(e)&&j(r)?J.apply(null,arguments):arguments.length===te&&C(e)&&H(r)?Y.apply(null,arguments):arguments.length===ne&&B(e)&&$(r)?X.apply(null,arguments):arguments.length===ie&&R(e)&&G(r)?Q.apply(null,arguments):arguments.length===ae&&L(e)&&V(r)?K.apply(null,arguments):ue.apply(null,arguments)};try{Object.defineProperty(ce,"name",{value:e})}catch(e){}return ce.signatures=function(e){var r={};return e.forEach(function(e){e.params.some(d)||_(e.params,!0).forEach(function(t){r[p(t)]=e.fn})}),r}(a),ce}function C(e){return-1===u.ignore.indexOf(e)}function z(e){return e.trim()}function B(e){return!!e}function P(e){return null!==e}function I(e){return 0===e.types.length}function R(e){return e[e.length-1]}function U(e,r,t){return Array.prototype.slice.call(e,r,t)}function k(e,r){for(var t=0;t<e.length;t++)if(n=r,i=e[t],-1!==n.indexOf(i))return!0;var n,i;return!1}function D(e,r){for(var t=0;t<e.length;t++)if(r(e[t]))return e[t]}function q(e,r){return Array.prototype.concat.apply([],e.map(r))}function L(e){for(var r="",t=0;t<e.length;t++){var n=e[t];if(n.signatures&&""!==n.name)if(""===r)r=n.name;else if(r!==n.name){var i=new Error("Function names do not match (expected: "+r+", actual: "+n.name+")");throw i.data={actual:n.name,expected:r},i}}return r}return(u=T("typed",{"string, Object":T,Object:function(e){var r=[];for(var t in e)e.hasOwnProperty(t)&&r.push(e[t]);return T(L(r),e)},"...Function":function(e){for(var r,t=L(e),n={},i=0;i<e.length;i++){var a=e[i];if("object"!=typeof a.signatures)throw(r=new TypeError("Function is no typed-function (index: "+i+")")).data={index:i},r;for(var o in a.signatures)if(a.signatures.hasOwnProperty(o))if(n.hasOwnProperty(o)){if(a.signatures[o]!==n[o])throw(r=new Error('Signature "'+o+'" is defined twice')).data={signature:o},r}else n[o]=a.signatures[o]}return T(t,n)}})).create=n,u.types=i,u.conversions=s,u.ignore=o,u.convert=function(e,r){var t=l(e);if(r===t)return e;for(var n=0;n<u.conversions.length;n++){var i=u.conversions[n];if(i.from===t&&i.to===r)return i.convert(e)}throw new Error("Cannot convert from "+t+" to "+r)},u.find=function(e,r){if(!e.signatures)throw new TypeError("Function is no typed-function");var t;if("string"==typeof r){t=r.split(",");for(var n=0;n<t.length;n++)t[n]=t[n].trim()}else{if(!Array.isArray(r))throw new TypeError("String array or a comma separated string expected");t=r}var i=t.join(","),a=e.signatures[i];if(a)return a;throw new TypeError("Signature not found (signature: "+(e.name||"unnamed")+"("+t.join(", ")+"))")},u.addType=function(e){if(!e||"string"!=typeof e.name||"function"!=typeof e.test)throw new TypeError("Object with properties {name: string, test: function} expected");u.types.push(e)},u.addConversion=function(e){if(!e||"string"!=typeof e.from||"string"!=typeof e.to||"function"!=typeof e.convert)throw new TypeError("Object with properties {from: string, to: string, convert: function} expected");u.conversions.push(e)},u}()},e.exports=t()})),o=r(function(e,r){function t(e){for(var r=[],t=0;t<e;t++)r.push(0);return r}r.isNumber=function(e){return"number"==typeof e},r.isInteger=function(e){return!!isFinite(e)&&e==Math.round(e)},r.sign=Math.sign||function(e){return e>0?1:e<0?-1:0},r.format=function(e,t){if("function"==typeof t)return t(e);if(e===1/0)return"Infinity";if(e===-1/0)return"-Infinity";if(isNaN(e))return"NaN";var n="auto",i=void 0;switch(t&&(t.notation&&(n=t.notation),r.isNumber(t)?i=t:t.precision&&(i=t.precision)),n){case"fixed":return r.toFixed(e,i);case"exponential":return r.toExponential(e,i);case"engineering":return r.toEngineering(e,i);case"auto":if(t&&t.exponential&&(void 0!==t.exponential.lower||void 0!==t.exponential.upper)){var a=Object.assign({},t);return a.exponential=void 0,void 0!==t.exponential.lower&&(a.lowerExp=Math.round(Math.log(t.exponential.lower)/Math.LN10)),void 0!==t.exponential.upper&&(a.upperExp=Math.round(Math.log(t.exponential.upper)/Math.LN10)),console.warn("Deprecation warning: Formatting options exponential.lower and exponential.upper (minimum and maximum value) are replaced with exponential.lowerExp and exponential.upperExp (minimum and maximum exponent) since version 4.0.0. Replace "+JSON.stringify(t)+" with "+JSON.stringify(a)),r.toPrecision(e,i,a)}return r.toPrecision(e,i,t&&t).replace(/((\.\d*?)(0+))($|e)/,function(){var e=arguments[2],r=arguments[4];return"."!==e?e+r:r});default:throw new Error('Unknown notation "'+n+'". Choose "auto", "exponential", or "fixed".')}},r.splitNumber=function(e){var r=String(e).toLowerCase().match(/^0*?(-?)(\d+\.?\d*)(e([+-]?\d+))?$/);if(!r)throw new SyntaxError("Invalid number "+e);var t=r[1],n=r[2],i=parseFloat(r[4]||"0"),a=n.indexOf(".");i+=-1!==a?a-1:n.length-1;var o=n.replace(".","").replace(/^0*/,function(e){return i-=e.length,""}).replace(/0*$/,"").split("").map(function(e){return parseInt(e)});return 0===o.length&&(o.push(0),i++),{sign:t,coefficients:o,exponent:i}},r.toEngineering=function(e,n){if(isNaN(e)||!isFinite(e))return String(e);var i=r.roundDigits(r.splitNumber(e),n),a=i.exponent,o=i.coefficients,s=a%3==0?a:a<0?a-3-a%3:a-a%3,u=a>=0?a:Math.abs(s);o.length-1<u&&(o=o.concat(t(u-(o.length-1))));for(var c=Math.abs(a-s),f=1;--c>=0;)f++;var l=o.slice(f).join(""),p=l.match(/[1-9]/)?"."+l:"",m=o.slice(0,f).join("")+p+"e"+(a>=0?"+":"")+s.toString();return i.sign+m},r.toFixed=function(e,n){if(isNaN(e)||!isFinite(e))return String(e);var i=r.splitNumber(e),a="number"==typeof n?r.roundDigits(i,i.exponent+1+n):i,o=a.coefficients,s=a.exponent+1,u=s+(n||0);return o.length<u&&(o=o.concat(t(u-o.length))),s<0&&(o=t(1-s).concat(o),s=1),s<o.length&&o.splice(s,0,0===s?"0.":"."),a.sign+o.join("")},r.toExponential=function(e,n){if(isNaN(e)||!isFinite(e))return String(e);var i=r.splitNumber(e),a=n?r.roundDigits(i,n):i,o=a.coefficients,s=a.exponent;o.length<n&&(o=o.concat(t(n-o.length)));var u=o.shift();return a.sign+u+(o.length>0?"."+o.join(""):"")+"e"+(s>=0?"+":"")+s},r.toPrecision=function(e,n,i){if(isNaN(e)||!isFinite(e))return String(e);var a=i&&void 0!==i.lowerExp?i.lowerExp:-3,o=i&&void 0!==i.upperExp?i.upperExp:5,s=r.splitNumber(e);if(s.exponent<a||s.exponent>=o)return r.toExponential(e,n);var u=n?r.roundDigits(s,n):s,c=u.coefficients,f=u.exponent;c.length<n&&(c=c.concat(t(n-c.length))),c=c.concat(t(f-c.length+1+(c.length<n?n-c.length:0))),c=t(-f).concat(c);var l=f>0?f:0;return l<c.length-1&&c.splice(l+1,0,"."),u.sign+c.join("")},r.roundDigits=function(e,r){for(var t={sign:e.sign,coefficients:e.coefficients,exponent:e.exponent},n=t.coefficients;r<=0;)n.unshift(0),t.exponent++,r++;if(n.length>r&&n.splice(r,n.length-r)[0]>=5){var i=r-1;for(n[i]++;10===n[i];)n.pop(),0===i&&(n.unshift(0),t.exponent++,i++),n[--i]++}return t},r.digits=function(e){return e.toExponential().replace(/e.*$/,"").replace(/^0\.?0*|\./,"").length},r.DBL_EPSILON=Number.EPSILON||2.220446049250313e-16,r.nearlyEqual=function(e,t,n){if(null==n)return e==t;if(e==t)return!0;if(isNaN(e)||isNaN(t))return!1;if(isFinite(e)&&isFinite(t)){var i=Math.abs(e-t);return i<r.DBL_EPSILON||i<=Math.max(Math.abs(e),Math.abs(t))*n}return!1}}),s=(o.isNumber,o.isInteger,o.sign,o.format,o.splitNumber,o.toEngineering,o.toFixed,o.toExponential,o.toPrecision,o.roundDigits,o.digits,o.DBL_EPSILON,o.nearlyEqual,function(e){return e&&e.constructor.prototype.isMatrix||!1}),u=o.digits,c=function(){return c=a.create,a},f=function(e){e.isNumber=function(e){return"number"==typeof e},e.isComplex=function(r){return e.Complex&&r instanceof e.Complex||!1},e.isBigNumber=t,e.isFraction=function(r){return e.Fraction&&r instanceof e.Fraction||!1},e.isUnit=function(e){return e&&e.constructor.prototype.isUnit||!1},e.isString=function(e){return"string"==typeof e},e.isArray=Array.isArray,e.isMatrix=s,e.isDenseMatrix=function(e){return e&&e.isDenseMatrix&&e.constructor.prototype.isMatrix||!1},e.isSparseMatrix=function(e){return e&&e.isSparseMatrix&&e.constructor.prototype.isMatrix||!1},e.isRange=function(e){return e&&e.constructor.prototype.isRange||!1},e.isIndex=function(e){return e&&e.constructor.prototype.isIndex||!1},e.isBoolean=function(e){return"boolean"==typeof e},e.isResultSet=function(e){return e&&e.constructor.prototype.isResultSet||!1},e.isHelp=function(e){return e&&e.constructor.prototype.isHelp||!1},e.isFunction=function(e){return"function"==typeof e},e.isDate=function(e){return e instanceof Date},e.isRegExp=function(e){return e instanceof RegExp},e.isObject=function(r){return"object"==typeof r&&r.constructor===Object&&!e.isComplex(r)&&!e.isFraction(r)},e.isNull=function(e){return null===e},e.isUndefined=function(e){return void 0===e},e.isAccessorNode=function(e){return e&&e.isAccessorNode&&e.constructor.prototype.isNode||!1},e.isArrayNode=function(e){return e&&e.isArrayNode&&e.constructor.prototype.isNode||!1},e.isAssignmentNode=function(e){return e&&e.isAssignmentNode&&e.constructor.prototype.isNode||!1},e.isBlockNode=function(e){return e&&e.isBlockNode&&e.constructor.prototype.isNode||!1},e.isConditionalNode=function(e){return e&&e.isConditionalNode&&e.constructor.prototype.isNode||!1},e.isConstantNode=function(e){return e&&e.isConstantNode&&e.constructor.prototype.isNode||!1},e.isFunctionAssignmentNode=function(e){return e&&e.isFunctionAssignmentNode&&e.constructor.prototype.isNode||!1},e.isFunctionNode=function(e){return e&&e.isFunctionNode&&e.constructor.prototype.isNode||!1},e.isIndexNode=function(e){return e&&e.isIndexNode&&e.constructor.prototype.isNode||!1},e.isNode=function(e){return e&&e.isNode&&e.constructor.prototype.isNode||!1},e.isObjectNode=function(e){return e&&e.isObjectNode&&e.constructor.prototype.isNode||!1},e.isOperatorNode=function(e){return e&&e.isOperatorNode&&e.constructor.prototype.isNode||!1},e.isParenthesisNode=function(e){return e&&e.isParenthesisNode&&e.constructor.prototype.isNode||!1},e.isRangeNode=function(e){return e&&e.isRangeNode&&e.constructor.prototype.isNode||!1},e.isSymbolNode=function(e){return e&&e.isSymbolNode&&e.constructor.prototype.isNode||!1},e.isChain=function(e){return e&&e.constructor.prototype.isChain||!1};var r=c();return r.types=[{name:"number",test:e.isNumber},{name:"Complex",test:e.isComplex},{name:"BigNumber",test:e.isBigNumber},{name:"Fraction",test:e.isFraction},{name:"Unit",test:e.isUnit},{name:"string",test:e.isString},{name:"Array",test:e.isArray},{name:"Matrix",test:e.isMatrix},{name:"DenseMatrix",test:e.isDenseMatrix},{name:"SparseMatrix",test:e.isSparseMatrix},{name:"Range",test:e.isRange},{name:"Index",test:e.isIndex},{name:"boolean",test:e.isBoolean},{name:"ResultSet",test:e.isResultSet},{name:"Help",test:e.isHelp},{name:"function",test:e.isFunction},{name:"Date",test:e.isDate},{name:"RegExp",test:e.isRegExp},{name:"null",test:e.isNull},{name:"undefined",test:e.isUndefined},{name:"OperatorNode",test:e.isOperatorNode},{name:"ConstantNode",test:e.isConstantNode},{name:"SymbolNode",test:e.isSymbolNode},{name:"ParenthesisNode",test:e.isParenthesisNode},{name:"FunctionNode",test:e.isFunctionNode},{name:"FunctionAssignmentNode",test:e.isFunctionAssignmentNode},{name:"ArrayNode",test:e.isArrayNode},{name:"AssignmentNode",test:e.isAssignmentNode},{name:"BlockNode",test:e.isBlockNode},{name:"ConditionalNode",test:e.isConditionalNode},{name:"IndexNode",test:e.isIndexNode},{name:"RangeNode",test:e.isRangeNode},{name:"Node",test:e.isNode},{name:"Object",test:e.isObject}],r.conversions=[{from:"number",to:"BigNumber",convert:function(r){if(u(r)>15)throw new TypeError("Cannot implicitly convert a number with >15 significant digits to BigNumber (value: "+r+"). Use function bignumber(x) to convert to BigNumber.");return new e.BigNumber(r)}},{from:"number",to:"Complex",convert:function(r){return new e.Complex(r,0)}},{from:"number",to:"string",convert:function(e){return e+""}},{from:"BigNumber",to:"Complex",convert:function(r){return new e.Complex(r.toNumber(),0)}},{from:"Fraction",to:"BigNumber",convert:function(e){throw new TypeError("Cannot implicitly convert a Fraction to BigNumber or vice versa. Use function bignumber(x) to convert to BigNumber or fraction(x) to convert to Fraction.")}},{from:"Fraction",to:"Complex",convert:function(r){return new e.Complex(r.valueOf(),0)}},{from:"number",to:"Fraction",convert:function(r){if(new e.Fraction(r).valueOf()!==r)throw new TypeError("Cannot implicitly convert a number to a Fraction when there will be a loss of precision (value: "+r+"). Use function fraction(x) to convert to Fraction.");return new e.Fraction(r)}},{from:"string",to:"number",convert:function(e){var r=Number(e);if(isNaN(r))throw new Error('Cannot convert "'+e+'" to a number');return r}},{from:"string",to:"BigNumber",convert:function(r){try{return new e.BigNumber(r)}catch(e){throw new Error('Cannot convert "'+r+'" to BigNumber')}}},{from:"string",to:"Fraction",convert:function(r){try{return new e.Fraction(r)}catch(e){throw new Error('Cannot convert "'+r+'" to Fraction')}}},{from:"string",to:"Complex",convert:function(r){try{return new e.Complex(r)}catch(e){throw new Error('Cannot convert "'+r+'" to Complex')}}},{from:"boolean",to:"number",convert:function(e){return+e}},{from:"boolean",to:"BigNumber",convert:function(r){return new e.BigNumber(+r)}},{from:"boolean",to:"Fraction",convert:function(r){return new e.Fraction(+r)}},{from:"boolean",to:"string",convert:function(e){return+e}},{from:"Array",to:"Matrix",convert:function(r){return new e.DenseMatrix(r)}},{from:"Matrix",to:"Array",convert:function(e){return e.valueOf()}}],r};function l(){}l.prototype={on:function(e,r,t){var n=this.e||(this.e={});return(n[e]||(n[e]=[])).push({fn:r,ctx:t}),this},once:function(e,r,t){var n=this;function i(){n.off(e,i),r.apply(t,arguments)}return i._=r,this.on(e,i,t)},emit:function(e){for(var r=[].slice.call(arguments,1),t=((this.e||(this.e={}))[e]||[]).slice(),n=0,i=t.length;n<i;n++)t[n].fn.apply(t[n].ctx,r);return this},off:function(e,r){var t=this.e||(this.e={}),n=t[e],i=[];if(n&&r)for(var a=0,o=n.length;a<o;a++)n[a].fn!==r&&n[a].fn._!==r&&i.push(n[a]);return i.length?t[e]=i:delete t[e],this}};var p=l,m={mixin:function(e){var r=new p;return e.on=r.on.bind(r),e.off=r.off.bind(r),e.once=r.once.bind(r),e.emit=r.emit.bind(r),e}};function h(e,r,t,n){if(!(this instanceof h))throw new SyntaxError("Constructor must be called with the new operator");this.fn=e,this.count=r,this.min=t,this.max=n,this.message="Wrong number of arguments in function "+e+" ("+r+" provided, "+t+(void 0!=n?"-"+n:"")+" expected)",this.stack=(new Error).stack}h.prototype=new Error,h.prototype.constructor=Error,h.prototype.name="ArgumentsError",h.prototype.isArgumentsError=!0;var d=h,g=i.lazy,v=i.isFactory,y=i.traverse;var x={math:!0,name:"import",factory:function(e,r,t,n,i){function a(e,r,t){if(t.wrap&&"function"==typeof r&&(s=function(){for(var e=[],r=0,t=arguments.length;r<t;r++){var n=arguments[r];e[r]=n&&n.valueOf()}return a.apply(i,e)},(a=r).transform&&(s.transform=a.transform),r=s),c(i[e])&&c(r))return r=t.override?n(e,r.signatures):n(i[e],r),i[e]=r,o(e,r),void i.emit("import",e,function(){return r});var a,s;if(void 0===i[e]||t.override)return i[e]=r,o(e,r),void i.emit("import",e,function(){return r});if(!t.silent)throw new Error('Cannot import "'+e+'": already exists')}function o(e,r){r&&"function"==typeof r.transform?(i.expression.transform[e]=r.transform,f(e)&&(i.expression.mathWithTransform[e]=r.transform)):(delete i.expression.transform[e],f(e)&&(i.expression.mathWithTransform[e]=r))}function s(e,r){if("string"==typeof e.name){var a=e.name,o=a in i.expression.transform,s=e.path?y(i,e.path):i,u=s.hasOwnProperty(a)?s[a]:void 0,f=function(){var i=t(e);if(i&&"function"==typeof i.transform)throw new Error('Transforms cannot be attached to factory functions. Please create a separate function for it with exports.path="expression.transform"');if(c(u)&&c(i))return r.override||(i=n(u,i)),i;if(void 0===u||r.override)return i;if(!r.silent)throw new Error('Cannot import "'+a+'": already exists')};!1!==e.lazy?(g(s,a,f),o||("expression.transform"===e.path||l(e))&&g(i.expression.mathWithTransform,a,f)):(s[a]=f(),o||("expression.transform"===e.path||l(e))&&(i.expression.mathWithTransform[a]=f())),i.emit("import",a,f,e.path)}else t(e)}function u(r){return"function"==typeof r||"number"==typeof r||"string"==typeof r||"boolean"==typeof r||null===r||r&&e.isUnit(r)||r&&e.isComplex(r)||r&&e.isBigNumber(r)||r&&e.isFraction(r)||r&&e.isMatrix(r)||r&&Array.isArray(r)}function c(e){return"function"==typeof e&&"object"==typeof e.signatures}function f(e){return!p.hasOwnProperty(e)}function l(e){return void 0===e.path&&!p.hasOwnProperty(e.name)}var p={expression:!0,type:!0,docs:!0,error:!0,json:!0,chain:!0};return function e(r,t){var n=arguments.length;if(1!==n&&2!==n)throw new d("import",n,1,2);if(t||(t={}),v(r))s(r,t);else if(Array.isArray(r))r.forEach(function(r){e(r,t)});else if("object"==typeof r){for(var i in r)if(r.hasOwnProperty(i)){var o=r[i];u(o)?a(i,o,t):v(r)?s(r,t):e(o,t)}}else if(!t.silent)throw new TypeError("Factory, Object, or Array expected")}},lazy:!0};function w(e,r,t){if(void 0!==e[r]&&(i=t,a=e[r],-1===i.indexOf(a))){var n=function(e,r){return e.map(function(e){return e.toLowerCase()}).indexOf(r.toLowerCase())}(t,e[r]);-1!==n?(console.warn('Warning: Wrong casing for configuration option "'+r+'", should be "'+t[n]+'" instead of "'+e[r]+'".'),e[r]=t[n]):console.warn('Warning: Unknown value "'+e[r]+'" for configuration option "'+r+'". Available options: '+t.map(JSON.stringify).join(", ")+".")}var i,a}var b={name:"config",math:!0,factory:function(e,r,t,n,a){var o=["Matrix","Array"],s=["number","BigNumber","Fraction"];function u(e){if(e){var t=i.map(r,i.clone);w(e,"matrix",o),w(e,"number",s),i.deepExtend(r,e);var n=i.map(r,i.clone),u=i.map(e,i.clone);return a.emit("config",n,t,u),n}return i.map(r,i.clone)}return u.MATRIX=o,u.NUMBER=s,u}},N=i.isFactory,M={create:function(e){if("function"!=typeof Object.create)throw new Error("ES5 not supported by this JavaScript engine. Please load the es5-shim and es5-sham library for compatibility.");var r=[],t=[],n=m.mixin({});n.type={},n.expression={transform:{},mathWithTransform:{}},n.typed=f(n.type);var i={epsilon:1e-12,matrix:"Matrix",number:"number",precision:64,predictable:!1,randomSeed:null};function a(e){if(!N(e))throw new Error("Factory object with properties `type`, `name`, and `factory` expected");var o,s=r.indexOf(e);return-1===s?(o=!0===e.math?e.factory(n.type,i,a,n.typed,n):e.factory(n.type,i,a,n.typed),r.push(e),t.push(o)):o=t[s],o}return n.import=a(x),n.config=a(b),n.expression.mathWithTransform.config=n.config,e&&n.config(e),n}},E=r(function(r){!function(e){var t,n,i,a,o=9e15,s=1e9,u="0123456789abcdef",c="2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058",f="3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789",l={precision:20,rounding:4,modulo:1,toExpNeg:-7,toExpPos:21,minE:-o,maxE:o,crypto:!1},p=!0,m="[DecimalError] ",h=m+"Invalid argument: ",d=m+"Precision limit exceeded",g=m+"crypto unavailable",v=Math.floor,y=Math.pow,x=/^0b([01]+(\.[01]*)?|\.[01]+)(p[+-]?\d+)?$/i,w=/^0x([0-9a-f]+(\.[0-9a-f]*)?|\.[0-9a-f]+)(p[+-]?\d+)?$/i,b=/^0o([0-7]+(\.[0-7]*)?|\.[0-7]+)(p[+-]?\d+)?$/i,N=/^(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i,M=1e7,E=7,A=c.length-1,O=f.length-1,S={name:"[object Decimal]"};function _(e){var r,t,n,i=e.length-1,a="",o=e[0];if(i>0){for(a+=o,r=1;r<i;r++)n=e[r]+"",(t=E-n.length)&&(a+=q(t)),a+=n;o=e[r],(t=E-(n=o+"").length)&&(a+=q(t))}else if(0===o)return"0";for(;o%10==0;)o/=10;return a+o}function T(e,r,t){if(e!==~~e||e<r||e>t)throw Error(h+e)}function C(e,r,t,n){var i,a,o,s;for(a=e[0];a>=10;a/=10)--r;return--r<0?(r+=E,i=0):(i=Math.ceil((r+1)/E),r%=E),a=y(10,E-r),s=e[i]%a|0,null==n?r<3?(0==r?s=s/100|0:1==r&&(s=s/10|0),o=t<4&&99999==s||t>3&&49999==s||5e4==s||0==s):o=(t<4&&s+1==a||t>3&&s+1==a/2)&&(e[i+1]/a/100|0)==y(10,r-2)-1||(s==a/2||0==s)&&0==(e[i+1]/a/100|0):r<4?(0==r?s=s/1e3|0:1==r?s=s/100|0:2==r&&(s=s/10|0),o=(n||t<4)&&9999==s||!n&&t>3&&4999==s):o=((n||t<4)&&s+1==a||!n&&t>3&&s+1==a/2)&&(e[i+1]/a/1e3|0)==y(10,r-3)-1,o}function z(e,r,t){for(var n,i,a=[0],o=0,s=e.length;o<s;){for(i=a.length;i--;)a[i]*=r;for(a[0]+=u.indexOf(e.charAt(o++)),n=0;n<a.length;n++)a[n]>t-1&&(void 0===a[n+1]&&(a[n+1]=0),a[n+1]+=a[n]/t|0,a[n]%=t)}return a.reverse()}S.absoluteValue=S.abs=function(){var e=new this.constructor(this);return e.s<0&&(e.s=1),P(e)},S.ceil=function(){return P(new this.constructor(this),this.e+1,2)},S.comparedTo=S.cmp=function(e){var r,t,n,i,a=this,o=a.d,s=(e=new a.constructor(e)).d,u=a.s,c=e.s;if(!o||!s)return u&&c?u!==c?u:o===s?0:!o^u<0?1:-1:NaN;if(!o[0]||!s[0])return o[0]?u:s[0]?-c:0;if(u!==c)return u;if(a.e!==e.e)return a.e>e.e^u<0?1:-1;for(r=0,t=(n=o.length)<(i=s.length)?n:i;r<t;++r)if(o[r]!==s[r])return o[r]>s[r]^u<0?1:-1;return n===i?0:n>i^u<0?1:-1},S.cosine=S.cos=function(){var e,r,t=this,n=t.constructor;return t.d?t.d[0]?(e=n.precision,r=n.rounding,n.precision=e+Math.max(t.e,t.sd())+E,n.rounding=1,t=function(e,r){var t,n,i=r.d.length;i<32?(t=Math.ceil(i/3),n=Math.pow(4,-t).toString()):(t=16,n="2.3283064365386962890625e-10");e.precision+=t,r=W(e,1,r.times(n),new e(1));for(var a=t;a--;){var o=r.times(r);r=o.times(o).minus(o).times(8).plus(1)}return e.precision-=t,r}(n,J(n,t)),n.precision=e,n.rounding=r,P(2==a||3==a?t.neg():t,e,r,!0)):new n(1):new n(NaN)},S.cubeRoot=S.cbrt=function(){var e,r,t,n,i,a,o,s,u,c,f=this,l=f.constructor;if(!f.isFinite()||f.isZero())return new l(f);for(p=!1,(a=f.s*Math.pow(f.s*f,1/3))&&Math.abs(a)!=1/0?n=new l(a.toString()):(t=_(f.d),(a=((e=f.e)-t.length+1)%3)&&(t+=1==a||-2==a?"0":"00"),a=Math.pow(t,1/3),e=v((e+1)/3)-(e%3==(e<0?-1:2)),(n=new l(t=a==1/0?"5e"+e:(t=a.toExponential()).slice(0,t.indexOf("e")+1)+e)).s=f.s),o=(e=l.precision)+3;;)if(c=(u=(s=n).times(s).times(s)).plus(f),n=B(c.plus(f).times(s),c.plus(u),o+2,1),_(s.d).slice(0,o)===(t=_(n.d)).slice(0,o)){if("9999"!=(t=t.slice(o-3,o+1))&&(i||"4999"!=t)){+t&&(+t.slice(1)||"5"!=t.charAt(0))||(P(n,e+1,1),r=!n.times(n).times(n).eq(f));break}if(!i&&(P(s,e+1,0),s.times(s).times(s).eq(f))){n=s;break}o+=4,i=1}return p=!0,P(n,e,l.rounding,r)},S.decimalPlaces=S.dp=function(){var e,r=this.d,t=NaN;if(r){if(t=((e=r.length-1)-v(this.e/E))*E,e=r[e])for(;e%10==0;e/=10)t--;t<0&&(t=0)}return t},S.dividedBy=S.div=function(e){return B(this,new this.constructor(e))},S.dividedToIntegerBy=S.divToInt=function(e){var r=this.constructor;return P(B(this,new r(e),0,1,1),r.precision,r.rounding)},S.equals=S.eq=function(e){return 0===this.cmp(e)},S.floor=function(){return P(new this.constructor(this),this.e+1,3)},S.greaterThan=S.gt=function(e){return this.cmp(e)>0},S.greaterThanOrEqualTo=S.gte=function(e){var r=this.cmp(e);return 1==r||0===r},S.hyperbolicCosine=S.cosh=function(){var e,r,t,n,i,a=this,o=a.constructor,s=new o(1);if(!a.isFinite())return new o(a.s?1/0:NaN);if(a.isZero())return s;t=o.precision,n=o.rounding,o.precision=t+Math.max(a.e,a.sd())+4,o.rounding=1,(i=a.d.length)<32?(e=Math.ceil(i/3),r=Math.pow(4,-e).toString()):(e=16,r="2.3283064365386962890625e-10"),a=W(o,1,a.times(r),new o(1),!0);for(var u,c=e,f=new o(8);c--;)u=a.times(a),a=s.minus(u.times(f.minus(u.times(f))));return P(a,o.precision=t,o.rounding=n,!0)},S.hyperbolicSine=S.sinh=function(){var e,r,t,n,i=this,a=i.constructor;if(!i.isFinite()||i.isZero())return new a(i);if(r=a.precision,t=a.rounding,a.precision=r+Math.max(i.e,i.sd())+4,a.rounding=1,(n=i.d.length)<3)i=W(a,2,i,i,!0);else{e=(e=1.4*Math.sqrt(n))>16?16:0|e,i=W(a,2,i=i.times(Math.pow(5,-e)),i,!0);for(var o,s=new a(5),u=new a(16),c=new a(20);e--;)o=i.times(i),i=i.times(s.plus(o.times(u.times(o).plus(c))))}return a.precision=r,a.rounding=t,P(i,r,t,!0)},S.hyperbolicTangent=S.tanh=function(){var e,r,t=this,n=t.constructor;return t.isFinite()?t.isZero()?new n(t):(e=n.precision,r=n.rounding,n.precision=e+7,n.rounding=1,B(t.sinh(),t.cosh(),n.precision=e,n.rounding=r)):new n(t.s)},S.inverseCosine=S.acos=function(){var e,r=this,t=r.constructor,n=r.abs().cmp(1),i=t.precision,a=t.rounding;return-1!==n?0===n?r.isNeg()?k(t,i,a):new t(0):new t(NaN):r.isZero()?k(t,i+4,a).times(.5):(t.precision=i+6,t.rounding=1,r=r.asin(),e=k(t,i+4,a).times(.5),t.precision=i,t.rounding=a,e.minus(r))},S.inverseHyperbolicCosine=S.acosh=function(){var e,r,t=this,n=t.constructor;return t.lte(1)?new n(t.eq(1)?0:NaN):t.isFinite()?(e=n.precision,r=n.rounding,n.precision=e+Math.max(Math.abs(t.e),t.sd())+4,n.rounding=1,p=!1,t=t.times(t).minus(1).sqrt().plus(t),p=!0,n.precision=e,n.rounding=r,t.ln()):new n(t)},S.inverseHyperbolicSine=S.asinh=function(){var e,r,t=this,n=t.constructor;return!t.isFinite()||t.isZero()?new n(t):(e=n.precision,r=n.rounding,n.precision=e+2*Math.max(Math.abs(t.e),t.sd())+6,n.rounding=1,p=!1,t=t.times(t).plus(1).sqrt().plus(t),p=!0,n.precision=e,n.rounding=r,t.ln())},S.inverseHyperbolicTangent=S.atanh=function(){var e,r,t,n,i=this,a=i.constructor;return i.isFinite()?i.e>=0?new a(i.abs().eq(1)?i.s/0:i.isZero()?i:NaN):(e=a.precision,r=a.rounding,n=i.sd(),Math.max(n,e)<2*-i.e-1?P(new a(i),e,r,!0):(a.precision=t=n-i.e,i=B(i.plus(1),new a(1).minus(i),t+e,1),a.precision=e+4,a.rounding=1,i=i.ln(),a.precision=e,a.rounding=r,i.times(.5))):new a(NaN)},S.inverseSine=S.asin=function(){var e,r,t,n,i=this,a=i.constructor;return i.isZero()?new a(i):(r=i.abs().cmp(1),t=a.precision,n=a.rounding,-1!==r?0===r?((e=k(a,t+4,n).times(.5)).s=i.s,e):new a(NaN):(a.precision=t+6,a.rounding=1,i=i.div(new a(1).minus(i.times(i)).sqrt().plus(1)).atan(),a.precision=t,a.rounding=n,i.times(2)))},S.inverseTangent=S.atan=function(){var e,r,t,n,i,a,o,s,u,c=this,f=c.constructor,l=f.precision,m=f.rounding;if(c.isFinite()){if(c.isZero())return new f(c);if(c.abs().eq(1)&&l+4<=O)return(o=k(f,l+4,m).times(.25)).s=c.s,o}else{if(!c.s)return new f(NaN);if(l+4<=O)return(o=k(f,l+4,m).times(.5)).s=c.s,o}for(f.precision=s=l+10,f.rounding=1,e=t=Math.min(28,s/E+2|0);e;--e)c=c.div(c.times(c).plus(1).sqrt().plus(1));for(p=!1,r=Math.ceil(s/E),n=1,u=c.times(c),o=new f(c),i=c;-1!==e;)if(i=i.times(u),a=o.minus(i.div(n+=2)),i=i.times(u),void 0!==(o=a.plus(i.div(n+=2))).d[r])for(e=r;o.d[e]===a.d[e]&&e--;);return t&&(o=o.times(2<<t-1)),p=!0,P(o,f.precision=l,f.rounding=m,!0)},S.isFinite=function(){return!!this.d},S.isInteger=S.isInt=function(){return!!this.d&&v(this.e/E)>this.d.length-2},S.isNaN=function(){return!this.s},S.isNegative=S.isNeg=function(){return this.s<0},S.isPositive=S.isPos=function(){return this.s>0},S.isZero=function(){return!!this.d&&0===this.d[0]},S.lessThan=S.lt=function(e){return this.cmp(e)<0},S.lessThanOrEqualTo=S.lte=function(e){return this.cmp(e)<1},S.logarithm=S.log=function(e){var r,t,n,i,a,o,s,u,c=this.constructor,f=c.precision,l=c.rounding;if(null==e)e=new c(10),r=!0;else{if(t=(e=new c(e)).d,e.s<0||!t||!t[0]||e.eq(1))return new c(NaN);r=e.eq(10)}if(t=this.d,this.s<0||!t||!t[0]||this.eq(1))return new c(t&&!t[0]?-1/0:1!=this.s?NaN:t?0:1/0);if(r)if(t.length>1)a=!0;else{for(i=t[0];i%10==0;)i/=10;a=1!==i}if(p=!1,o=$(this,s=f+5),n=r?U(c,s+10):$(e,s),C((u=B(o,n,s,1)).d,i=f,l))do{if(o=$(this,s+=10),n=r?U(c,s+10):$(e,s),u=B(o,n,s,1),!a){+_(u.d).slice(i+1,i+15)+1==1e14&&(u=P(u,f+1,0));break}}while(C(u.d,i+=10,l));return p=!0,P(u,f,l)},S.minus=S.sub=function(e){var r,t,n,i,a,o,s,u,c,f,l,m,h=this,d=h.constructor;if(e=new d(e),!h.d||!e.d)return h.s&&e.s?h.d?e.s=-e.s:e=new d(e.d||h.s!==e.s?h:NaN):e=new d(NaN),e;if(h.s!=e.s)return e.s=-e.s,h.plus(e);if(c=h.d,m=e.d,s=d.precision,u=d.rounding,!c[0]||!m[0]){if(m[0])e.s=-e.s;else{if(!c[0])return new d(3===u?-0:0);e=new d(h)}return p?P(e,s,u):e}if(t=v(e.e/E),f=v(h.e/E),c=c.slice(),a=f-t){for((l=a<0)?(r=c,a=-a,o=m.length):(r=m,t=f,o=c.length),a>(n=Math.max(Math.ceil(s/E),o)+2)&&(a=n,r.length=1),r.reverse(),n=a;n--;)r.push(0);r.reverse()}else{for((l=(n=c.length)<(o=m.length))&&(o=n),n=0;n<o;n++)if(c[n]!=m[n]){l=c[n]<m[n];break}a=0}for(l&&(r=c,c=m,m=r,e.s=-e.s),o=c.length,n=m.length-o;n>0;--n)c[o++]=0;for(n=m.length;n>a;){if(c[--n]<m[n]){for(i=n;i&&0===c[--i];)c[i]=M-1;--c[i],c[n]+=M}c[n]-=m[n]}for(;0===c[--o];)c.pop();for(;0===c[0];c.shift())--t;return c[0]?(e.d=c,e.e=R(c,t),p?P(e,s,u):e):new d(3===u?-0:0)},S.modulo=S.mod=function(e){var r,t=this,n=t.constructor;return e=new n(e),!t.d||!e.s||e.d&&!e.d[0]?new n(NaN):!e.d||t.d&&!t.d[0]?P(new n(t),n.precision,n.rounding):(p=!1,9==n.modulo?(r=B(t,e.abs(),0,3,1)).s*=e.s:r=B(t,e,0,n.modulo,1),r=r.times(e),p=!0,t.minus(r))},S.naturalExponential=S.exp=function(){return H(this)},S.naturalLogarithm=S.ln=function(){return $(this)},S.negated=S.neg=function(){var e=new this.constructor(this);return e.s=-e.s,P(e)},S.plus=S.add=function(e){var r,t,n,i,a,o,s,u,c,f,l=this,m=l.constructor;if(e=new m(e),!l.d||!e.d)return l.s&&e.s?l.d||(e=new m(e.d||l.s===e.s?l:NaN)):e=new m(NaN),e;if(l.s!=e.s)return e.s=-e.s,l.minus(e);if(c=l.d,f=e.d,s=m.precision,u=m.rounding,!c[0]||!f[0])return f[0]||(e=new m(l)),p?P(e,s,u):e;if(a=v(l.e/E),n=v(e.e/E),c=c.slice(),i=a-n){for(i<0?(t=c,i=-i,o=f.length):(t=f,n=a,o=c.length),i>(o=(a=Math.ceil(s/E))>o?a+1:o+1)&&(i=o,t.length=1),t.reverse();i--;)t.push(0);t.reverse()}for((o=c.length)-(i=f.length)<0&&(i=o,t=f,f=c,c=t),r=0;i;)r=(c[--i]=c[i]+f[i]+r)/M|0,c[i]%=M;for(r&&(c.unshift(r),++n),o=c.length;0==c[--o];)c.pop();return e.d=c,e.e=R(c,n),p?P(e,s,u):e},S.precision=S.sd=function(e){var r,t=this;if(void 0!==e&&e!==!!e&&1!==e&&0!==e)throw Error(h+e);return t.d?(r=D(t.d),e&&t.e+1>r&&(r=t.e+1)):r=NaN,r},S.round=function(){var e=this,r=e.constructor;return P(new r(e),e.e+1,r.rounding)},S.sine=S.sin=function(){var e,r,t=this,n=t.constructor;return t.isFinite()?t.isZero()?new n(t):(e=n.precision,r=n.rounding,n.precision=e+Math.max(t.e,t.sd())+E,n.rounding=1,t=function(e,r){var t,n=r.d.length;if(n<3)return W(e,2,r,r);t=(t=1.4*Math.sqrt(n))>16?16:0|t,r=r.times(Math.pow(5,-t)),r=W(e,2,r,r);for(var i,a=new e(5),o=new e(16),s=new e(20);t--;)i=r.times(r),r=r.times(a.plus(i.times(o.times(i).minus(s))));return r}(n,J(n,t)),n.precision=e,n.rounding=r,P(a>2?t.neg():t,e,r,!0)):new n(NaN)},S.squareRoot=S.sqrt=function(){var e,r,t,n,i,a,o=this,s=o.d,u=o.e,c=o.s,f=o.constructor;if(1!==c||!s||!s[0])return new f(!c||c<0&&(!s||s[0])?NaN:s?o:1/0);for(p=!1,0==(c=Math.sqrt(+o))||c==1/0?(((r=_(s)).length+u)%2==0&&(r+="0"),c=Math.sqrt(r),u=v((u+1)/2)-(u<0||u%2),n=new f(r=c==1/0?"1e"+u:(r=c.toExponential()).slice(0,r.indexOf("e")+1)+u)):n=new f(c.toString()),t=(u=f.precision)+3;;)if(n=(a=n).plus(B(o,a,t+2,1)).times(.5),_(a.d).slice(0,t)===(r=_(n.d)).slice(0,t)){if("9999"!=(r=r.slice(t-3,t+1))&&(i||"4999"!=r)){+r&&(+r.slice(1)||"5"!=r.charAt(0))||(P(n,u+1,1),e=!n.times(n).eq(o));break}if(!i&&(P(a,u+1,0),a.times(a).eq(o))){n=a;break}t+=4,i=1}return p=!0,P(n,u,f.rounding,e)},S.tangent=S.tan=function(){var e,r,t=this,n=t.constructor;return t.isFinite()?t.isZero()?new n(t):(e=n.precision,r=n.rounding,n.precision=e+10,n.rounding=1,(t=t.sin()).s=1,t=B(t,new n(1).minus(t.times(t)).sqrt(),e+10,0),n.precision=e,n.rounding=r,P(2==a||4==a?t.neg():t,e,r,!0)):new n(NaN)},S.times=S.mul=function(e){var r,t,n,i,a,o,s,u,c,f=this,l=f.constructor,m=f.d,h=(e=new l(e)).d;if(e.s*=f.s,!(m&&m[0]&&h&&h[0]))return new l(!e.s||m&&!m[0]&&!h||h&&!h[0]&&!m?NaN:m&&h?0*e.s:e.s/0);for(t=v(f.e/E)+v(e.e/E),(u=m.length)<(c=h.length)&&(a=m,m=h,h=a,o=u,u=c,c=o),a=[],n=o=u+c;n--;)a.push(0);for(n=c;--n>=0;){for(r=0,i=u+n;i>n;)s=a[i]+h[n]*m[i-n-1]+r,a[i--]=s%M|0,r=s/M|0;a[i]=(a[i]+r)%M|0}for(;!a[--o];)a.pop();return r?++t:a.shift(),e.d=a,e.e=R(a,t),p?P(e,l.precision,l.rounding):e},S.toBinary=function(e,r){return Y(this,2,e,r)},S.toDecimalPlaces=S.toDP=function(e,r){var t=this,n=t.constructor;return t=new n(t),void 0===e?t:(T(e,0,s),void 0===r?r=n.rounding:T(r,0,8),P(t,e+t.e+1,r))},S.toExponential=function(e,r){var t,n=this,i=n.constructor;return void 0===e?t=I(n,!0):(T(e,0,s),void 0===r?r=i.rounding:T(r,0,8),t=I(n=P(new i(n),e+1,r),!0,e+1)),n.isNeg()&&!n.isZero()?"-"+t:t},S.toFixed=function(e,r){var t,n,i=this,a=i.constructor;return void 0===e?t=I(i):(T(e,0,s),void 0===r?r=a.rounding:T(r,0,8),t=I(n=P(new a(i),e+i.e+1,r),!1,e+n.e+1)),i.isNeg()&&!i.isZero()?"-"+t:t},S.toFraction=function(e){var r,t,n,i,a,o,s,u,c,f,l,m,d=this,g=d.d,v=d.constructor;if(!g)return new v(d);if(c=t=new v(1),o=(a=(r=new v(n=u=new v(0))).e=D(g)-d.e-1)%E,r.d[0]=y(10,o<0?E+o:o),null==e)e=a>0?r:c;else{if(!(s=new v(e)).isInt()||s.lt(c))throw Error(h+s);e=s.gt(r)?a>0?r:c:s}for(p=!1,s=new v(_(g)),f=v.precision,v.precision=a=g.length*E*2;l=B(s,r,0,1,1),1!=(i=t.plus(l.times(n))).cmp(e);)t=n,n=i,i=c,c=u.plus(l.times(i)),u=i,i=r,r=s.minus(l.times(i)),s=i;return i=B(e.minus(t),n,0,1,1),u=u.plus(i.times(c)),t=t.plus(i.times(n)),u.s=c.s=d.s,m=B(c,n,a,1).minus(d).abs().cmp(B(u,t,a,1).minus(d).abs())<1?[c,n]:[u,t],v.precision=f,p=!0,m},S.toHexadecimal=S.toHex=function(e,r){return Y(this,16,e,r)},S.toNearest=function(e,r){var t=this,n=t.constructor;if(t=new n(t),null==e){if(!t.d)return t;e=new n(1),r=n.rounding}else{if(e=new n(e),void 0!==r&&T(r,0,8),!t.d)return e.s?t:e;if(!e.d)return e.s&&(e.s=t.s),e}return e.d[0]?(p=!1,r<4&&(r=[4,5,7,8][r]),t=B(t,e,0,r,1).times(e),p=!0,P(t)):(e.s=t.s,t=e),t},S.toNumber=function(){return+this},S.toOctal=function(e,r){return Y(this,8,e,r)},S.toPower=S.pow=function(e){var r,t,n,i,a,o,s=this,u=s.constructor,c=+(e=new u(e));if(!(s.d&&e.d&&s.d[0]&&e.d[0]))return new u(y(+s,c));if((s=new u(s)).eq(1))return s;if(n=u.precision,a=u.rounding,e.eq(1))return P(s,n,a);if((r=v(e.e/E))>=e.d.length-1&&(t=c<0?-c:c)<=9007199254740991)return i=L(u,s,t,n),e.s<0?new u(1).div(i):P(i,n,a);if((o=s.s)<0){if(r<e.d.length-1)return new u(NaN);if(0==(1&e.d[r])&&(o=1),0==s.e&&1==s.d[0]&&1==s.d.length)return s.s=o,s}return(r=0!=(t=y(+s,c))&&isFinite(t)?new u(t+"").e:v(c*(Math.log("0."+_(s.d))/Math.LN10+s.e+1)))>u.maxE+1||r<u.minE-1?new u(r>0?o/0:0):(p=!1,u.rounding=s.s=1,t=Math.min(12,(r+"").length),(i=H(e.times($(s,n+t)),n)).d&&C((i=P(i,n+5,1)).d,n,a)&&(r=n+10,+_((i=P(H(e.times($(s,r+t)),r),r+5,1)).d).slice(n+1,n+15)+1==1e14&&(i=P(i,n+1,0))),i.s=o,p=!0,u.rounding=a,P(i,n,a))},S.toPrecision=function(e,r){var t,n=this,i=n.constructor;return void 0===e?t=I(n,n.e<=i.toExpNeg||n.e>=i.toExpPos):(T(e,1,s),void 0===r?r=i.rounding:T(r,0,8),t=I(n=P(new i(n),e,r),e<=n.e||n.e<=i.toExpNeg,e)),n.isNeg()&&!n.isZero()?"-"+t:t},S.toSignificantDigits=S.toSD=function(e,r){var t=this.constructor;return void 0===e?(e=t.precision,r=t.rounding):(T(e,1,s),void 0===r?r=t.rounding:T(r,0,8)),P(new t(this),e,r)},S.toString=function(){var e=this,r=e.constructor,t=I(e,e.e<=r.toExpNeg||e.e>=r.toExpPos);return e.isNeg()&&!e.isZero()?"-"+t:t},S.truncated=S.trunc=function(){return P(new this.constructor(this),this.e+1,1)},S.valueOf=S.toJSON=function(){var e=this,r=e.constructor,t=I(e,e.e<=r.toExpNeg||e.e>=r.toExpPos);return e.isNeg()?"-"+t:t};var B=function(){function e(e,r,t){var n,i=0,a=e.length;for(e=e.slice();a--;)n=e[a]*r+i,e[a]=n%t|0,i=n/t|0;return i&&e.unshift(i),e}function r(e,r,t,n){var i,a;if(t!=n)a=t>n?1:-1;else for(i=a=0;i<t;i++)if(e[i]!=r[i]){a=e[i]>r[i]?1:-1;break}return a}function t(e,r,t,n){for(var i=0;t--;)e[t]-=i,i=e[t]<r[t]?1:0,e[t]=i*n+e[t]-r[t];for(;!e[0]&&e.length>1;)e.shift()}return function(i,a,o,s,u,c){var f,l,p,m,h,d,g,y,x,w,b,N,A,O,S,_,T,C,z,B,I=i.constructor,R=i.s==a.s?1:-1,U=i.d,k=a.d;if(!(U&&U[0]&&k&&k[0]))return new I(i.s&&a.s&&(U?!k||U[0]!=k[0]:k)?U&&0==U[0]||!k?0*R:R/0:NaN);for(c?(h=1,l=i.e-a.e):(c=M,h=E,l=v(i.e/h)-v(a.e/h)),z=k.length,T=U.length,w=(x=new I(R)).d=[],p=0;k[p]==(U[p]||0);p++);if(k[p]>(U[p]||0)&&l--,null==o?(O=o=I.precision,s=I.rounding):O=u?o+(i.e-a.e)+1:o,O<0)w.push(1),d=!0;else{if(O=O/h+2|0,p=0,1==z){for(m=0,k=k[0],O++;(p<T||m)&&O--;p++)S=m*c+(U[p]||0),w[p]=S/k|0,m=S%k|0;d=m||p<T}else{for((m=c/(k[0]+1)|0)>1&&(k=e(k,m,c),U=e(U,m,c),z=k.length,T=U.length),_=z,N=(b=U.slice(0,z)).length;N<z;)b[N++]=0;(B=k.slice()).unshift(0),C=k[0],k[1]>=c/2&&++C;do{m=0,(f=r(k,b,z,N))<0?(A=b[0],z!=N&&(A=A*c+(b[1]||0)),(m=A/C|0)>1?(m>=c&&(m=c-1),1==(f=r(g=e(k,m,c),b,y=g.length,N=b.length))&&(m--,t(g,z<y?B:k,y,c))):(0==m&&(f=m=1),g=k.slice()),(y=g.length)<N&&g.unshift(0),t(b,g,N,c),-1==f&&(f=r(k,b,z,N=b.length))<1&&(m++,t(b,z<N?B:k,N,c)),N=b.length):0===f&&(m++,b=[0]),w[p++]=m,f&&b[0]?b[N++]=U[_]||0:(b=[U[_]],N=1)}while((_++<T||void 0!==b[0])&&O--);d=void 0!==b[0]}w[0]||w.shift()}if(1==h)x.e=l,n=d;else{for(p=1,m=w[0];m>=10;m/=10)p++;x.e=p+l*h-1,P(x,u?o+x.e+1:o,s,d)}return x}}();function P(e,r,t,n){var i,a,o,s,u,c,f,l,m,h=e.constructor;e:if(null!=r){if(!(l=e.d))return e;for(i=1,s=l[0];s>=10;s/=10)i++;if((a=r-i)<0)a+=E,o=r,u=(f=l[m=0])/y(10,i-o-1)%10|0;else if((m=Math.ceil((a+1)/E))>=(s=l.length)){if(!n)break e;for(;s++<=m;)l.push(0);f=u=0,i=1,o=(a%=E)-E+1}else{for(f=s=l[m],i=1;s>=10;s/=10)i++;u=(o=(a%=E)-E+i)<0?0:f/y(10,i-o-1)%10|0}if(n=n||r<0||void 0!==l[m+1]||(o<0?f:f%y(10,i-o-1)),c=t<4?(u||n)&&(0==t||t==(e.s<0?3:2)):u>5||5==u&&(4==t||n||6==t&&(a>0?o>0?f/y(10,i-o):0:l[m-1])%10&1||t==(e.s<0?8:7)),r<1||!l[0])return l.length=0,c?(r-=e.e+1,l[0]=y(10,(E-r%E)%E),e.e=-r||0):l[0]=e.e=0,e;if(0==a?(l.length=m,s=1,m--):(l.length=m+1,s=y(10,E-a),l[m]=o>0?(f/y(10,i-o)%y(10,o)|0)*s:0),c)for(;;){if(0==m){for(a=1,o=l[0];o>=10;o/=10)a++;for(o=l[0]+=s,s=1;o>=10;o/=10)s++;a!=s&&(e.e++,l[0]==M&&(l[0]=1));break}if(l[m]+=s,l[m]!=M)break;l[m--]=0,s=1}for(a=l.length;0===l[--a];)l.pop()}return p&&(e.e>h.maxE?(e.d=null,e.e=NaN):e.e<h.minE&&(e.e=0,e.d=[0])),e}function I(e,r,t){if(!e.isFinite())return G(e);var n,i=e.e,a=_(e.d),o=a.length;return r?(t&&(n=t-o)>0?a=a.charAt(0)+"."+a.slice(1)+q(n):o>1&&(a=a.charAt(0)+"."+a.slice(1)),a=a+(e.e<0?"e":"e+")+e.e):i<0?(a="0."+q(-i-1)+a,t&&(n=t-o)>0&&(a+=q(n))):i>=o?(a+=q(i+1-o),t&&(n=t-i-1)>0&&(a=a+"."+q(n))):((n=i+1)<o&&(a=a.slice(0,n)+"."+a.slice(n)),t&&(n=t-o)>0&&(i+1===o&&(a+="."),a+=q(n))),a}function R(e,r){var t=e[0];for(r*=E;t>=10;t/=10)r++;return r}function U(e,r,t){if(r>A)throw p=!0,t&&(e.precision=t),Error(d);return P(new e(c),r,1,!0)}function k(e,r,t){if(r>O)throw Error(d);return P(new e(f),r,t,!0)}function D(e){var r=e.length-1,t=r*E+1;if(r=e[r]){for(;r%10==0;r/=10)t--;for(r=e[0];r>=10;r/=10)t++}return t}function q(e){for(var r="";e--;)r+="0";return r}function L(e,r,t,n){var i,a=new e(1),o=Math.ceil(n/E+4);for(p=!1;;){if(t%2&&X((a=a.times(r)).d,o)&&(i=!0),0===(t=v(t/2))){t=a.d.length-1,i&&0===a.d[t]&&++a.d[t];break}X((r=r.times(r)).d,o)}return p=!0,a}function F(e){return 1&e.d[e.d.length-1]}function j(e,r,t){for(var n,i=new e(r[0]),a=0;++a<r.length;){if(!(n=new e(r[a])).s){i=n;break}i[t](n)&&(i=n)}return i}function H(e,r){var t,n,i,a,o,s,u,c=0,f=0,l=0,m=e.constructor,h=m.rounding,d=m.precision;if(!e.d||!e.d[0]||e.e>17)return new m(e.d?e.d[0]?e.s<0?0:1/0:1:e.s?e.s<0?0:e:NaN);for(null==r?(p=!1,u=d):u=r,s=new m(.03125);e.e>-2;)e=e.times(s),l+=5;for(u+=n=Math.log(y(2,l))/Math.LN10*2+5|0,t=a=o=new m(1),m.precision=u;;){if(a=P(a.times(e),u,1),t=t.times(++f),_((s=o.plus(B(a,t,u,1))).d).slice(0,u)===_(o.d).slice(0,u)){for(i=l;i--;)o=P(o.times(o),u,1);if(null!=r)return m.precision=d,o;if(!(c<3&&C(o.d,u-n,h,c)))return P(o,m.precision=d,h,p=!0);m.precision=u+=10,t=a=s=new m(1),f=0,c++}o=s}}function $(e,r){var t,n,i,a,o,s,u,c,f,l,m,h=1,d=e,g=d.d,v=d.constructor,y=v.rounding,x=v.precision;if(d.s<0||!g||!g[0]||!d.e&&1==g[0]&&1==g.length)return new v(g&&!g[0]?-1/0:1!=d.s?NaN:g?0:d);if(null==r?(p=!1,f=x):f=r,v.precision=f+=10,n=(t=_(g)).charAt(0),!(Math.abs(a=d.e)<15e14))return c=U(v,f+2,x).times(a+""),d=$(new v(n+"."+t.slice(1)),f-10).plus(c),v.precision=x,null==r?P(d,x,y,p=!0):d;for(;n<7&&1!=n||1==n&&t.charAt(1)>3;)n=(t=_((d=d.times(e)).d)).charAt(0),h++;for(a=d.e,n>1?(d=new v("0."+t),a++):d=new v(n+"."+t.slice(1)),l=d,u=o=d=B(d.minus(1),d.plus(1),f,1),m=P(d.times(d),f,1),i=3;;){if(o=P(o.times(m),f,1),_((c=u.plus(B(o,new v(i),f,1))).d).slice(0,f)===_(u.d).slice(0,f)){if(u=u.times(2),0!==a&&(u=u.plus(U(v,f+2,x).times(a+""))),u=B(u,new v(h),f,1),null!=r)return v.precision=x,u;if(!C(u.d,f-10,y,s))return P(u,v.precision=x,y,p=!0);v.precision=f+=10,c=o=d=B(l.minus(1),l.plus(1),f,1),m=P(d.times(d),f,1),i=s=1}u=c,i+=2}}function G(e){return String(e.s*e.s/0)}function V(e,r){var t,n,i;for((t=r.indexOf("."))>-1&&(r=r.replace(".","")),(n=r.search(/e/i))>0?(t<0&&(t=n),t+=+r.slice(n+1),r=r.substring(0,n)):t<0&&(t=r.length),n=0;48===r.charCodeAt(n);n++);for(i=r.length;48===r.charCodeAt(i-1);--i);if(r=r.slice(n,i)){if(i-=n,e.e=t=t-n-1,e.d=[],n=(t+1)%E,t<0&&(n+=E),n<i){for(n&&e.d.push(+r.slice(0,n)),i-=E;n<i;)e.d.push(+r.slice(n,n+=E));r=r.slice(n),n=E-r.length}else n-=i;for(;n--;)r+="0";e.d.push(+r),p&&(e.e>e.constructor.maxE?(e.d=null,e.e=NaN):e.e<e.constructor.minE&&(e.e=0,e.d=[0]))}else e.e=0,e.d=[0];return e}function Z(e,r){var n,i,a,o,s,u,c,f,l;if("Infinity"===r||"NaN"===r)return+r||(e.s=NaN),e.e=NaN,e.d=null,e;if(w.test(r))n=16,r=r.toLowerCase();else if(x.test(r))n=2;else{if(!b.test(r))throw Error(h+r);n=8}for((o=r.search(/p/i))>0?(c=+r.slice(o+1),r=r.substring(2,o)):r=r.slice(2),s=(o=r.indexOf("."))>=0,i=e.constructor,s&&(o=(u=(r=r.replace(".","")).length)-o,a=L(i,new i(n),o,2*o)),o=l=(f=z(r,n,M)).length-1;0===f[o];--o)f.pop();return o<0?new i(0*e.s):(e.e=R(f,l),e.d=f,p=!1,s&&(e=B(e,a,4*u)),c&&(e=e.times(Math.abs(c)<54?Math.pow(2,c):t.pow(2,c))),p=!0,e)}function W(e,r,t,n,i){var a,o,s,u,c=e.precision,f=Math.ceil(c/E);for(p=!1,u=t.times(t),s=new e(n);;){if(o=B(s.times(u),new e(r++*r++),c,1),s=i?n.plus(o):n.minus(o),n=B(o.times(u),new e(r++*r++),c,1),void 0!==(o=s.plus(n)).d[f]){for(a=f;o.d[a]===s.d[a]&&a--;);if(-1==a)break}a=s,s=n,n=o,o=a}return p=!0,o.d.length=f+1,o}function J(e,r){var t,n=r.s<0,i=k(e,e.precision,1),o=i.times(.5);if((r=r.abs()).lte(o))return a=n?4:1,r;if((t=r.divToInt(i)).isZero())a=n?3:2;else{if((r=r.minus(t.times(i))).lte(o))return a=F(t)?n?2:3:n?4:1,r;a=F(t)?n?1:4:n?3:2}return r.minus(i).abs()}function Y(e,r,t,i){var a,o,c,f,l,p,m,h,d,g=e.constructor,v=void 0!==t;if(v?(T(t,1,s),void 0===i?i=g.rounding:T(i,0,8)):(t=g.precision,i=g.rounding),e.isFinite()){for(c=(m=I(e)).indexOf("."),v?(a=2,16==r?t=4*t-3:8==r&&(t=3*t-2)):a=r,c>=0&&(m=m.replace(".",""),(d=new g(1)).e=m.length-c,d.d=z(I(d),10,a),d.e=d.d.length),o=l=(h=z(m,10,a)).length;0==h[--l];)h.pop();if(h[0]){if(c<0?o--:((e=new g(e)).d=h,e.e=o,h=(e=B(e,d,t,i,0,a)).d,o=e.e,p=n),c=h[t],f=a/2,p=p||void 0!==h[t+1],p=i<4?(void 0!==c||p)&&(0===i||i===(e.s<0?3:2)):c>f||c===f&&(4===i||p||6===i&&1&h[t-1]||i===(e.s<0?8:7)),h.length=t,p)for(;++h[--t]>a-1;)h[t]=0,t||(++o,h.unshift(1));for(l=h.length;!h[l-1];--l);for(c=0,m="";c<l;c++)m+=u.charAt(h[c]);if(v){if(l>1)if(16==r||8==r){for(c=16==r?4:3,--l;l%c;l++)m+="0";for(l=(h=z(m,a,r)).length;!h[l-1];--l);for(c=1,m="1.";c<l;c++)m+=u.charAt(h[c])}else m=m.charAt(0)+"."+m.slice(1);m=m+(o<0?"p":"p+")+o}else if(o<0){for(;++o;)m="0"+m;m="0."+m}else if(++o>l)for(o-=l;o--;)m+="0";else o<l&&(m=m.slice(0,o)+"."+m.slice(o))}else m=v?"0p+0":"0";m=(16==r?"0x":2==r?"0b":8==r?"0o":"")+m}else m=G(e);return e.s<0?"-"+m:m}function X(e,r){if(e.length>r)return e.length=r,!0}function Q(e){return new this(e).abs()}function K(e){return new this(e).acos()}function ee(e){return new this(e).acosh()}function re(e,r){return new this(e).plus(r)}function te(e){return new this(e).asin()}function ne(e){return new this(e).asinh()}function ie(e){return new this(e).atan()}function ae(e){return new this(e).atanh()}function oe(e,r){e=new this(e),r=new this(r);var t,n=this.precision,i=this.rounding,a=n+4;return e.s&&r.s?e.d||r.d?!r.d||e.isZero()?(t=r.s<0?k(this,n,i):new this(0)).s=e.s:!e.d||r.isZero()?(t=k(this,a,1).times(.5)).s=e.s:r.s<0?(this.precision=a,this.rounding=1,t=this.atan(B(e,r,a,1)),r=k(this,a,1),this.precision=n,this.rounding=i,t=e.s<0?t.minus(r):t.plus(r)):t=this.atan(B(e,r,a,1)):(t=k(this,a,1).times(r.s>0?.25:.75)).s=e.s:t=new this(NaN),t}function se(e){return new this(e).cbrt()}function ue(e){return P(e=new this(e),e.e+1,2)}function ce(e){if(!e||"object"!=typeof e)throw Error(m+"Object expected");var r,t,n,i=!0===e.defaults,a=["precision",1,s,"rounding",0,8,"toExpNeg",-o,0,"toExpPos",0,o,"maxE",0,o,"minE",-o,0,"modulo",0,9];for(r=0;r<a.length;r+=3)if(t=a[r],i&&(this[t]=l[t]),void 0!==(n=e[t])){if(!(v(n)===n&&n>=a[r+1]&&n<=a[r+2]))throw Error(h+t+": "+n);this[t]=n}if(t="crypto",i&&(this[t]=l[t]),void 0!==(n=e[t])){if(!0!==n&&!1!==n&&0!==n&&1!==n)throw Error(h+t+": "+n);if(n){if("undefined"==typeof crypto||!crypto||!crypto.getRandomValues&&!crypto.randomBytes)throw Error(g);this[t]=!0}else this[t]=!1}return this}function fe(e){return new this(e).cos()}function le(e){return new this(e).cosh()}function pe(e,r){return new this(e).div(r)}function me(e){return new this(e).exp()}function he(e){return P(e=new this(e),e.e+1,3)}function de(){var e,r,t=new this(0);for(p=!1,e=0;e<arguments.length;)if((r=new this(arguments[e++])).d)t.d&&(t=t.plus(r.times(r)));else{if(r.s)return p=!0,new this(1/0);t=r}return p=!0,t.sqrt()}function ge(e){return e instanceof t||e&&"[object Decimal]"===e.name||!1}function ve(e){return new this(e).ln()}function ye(e,r){return new this(e).log(r)}function xe(e){return new this(e).log(2)}function we(e){return new this(e).log(10)}function be(){return j(this,arguments,"lt")}function Ne(){return j(this,arguments,"gt")}function Me(e,r){return new this(e).mod(r)}function Ee(e,r){return new this(e).mul(r)}function Ae(e,r){return new this(e).pow(r)}function Oe(e){var r,t,n,i,a=0,o=new this(1),u=[];if(void 0===e?e=this.precision:T(e,1,s),n=Math.ceil(e/E),this.crypto)if(crypto.getRandomValues)for(r=crypto.getRandomValues(new Uint32Array(n));a<n;)(i=r[a])>=429e7?r[a]=crypto.getRandomValues(new Uint32Array(1))[0]:u[a++]=i%1e7;else{if(!crypto.randomBytes)throw Error(g);for(r=crypto.randomBytes(n*=4);a<n;)(i=r[a]+(r[a+1]<<8)+(r[a+2]<<16)+((127&r[a+3])<<24))>=214e7?crypto.randomBytes(4).copy(r,a):(u.push(i%1e7),a+=4);a=n/4}else for(;a<n;)u[a++]=1e7*Math.random()|0;for(n=u[--a],e%=E,n&&e&&(i=y(10,E-e),u[a]=(n/i|0)*i);0===u[a];a--)u.pop();if(a<0)t=0,u=[0];else{for(t=-1;0===u[0];t-=E)u.shift();for(n=1,i=u[0];i>=10;i/=10)n++;n<E&&(t-=E-n)}return o.e=t,o.d=u,o}function Se(e){return P(e=new this(e),e.e+1,this.rounding)}function _e(e){return(e=new this(e)).d?e.d[0]?e.s:0*e.s:e.s||NaN}function Te(e){return new this(e).sin()}function Ce(e){return new this(e).sinh()}function ze(e){return new this(e).sqrt()}function Be(e,r){return new this(e).sub(r)}function Pe(e){return new this(e).tan()}function Ie(e){return new this(e).tanh()}function Re(e){return P(e=new this(e),e.e+1,1)}(t=function e(r){var t,n,i;function a(e){var r,t,n,i=this;if(!(i instanceof a))return new a(e);if(i.constructor=a,e instanceof a)return i.s=e.s,i.e=e.e,void(i.d=(e=e.d)?e.slice():e);if("number"==(n=typeof e)){if(0===e)return i.s=1/e<0?-1:1,i.e=0,void(i.d=[0]);if(e<0?(e=-e,i.s=-1):i.s=1,e===~~e&&e<1e7){for(r=0,t=e;t>=10;t/=10)r++;return i.e=r,void(i.d=[e])}return 0*e!=0?(e||(i.s=NaN),i.e=NaN,void(i.d=null)):V(i,e.toString())}if("string"!==n)throw Error(h+e);return 45===e.charCodeAt(0)?(e=e.slice(1),i.s=-1):i.s=1,N.test(e)?V(i,e):Z(i,e)}if(a.prototype=S,a.ROUND_UP=0,a.ROUND_DOWN=1,a.ROUND_CEIL=2,a.ROUND_FLOOR=3,a.ROUND_HALF_UP=4,a.ROUND_HALF_DOWN=5,a.ROUND_HALF_EVEN=6,a.ROUND_HALF_CEIL=7,a.ROUND_HALF_FLOOR=8,a.EUCLID=9,a.config=a.set=ce,a.clone=e,a.isDecimal=ge,a.abs=Q,a.acos=K,a.acosh=ee,a.add=re,a.asin=te,a.asinh=ne,a.atan=ie,a.atanh=ae,a.atan2=oe,a.cbrt=se,a.ceil=ue,a.cos=fe,a.cosh=le,a.div=pe,a.exp=me,a.floor=he,a.hypot=de,a.ln=ve,a.log=ye,a.log10=we,a.log2=xe,a.max=be,a.min=Ne,a.mod=Me,a.mul=Ee,a.pow=Ae,a.random=Oe,a.round=Se,a.sign=_e,a.sin=Te,a.sinh=Ce,a.sqrt=ze,a.sub=Be,a.tan=Pe,a.tanh=Ie,a.trunc=Re,void 0===r&&(r={}),r&&!0!==r.defaults)for(i=["precision","rounding","toExpNeg","toExpPos","maxE","minE","modulo","crypto"],t=0;t<i.length;)r.hasOwnProperty(n=i[t++])||(r[n]=this[n]);return a.config(r),a}(l)).default=t.Decimal=t,c=new t(c),f=new t(f),r.exports?r.exports=t:(e||(e="undefined"!=typeof self&&self&&self.self==self?self:Function("return this")()),i=e.Decimal,t.noConflict=function(){return e.Decimal=i,t},e.Decimal=t)}(e)});var A=function e(r,t,n){return r&&"function"==typeof r.map?r.map(function(r){return e(r,t,n)}):t(r)};var O=[{name:"BigNumber",path:"type",factory:function(e,r,t,n,i){var a=E.clone({precision:r.precision});return a.prototype.type="BigNumber",a.prototype.isBigNumber=!0,a.prototype.toJSON=function(){return{mathjs:"BigNumber",value:this.toString()}},a.fromJSON=function(e){return new a(e.value)},i.on("config",function(e,r){e.precision!==r.precision&&a.config({precision:e.precision})}),a},math:!0},{name:"bignumber",factory:function(e,r,t,n){var i=n("bignumber",{"":function(){return new e.BigNumber(0)},number:function(r){return new e.BigNumber(r+"")},string:function(r){return new e.BigNumber(r)},BigNumber:function(e){return e},Fraction:function(r){return new e.BigNumber(r.n).div(r.d)},null:function(r){return new e.BigNumber(0)},"Array | Matrix":function(e){return A(e,i)}});return i.toTex={0:"0",1:"\\left(${args[0]}\\right)"},i}}];var S={name:"boolean",factory:function(e,r,t,n){var i=n("bool",{"":function(){return!1},boolean:function(e){return e},number:function(e){return!!e},null:function(e){return!1},BigNumber:function(e){return!e.isZero()},string:function(e){var r=e.toLowerCase();if("true"===r)return!0;if("false"===r)return!1;var t=Number(e);if(""!=e&&!isNaN(t))return!!t;throw new Error('Cannot convert "'+e+'" to a boolean')},"Array | Matrix":function(e){return A(e,i)}});return i}},_=r(function(e,r){r.format=function(e,t){if("function"==typeof t)return t(e);if(!e.isFinite())return e.isNaN()?"NaN":e.gt(0)?"Infinity":"-Infinity";var n="auto",i=void 0;switch(void 0!==t&&(t.notation&&(n=t.notation),"number"==typeof t?i=t:t.precision&&(i=t.precision)),n){case"fixed":return r.toFixed(e,i);case"exponential":return r.toExponential(e,i);case"auto":if(t&&t.exponential&&(void 0!==t.exponential.lower||void 0!==t.exponential.upper)){var a=Object.assign({},t);return a.exponential=void 0,void 0!==t.exponential.lower&&(a.lowerExp=Math.round(Math.log(t.exponential.lower)/Math.LN10)),void 0!==t.exponential.upper&&(a.upperExp=Math.round(Math.log(t.exponential.upper)/Math.LN10)),console.warn("Deprecation warning: Formatting options exponential.lower and exponential.upper (minimum and maximum value) are replaced with exponential.lowerExp and exponential.upperExp (minimum and maximum exponent) since version 4.0.0. Replace "+JSON.stringify(t)+" with "+JSON.stringify(a)),r.format(e,a)}var o=t&&void 0!==t.lowerExp?t.lowerExp:-3,s=t&&void 0!==t.upperExp?t.upperExp:5;if(e.isZero())return"0";var u=e.logarithm();return(u.gte(o)&&u.lt(s)?e.toSignificantDigits(i).toFixed():r.toExponential(e,i)).replace(/((\.\d*?)(0+))($|e)/,function(){var e=arguments[2],r=arguments[4];return"."!==e?e+r:r});default:throw new Error('Unknown notation "'+n+'". Choose "auto", "exponential", or "fixed".')}},r.toExponential=function(e,r){return void 0!==r?e.toExponential(r-1):e.toExponential()},r.toFixed=function(e,r){return e.toFixed(r)}}),T=(_.format,_.toExponential,_.toFixed,r(function(e,r){var n=o.format,i=_.format;r.isString=function(e){return"string"==typeof e},r.endsWith=function(e,r){var t=e.length-r.length,n=e.length;return e.substring(t,n)===r},r.format=function(e,a){if("number"==typeof e)return n(e,a);if(t(e))return i(e,a);if(function(e){return e&&"object"==typeof e&&"number"==typeof e.s&&"number"==typeof e.n&&"number"==typeof e.d||!1}(e))return a&&"decimal"===a.fraction?e.toString():e.s*e.n+"/"+e.d;if(Array.isArray(e))return function e(t,n){if(Array.isArray(t)){for(var i="[",a=t.length,o=0;o<a;o++)0!=o&&(i+=", "),i+=e(t[o],n);return i+="]"}return r.format(t,n)}(e,a);if(r.isString(e))return'"'+e+'"';if("function"==typeof e)return e.syntax?String(e.syntax):"function";if(e&&"object"==typeof e){if("function"==typeof e.format)return e.format(a);if(e&&e.toString()!=={}.toString())return e.toString();var o=[];for(var s in e)e.hasOwnProperty(s)&&o.push('"'+s+'": '+r.format(e[s],a));return"{"+o.join(", ")+"}"}return String(e)},r.stringify=function(e){for(var r=String(e),t="",n=0;n<r.length;){var i=r.charAt(n);"\\"===i?(t+=i,n++,""!==(i=r.charAt(n))&&-1!=='"\\/bfnrtu'.indexOf(i)||(t+="\\"),t+=i):t+='"'===i?'\\"':i,n++}return'"'+t+'"'},r.escape=function(e){var r=String(e);return r=r.replace(/&/g,"&amp;").replace(/"/g,"&quot;").replace(/'/g,"&#39;").replace(/</g,"&lt;").replace(/>/g,"&gt;")}})),C=(T.isString,T.endsWith,T.format,T.stringify,T.escape,T.format),z=i.lazy;var B=[{name:"Chain",path:"type",factory:function(e,r,t,n,i){function a(r){if(!(this instanceof a))throw new SyntaxError("Constructor must be called with the new operator");e.isChain(r)?this.value=r.value:this.value=r}function o(e,r){"function"==typeof r&&(a.prototype[e]=s(r))}function s(e){return function(){for(var r=[this.value],t=0;t<arguments.length;t++)r[t+1]=arguments[t];return new a(e.apply(e,r))}}return a.prototype.type="Chain",a.prototype.isChain=!0,a.prototype.done=function(){return this.value},a.prototype.valueOf=function(){return this.value},a.prototype.toString=function(){return C(this.value)},a.prototype.toJSON=function(){return{mathjs:"Chain",value:this.value}},a.fromJSON=function(e){return new a(e.value)},a.createProxy=function(e,r){if("string"==typeof e)o(e,r);else for(var t in e)e.hasOwnProperty(t)&&o(t,e[t])},a.createProxy(i),i.on("import",function(e,r,t){void 0===t&&function(e,r){z(a.prototype,e,function(){var e=r();if("function"==typeof e)return s(e)})}(e,r)}),a},math:!0,lazy:!1},{name:"chain",factory:function(e,r,t,n){return n("chain",{"":function(){return new e.Chain},any:function(r){return new e.Chain(r)}})}}],P=r(function(e,r){!function(r){var t={re:0,im:0},n=function(e){return.5*(Math.exp(e)+Math.exp(-e))},i=function(e){return.5*(Math.exp(e)-Math.exp(-e))},a=function(){throw SyntaxError("Invalid Param")};function o(e,r){var t=Math.abs(e),n=Math.abs(r);return 0===e?Math.log(n):0===r?Math.log(t):t<3e3&&n<3e3?.5*Math.log(e*e+r*r):Math.log(e/Math.cos(Math.atan2(r,e)))}var s=function(e,r){if(void 0===e||null===e)t.re=t.im=0;else if(void 0!==r)t.re=e,t.im=r;else switch(typeof e){case"object":"im"in e&&"re"in e?(t.re=e.re,t.im=e.im):"abs"in e&&"arg"in e?(t.re=e.abs*Math.cos(e.arg),t.im=e.abs*Math.sin(e.arg)):"r"in e&&"phi"in e?(t.re=e.r*Math.cos(e.phi),t.im=e.r*Math.sin(e.phi)):2===e.length?(t.re=e[0],t.im=e[1]):a();break;case"string":t.im=t.re=0;var n=e.match(/\d+\.?\d*e[+-]?\d+|\d+\.?\d*|\.\d+|./g),i=1,o=0;null===n&&a();for(var s=0;s<n.length;s++){var u=n[s];" "===u||"\t"===u||"\n"===u||("+"===u?i++:"-"===u?o++:"i"===u||"I"===u?(i+o===0&&a()," "===n[s+1]||isNaN(n[s+1])?t.im+=parseFloat((o%2?"-":"")+"1"):(t.im+=parseFloat((o%2?"-":"")+n[s+1]),s++),i=o=0):((i+o===0||isNaN(u))&&a(),"i"===n[s+1]||"I"===n[s+1]?(t.im+=parseFloat((o%2?"-":"")+u),s++):t.re+=parseFloat((o%2?"-":"")+u),i=o=0))}i+o>0&&a();break;case"number":t.im=0,t.re=e;break;default:a()}};function u(e,r){if(!(this instanceof u))return new u(e,r);s(e,r),this.re=t.re,this.im=t.im}u.prototype={re:0,im:0,sign:function(){var e=this.abs();return new u(this.re/e,this.im/e)},add:function(e,r){return s(e,r),new u(this.re+t.re,this.im+t.im)},sub:function(e,r){return s(e,r),new u(this.re-t.re,this.im-t.im)},mul:function(e,r){return s(e,r),0===t.im&&0===this.im?new u(this.re*t.re,0):new u(this.re*t.re-this.im*t.im,this.re*t.im+this.im*t.re)},div:function(e,r){s(e,r),e=this.re,r=this.im;var n,i,a=t.re,o=t.im;return 0===o?0===a?new u(0!==e?e/0:0,0!==r?r/0:0):new u(e/a,r/a):Math.abs(a)<Math.abs(o)?new u((e*(i=a/o)+r)/(n=a*i+o),(r*i-e)/n):new u((e+r*(i=o/a))/(n=o*i+a),(r-e*i)/n)},pow:function(e,r){if(s(e,r),e=this.re,r=this.im,0===e&&0===r)return u.ZERO;if(0===t.im){if(0===r&&e>=0)return new u(Math.pow(e,t.re),0);if(0===e)switch((t.re%4+4)%4){case 0:return new u(Math.pow(r,t.re),0);case 1:return new u(0,Math.pow(r,t.re));case 2:return new u(-Math.pow(r,t.re),0);case 3:return new u(0,-Math.pow(r,t.re))}}var n=Math.atan2(r,e),i=o(e,r);return e=Math.exp(t.re*i-t.im*n),r=t.im*i+t.re*n,new u(e*Math.cos(r),e*Math.sin(r))},sqrt:function(){var e,r,t=this.re,n=this.im,i=this.abs();if(t>=0){if(0===n)return new u(Math.sqrt(t),0);e=.5*Math.sqrt(2*(i+t))}else e=Math.abs(n)/Math.sqrt(2*(i-t));return r=t<=0?.5*Math.sqrt(2*(i-t)):Math.abs(n)/Math.sqrt(2*(i+t)),new u(e,n<0?-r:r)},exp:function(){var e=Math.exp(this.re);return this.im,new u(e*Math.cos(this.im),e*Math.sin(this.im))},log:function(){var e=this.re,r=this.im;return new u(o(e,r),Math.atan2(r,e))},abs:function(){return e=this.re,r=this.im,t=Math.abs(e),n=Math.abs(r),t<3e3&&n<3e3?Math.sqrt(t*t+n*n):(t<n?(t=n,n=e/r):n=r/e,t*Math.sqrt(1+n*n));var e,r,t,n},arg:function(){return Math.atan2(this.im,this.re)},sin:function(){var e=this.re,r=this.im;return new u(Math.sin(e)*n(r),Math.cos(e)*i(r))},cos:function(){var e=this.re,r=this.im;return new u(Math.cos(e)*n(r),-Math.sin(e)*i(r))},tan:function(){var e=2*this.re,r=2*this.im,t=Math.cos(e)+n(r);return new u(Math.sin(e)/t,i(r)/t)},cot:function(){var e=2*this.re,r=2*this.im,t=Math.cos(e)-n(r);return new u(-Math.sin(e)/t,i(r)/t)},sec:function(){var e=this.re,r=this.im,t=.5*n(2*r)+.5*Math.cos(2*e);return new u(Math.cos(e)*n(r)/t,Math.sin(e)*i(r)/t)},csc:function(){var e=this.re,r=this.im,t=.5*n(2*r)-.5*Math.cos(2*e);return new u(Math.sin(e)*n(r)/t,-Math.cos(e)*i(r)/t)},asin:function(){var e=this.re,r=this.im,t=new u(r*r-e*e+1,-2*e*r).sqrt(),n=new u(t.re-r,t.im+e).log();return new u(n.im,-n.re)},acos:function(){var e=this.re,r=this.im,t=new u(r*r-e*e+1,-2*e*r).sqrt(),n=new u(t.re-r,t.im+e).log();return new u(Math.PI/2-n.im,n.re)},atan:function(){var e=this.re,r=this.im;if(0===e){if(1===r)return new u(0,1/0);if(-1===r)return new u(0,-1/0)}var t=e*e+(1-r)*(1-r),n=new u((1-r*r-e*e)/t,-2*e/t).log();return new u(-.5*n.im,.5*n.re)},acot:function(){var e=this.re,r=this.im;if(0===r)return new u(Math.atan2(1,e),0);var t=e*e+r*r;return 0!==t?new u(e/t,-r/t).atan():new u(0!==e?e/0:0,0!==r?-r/0:0).atan()},asec:function(){var e=this.re,r=this.im;if(0===e&&0===r)return new u(0,1/0);var t=e*e+r*r;return 0!==t?new u(e/t,-r/t).acos():new u(0!==e?e/0:0,0!==r?-r/0:0).acos()},acsc:function(){var e=this.re,r=this.im;if(0===e&&0===r)return new u(Math.PI/2,1/0);var t=e*e+r*r;return 0!==t?new u(e/t,-r/t).asin():new u(0!==e?e/0:0,0!==r?-r/0:0).asin()},sinh:function(){var e=this.re,r=this.im;return new u(i(e)*Math.cos(r),n(e)*Math.sin(r))},cosh:function(){var e=this.re,r=this.im;return new u(n(e)*Math.cos(r),i(e)*Math.sin(r))},tanh:function(){var e=2*this.re,r=2*this.im,t=n(e)+Math.cos(r);return new u(i(e)/t,Math.sin(r)/t)},coth:function(){var e=2*this.re,r=2*this.im,t=n(e)-Math.cos(r);return new u(i(e)/t,-Math.sin(r)/t)},csch:function(){var e=this.re,r=this.im,t=Math.cos(2*r)-n(2*e);return new u(-2*i(e)*Math.cos(r)/t,2*n(e)*Math.sin(r)/t)},sech:function(){var e=this.re,r=this.im,t=Math.cos(2*r)+n(2*e);return new u(2*n(e)*Math.cos(r)/t,-2*i(e)*Math.sin(r)/t)},asinh:function(){var e=this.im;this.im=-this.re,this.re=e;var r=this.asin();return this.re=-this.im,this.im=e,e=r.re,r.re=-r.im,r.im=e,r},acosh:function(){var e,r=this.acos();return r.im<=0?(e=r.re,r.re=-r.im,r.im=e):(e=r.im,r.im=-r.re,r.re=e),r},atanh:function(){var e=this.re,r=this.im,t=e>1&&0===r,n=1-e,i=1+e,a=n*n+r*r,s=0!==a?new u((i*n-r*r)/a,(r*n+i*r)/a):new u(-1!==e?e/0:0,0!==r?r/0:0),c=s.re;return s.re=o(s.re,s.im)/2,s.im=Math.atan2(s.im,c)/2,t&&(s.im=-s.im),s},acoth:function(){var e=this.re,r=this.im;if(0===e&&0===r)return new u(0,Math.PI/2);var t=e*e+r*r;return 0!==t?new u(e/t,-r/t).atanh():new u(0!==e?e/0:0,0!==r?-r/0:0).atanh()},acsch:function(){var e=this.re,r=this.im;if(0===r)return new u(0!==e?Math.log(e+Math.sqrt(e*e+1)):1/0,0);var t=e*e+r*r;return 0!==t?new u(e/t,-r/t).asinh():new u(0!==e?e/0:0,0!==r?-r/0:0).asinh()},asech:function(){var e=this.re,r=this.im;if(0===e&&0===r)return new u(1/0,0);var t=e*e+r*r;return 0!==t?new u(e/t,-r/t).acosh():new u(0!==e?e/0:0,0!==r?-r/0:0).acosh()},inverse:function(){var e=this.re,r=this.im,t=e*e+r*r;return new u(0!==e?e/t:0,0!==r?-r/t:0)},conjugate:function(){return new u(this.re,-this.im)},neg:function(){return new u(-this.re,-this.im)},ceil:function(e){return e=Math.pow(10,e||0),new u(Math.ceil(this.re*e)/e,Math.ceil(this.im*e)/e)},floor:function(e){return e=Math.pow(10,e||0),new u(Math.floor(this.re*e)/e,Math.floor(this.im*e)/e)},round:function(e){return e=Math.pow(10,e||0),new u(Math.round(this.re*e)/e,Math.round(this.im*e)/e)},equals:function(e,r){return s(e,r),Math.abs(t.re-this.re)<=u.EPSILON&&Math.abs(t.im-this.im)<=u.EPSILON},clone:function(){return new u(this.re,this.im)},toString:function(){var e=this.re,r=this.im,t="";return isNaN(e)||isNaN(r)?"NaN":(0!==e&&(t+=e),0!==r&&(0!==e?t+=r<0?" - ":" + ":r<0&&(t+="-"),1!==(r=Math.abs(r))&&(t+=r),t+="i"),t||"0")},toVector:function(){return[this.re,this.im]},valueOf:function(){return 0===this.im?this.re:null},isNaN:function(){return isNaN(this.re)||isNaN(this.im)},isFinite:function(){return isFinite(this.re)&&isFinite(this.im)}},u.ZERO=new u(0,0),u.ONE=new u(1,0),u.I=new u(0,1),u.PI=new u(Math.PI,0),u.E=new u(Math.E,0),u.EPSILON=1e-16,e.exports=u}()}),I=o.format,R=o.isNumber;var U={name:"Complex",path:"type",factory:function(e,r,t,n,i){return P.prototype.type="Complex",P.prototype.isComplex=!0,P.prototype.toJSON=function(){return{mathjs:"Complex",re:this.re,im:this.im}},P.prototype.toPolar=function(){return{r:this.abs(),phi:this.arg()}},P.prototype.format=function(e){var r=this.im,t=this.re,n=I(this.re,e),i=I(this.im,e),a=R(e)?e:e?e.precision:null;if(null!==a){var o=Math.pow(10,-a);Math.abs(t/r)<o&&(t=0),Math.abs(r/t)<o&&(r=0)}return 0==r?n:0==t?1==r?"i":-1==r?"-i":i+"i":r<0?-1==r?n+" - i":n+" - "+i.substring(1)+"i":1==r?n+" + i":n+" + "+i+"i"},P.fromPolar=function(r){switch(arguments.length){case 1:var t=arguments[0];if("object"==typeof t)return P(t);throw new TypeError("Input has to be an object with r and phi keys.");case 2:var n=arguments[0],i=arguments[1];if(R(n)){if(e.isUnit(i)&&i.hasBase("ANGLE")&&(i=i.toNumber("rad")),R(i))return new P({r:n,phi:i});throw new TypeError("Phi is not a number nor an angle unit.")}throw new TypeError("Radius r is not a number.");default:throw new SyntaxError("Wrong number of arguments in function fromPolar")}},P.prototype.valueOf=P.prototype.toString,P.fromJSON=function(e){return new P(e)},P.EPSILON=r.epsilon,i.on("config",function(e,r){e.epsilon!==r.epsilon&&(P.EPSILON=e.epsilon)}),P.compare=function(e,r){return e.re>r.re?1:e.re<r.re?-1:e.im>r.im?1:e.im<r.im?-1:0},P},math:!0},k={"{":"\\{","}":"\\}","\\":"\\textbackslash{}","#":"\\#",$:"\\$","%":"\\%","&":"\\&","^":"\\textasciicircum{}",_:"\\_","~":"\\textasciitilde{}"},D={"–":"\\--","—":"\\---"," ":"~","\t":"\\qquad{}","\r\n":"\\\\newline{}","\n":"\\\\newline{}"},q=function(e,r){return Object.assign({},e,r)},L=r(function(e,r){r.symbols={Alpha:"A",alpha:"\\alpha",Beta:"B",beta:"\\beta",Gamma:"\\Gamma",gamma:"\\gamma",Delta:"\\Delta",delta:"\\delta",Epsilon:"E",epsilon:"\\epsilon",varepsilon:"\\varepsilon",Zeta:"Z",zeta:"\\zeta",Eta:"H",eta:"\\eta",Theta:"\\Theta",theta:"\\theta",vartheta:"\\vartheta",Iota:"I",iota:"\\iota",Kappa:"K",kappa:"\\kappa",varkappa:"\\varkappa",Lambda:"\\Lambda",lambda:"\\lambda",Mu:"M",mu:"\\mu",Nu:"N",nu:"\\nu",Xi:"\\Xi",xi:"\\xi",Omicron:"O",omicron:"o",Pi:"\\Pi",pi:"\\pi",varpi:"\\varpi",Rho:"P",rho:"\\rho",varrho:"\\varrho",Sigma:"\\Sigma",sigma:"\\sigma",varsigma:"\\varsigma",Tau:"T",tau:"\\tau",Upsilon:"\\Upsilon",upsilon:"\\upsilon",Phi:"\\Phi",phi:"\\phi",varphi:"\\varphi",Chi:"X",chi:"\\chi",Psi:"\\Psi",psi:"\\psi",Omega:"\\Omega",omega:"\\omega",true:"\\mathrm{True}",false:"\\mathrm{False}",i:"i",inf:"\\infty",Inf:"\\infty",infinity:"\\infty",Infinity:"\\infty",oo:"\\infty",lim:"\\lim",undefined:"\\mathbf{?}"},r.operators={transpose:"^\\top",factorial:"!",pow:"^",dotPow:".^\\wedge",unaryPlus:"+",unaryMinus:"-",bitNot:"~",not:"\\neg",multiply:"\\cdot",divide:"\\frac",dotMultiply:".\\cdot",dotDivide:".:",mod:"\\mod",add:"+",subtract:"-",to:"\\rightarrow",leftShift:"<<",rightArithShift:">>",rightLogShift:">>>",equal:"=",unequal:"\\neq",smaller:"<",larger:">",smallerEq:"\\leq",largerEq:"\\geq",bitAnd:"\\&",bitXor:"\\underline{|}",bitOr:"|",and:"\\wedge",xor:"\\veebar",or:"\\vee"},r.defaultTemplate="\\mathrm{${name}}\\left(${args}\\right)";var t={deg:"^\\circ"};r.escape=function(e){return function(e){for(var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},t=r.preserveFormatting,n=void 0!==t&&t,i=r.escapeMapFn,a=void 0===i?q:i,o=String(e),s="",u=a(Object.assign({},k),n?Object.assign({},D):{}),c=Object.keys(u),f=function(){var e=!1;c.forEach(function(r,t){e||o.startsWith(r)&&(s+=u[c[t]],o=o.slice(r.length,o.length),e=!0)}),e||(s+=o.slice(0,1),o=o.slice(1,o.length))};o;)f();return s}(e,{preserveFormatting:!0})},r.toSymbol=function(e,n){return(n=void 0!==n&&n)?t.hasOwnProperty(e)?t[e]:"\\mathrm{"+r.escape(e)+"}":r.symbols.hasOwnProperty(e)?r.symbols[e]:r.escape(e)}});L.symbols,L.operators,L.defaultTemplate,L.escape,L.toSymbol;var F=[U,{name:"complex",factory:function(e,r,t,n){var i=L,a=n("complex",{"":function(){return e.Complex.ZERO},number:function(r){return new e.Complex(r,0)},"number, number":function(r,t){return new e.Complex(r,t)},"BigNumber, BigNumber":function(r,t){return new e.Complex(r.toNumber(),t.toNumber())},Complex:function(e){return e.clone()},string:function(r){return e.Complex(r)},null:function(r){return e.Complex(0)},Object:function(r){if("re"in r&&"im"in r)return new e.Complex(r.re,r.im);if("r"in r&&"phi"in r)return new e.Complex(r);throw new Error("Expected object with either properties re and im, or properties r and phi.")},"Array | Matrix":function(e){return A(e,a)}});return a.toTex={0:"0",1:"\\left(${args[0]}\\right)",2:"\\left(\\left(${args[0]}\\right)+"+i.symbols.i+"\\cdot\\left(${args[1]}\\right)\\right)"},a}}],j=r(function(e,r){!function(r){var t={s:1,n:0,d:1};function n(e){var r=function(){var r=Error.apply(this,arguments);r.name=this.name=e,this.stack=r.stack,this.message=r.message},t=function(){};return t.prototype=Error.prototype,r.prototype=new t,r}var i=f.DivisionByZero=n("DivisionByZero"),a=f.InvalidParameter=n("InvalidParameter");function o(e,r){return isNaN(e=parseInt(e,10))&&s(),e*r}function s(){throw new a}var u=function(e,r){var n,a=0,u=1,c=1,f=0,l=0,p=0,m=1,h=1,d=0,g=1,v=1,y=1,x=1e7;if(void 0===e||null===e);else if(void 0!==r)c=(a=e)*(u=r);else switch(typeof e){case"object":"d"in e&&"n"in e?(a=e.n,u=e.d,"s"in e&&(a*=e.s)):0 in e?(a=e[0],1 in e&&(u=e[1])):s(),c=a*u;break;case"number":if(e<0&&(c=e,e=-e),e%1==0)a=e;else if(e>0){for(e>=1&&(e/=h=Math.pow(10,Math.floor(1+Math.log(e)/Math.LN10)));g<=x&&y<=x;){if(e===(n=(d+v)/(g+y))){g+y<=x?(a=d+v,u=g+y):y>g?(a=v,u=y):(a=d,u=g);break}e>n?(d+=v,g+=y):(v+=d,y+=g),g>x?(a=v,u=y):(a=d,u=g)}a*=h}else(isNaN(e)||isNaN(r))&&(u=a=NaN);break;case"string":if(null===(g=e.match(/\d+|./g))&&s(),"-"===g[d]?(c=-1,d++):"+"===g[d]&&d++,g.length===d+1?l=o(g[d++],c):"."===g[d+1]||"."===g[d]?("."!==g[d]&&(f=o(g[d++],c)),(++d+1===g.length||"("===g[d+1]&&")"===g[d+3]||"'"===g[d+1]&&"'"===g[d+3])&&(l=o(g[d],c),m=Math.pow(10,g[d].length),d++),("("===g[d]&&")"===g[d+2]||"'"===g[d]&&"'"===g[d+2])&&(p=o(g[d+1],c),h=Math.pow(10,g[d+1].length)-1,d+=3)):"/"===g[d+1]||":"===g[d+1]?(l=o(g[d],c),m=o(g[d+2],1),d+=3):"/"===g[d+3]&&" "===g[d+1]&&(f=o(g[d],c),l=o(g[d+2],c),m=o(g[d+4],1),d+=5),g.length<=d){c=a=p+(u=m*h)*f+h*l;break}default:s()}if(0===u)throw new i;t.s=c<0?-1:1,t.n=Math.abs(a),t.d=Math.abs(u)},c=function(e,r){if(!e)return r;if(!r)return e;for(;;){if(!(e%=r))return r;if(!(r%=e))return e}};function f(e,r){if(!(this instanceof f))return new f(e,r);u(e,r),e=f.REDUCE?c(t.d,t.n):1,this.s=t.s,this.n=t.n/e,this.d=t.d/e}f.REDUCE=1,f.prototype={s:1,n:0,d:1,abs:function(){return new f(this.n,this.d)},neg:function(){return new f(-this.s*this.n,this.d)},add:function(e,r){return u(e,r),new f(this.s*this.n*t.d+t.s*this.d*t.n,this.d*t.d)},sub:function(e,r){return u(e,r),new f(this.s*this.n*t.d-t.s*this.d*t.n,this.d*t.d)},mul:function(e,r){return u(e,r),new f(this.s*t.s*this.n*t.n,this.d*t.d)},div:function(e,r){return u(e,r),new f(this.s*t.s*this.n*t.d,this.d*t.n)},clone:function(){return new f(this)},mod:function(e,r){return isNaN(this.n)||isNaN(this.d)?new f(NaN):void 0===e?new f(this.s*this.n%this.d,1):(u(e,r),0===t.n&&0===this.d&&f(0,0),new f(this.s*t.d*this.n%(t.n*this.d),t.d*this.d))},gcd:function(e,r){return u(e,r),new f(c(t.n,this.n),t.d*this.d/c(t.d,this.d))},lcm:function(e,r){return u(e,r),0===t.n&&0===this.n?new f:new f(t.n*this.n/c(t.n,this.n),c(t.d,this.d))},ceil:function(e){return e=Math.pow(10,e||0),isNaN(this.n)||isNaN(this.d)?new f(NaN):new f(Math.ceil(e*this.s*this.n/this.d),e)},floor:function(e){return e=Math.pow(10,e||0),isNaN(this.n)||isNaN(this.d)?new f(NaN):new f(Math.floor(e*this.s*this.n/this.d),e)},round:function(e){return e=Math.pow(10,e||0),isNaN(this.n)||isNaN(this.d)?new f(NaN):new f(Math.round(e*this.s*this.n/this.d),e)},inverse:function(){return new f(this.s*this.d,this.n)},pow:function(e){return e<0?new f(Math.pow(this.s*this.d,-e),Math.pow(this.n,-e)):new f(Math.pow(this.s*this.n,e),Math.pow(this.d,e))},equals:function(e,r){return u(e,r),this.s*this.n*t.d==t.s*t.n*this.d},compare:function(e,r){u(e,r);var n=this.s*this.n*t.d-t.s*t.n*this.d;return(0<n)-(n<0)},divisible:function(e,r){return u(e,r),!(!(t.n*this.d)||this.n*t.d%(t.n*this.d))},valueOf:function(){return this.s*this.n/this.d},toFraction:function(e){var r,t="",n=this.n,i=this.d;return this.s<0&&(t+="-"),1===i?t+=n:(e&&(r=Math.floor(n/i))>0&&(t+=r,t+=" ",n%=i),t+=n,t+="/",t+=i),t},toLatex:function(e){var r,t="",n=this.n,i=this.d;return this.s<0&&(t+="-"),1===i?t+=n:(e&&(r=Math.floor(n/i))>0&&(t+=r,n%=i),t+="\\frac{",t+=n,t+="}{",t+=i,t+="}"),t},toContinued:function(){var e,r=this.n,t=this.d,n=[];do{n.push(Math.floor(r/t)),e=r%t,r=t,t=e}while(1!==r);return n},toString:function(){var e,r=this.n,t=this.d;if(isNaN(r)||isNaN(t))return"NaN";f.REDUCE||(r/=e=c(r,t),t/=e);var n=function(e,r){for(;r%2==0;r/=2);for(;r%5==0;r/=5);if(1===r)return 0;for(var t=10%r,n=1;1!==t;n++)if(t=10*t%r,n>2e3)return 0;return n}(0,t),i=function(e,r,t){for(var n=1,i=function(e,r,t){for(var n=1;r>0;e=e*e%t,r>>=1)1&r&&(n=n*e%t);return n}(10,t,r),a=0;a<300;a++){if(n===i)return a;n=10*n%r,i=10*i%r}return 0}(0,t,n),a=-1===this.s?"-":"";if(a+=r/t|0,r%=t,(r*=10)&&(a+="."),n){for(var o=i;o--;)a+=r/t|0,r%=t,r*=10;a+="(";for(o=n;o--;)a+=r/t|0,r%=t,r*=10;a+=")"}else for(o=15;r&&o--;)a+=r/t|0,r%=t,r*=10;return a}},e.exports=f}()});j.prototype.type="Fraction",j.prototype.isFraction=!0,j.prototype.toJSON=function(){return{mathjs:"Fraction",n:this.s*this.n,d:this.d}},j.fromJSON=function(e){return new j(e)};var H={name:"fraction",factory:function(e,r,t,n){var i=n("fraction",{number:function(r){if(!isFinite(r)||isNaN(r))throw new Error(r+" cannot be represented as a fraction");return new e.Fraction(r)},string:function(r){return new e.Fraction(r)},"number, number":function(r,t){return new e.Fraction(r,t)},null:function(r){return new e.Fraction(0)},BigNumber:function(r){return new e.Fraction(r.toString())},Fraction:function(e){return e},Object:function(r){return new e.Fraction(r)},"Array | Matrix":function(e){return A(e,i)}});return i}},$=[{name:"Fraction",path:"type",factory:function(e,r,t,n){return j}},H];function G(e,r,t){if(!(this instanceof G))throw new SyntaxError("Constructor must be called with the new operator");this.actual=e,this.expected=r,this.relation=t,this.message="Dimension mismatch ("+(Array.isArray(e)?"["+e.join(", ")+"]":e)+" "+(this.relation||"!=")+" "+(Array.isArray(r)?"["+r.join(", ")+"]":r)+")",this.stack=(new Error).stack}G.prototype=new RangeError,G.prototype.constructor=RangeError,G.prototype.name="DimensionError",G.prototype.isDimensionError=!0;var V=G;function Z(e,r,t){if(!(this instanceof Z))throw new SyntaxError("Constructor must be called with the new operator");this.index=e,arguments.length<3?(this.min=0,this.max=r):(this.min=r,this.max=t),void 0!==this.min&&this.index<this.min?this.message="Index out of range ("+this.index+" < "+this.min+")":void 0!==this.max&&this.index>=this.max?this.message="Index out of range ("+this.index+" > "+(this.max-1)+")":this.message="Index out of range ("+this.index+")",this.stack=(new Error).stack}Z.prototype=new RangeError,Z.prototype.constructor=RangeError,Z.prototype.name="IndexError",Z.prototype.isIndexError=!0;var W=Z,J=r(function(e,r){r.size=function(e){for(var r=[];Array.isArray(e);)r.push(e.length),e=e[0];return r},r.validate=function(e,r){if(0==r.length){if(Array.isArray(e))throw new V(e.length,0)}else!function e(r,t,n){var i,a=r.length;if(a!=t[n])throw new V(a,t[n]);if(n<t.length-1){var o=n+1;for(i=0;i<a;i++){var s=r[i];if(!Array.isArray(s))throw new V(t.length-1,t.length,"<");e(r[i],t,o)}}else for(i=0;i<a;i++)if(Array.isArray(r[i]))throw new V(t.length+1,t.length,">")}(e,r,0)},r.validateIndex=function(e,r){if(!o.isNumber(e)||!o.isInteger(e))throw new TypeError("Index must be an integer (value: "+e+")");if(e<0||"number"==typeof r&&e>=r)throw new W(e,r)},r.resize=function(e,r,t){if(!Array.isArray(e)||!Array.isArray(r))throw new TypeError("Array expected");if(0===r.length)throw new Error("Resizing to scalar is not supported");return r.forEach(function(e){if(!o.isNumber(e)||!o.isInteger(e)||e<0)throw new TypeError("Invalid size, must contain positive integers (size: "+T.format(r)+")")}),function e(r,t,n,i){var a;var o;var s=r.length;var u=t[n];var c=Math.min(s,u);r.length=u;if(n<t.length-1){var f=n+1;for(a=0;a<c;a++)o=r[a],Array.isArray(o)||(o=[o],r[a]=o),e(o,t,f,i);for(a=c;a<u;a++)o=[],r[a]=o,e(o,t,f,i)}else{for(a=0;a<c;a++)for(;Array.isArray(r[a]);)r[a]=r[a][0];for(a=c;a<u;a++)r[a]=i}}(e,r,0,void 0!==t?t:0),e},r.reshape=function(e,t){var n,i=r.flatten(e),a=function(e){return e.reduce(function(e,r){return e*r})};if(!Array.isArray(e)||!Array.isArray(t))throw new TypeError("Array expected");if(0===t.length)throw new V(0,a(r.size(e)),"!=");try{n=function e(r,t){var n=[];var i;if(0===t.length){if(0===r.length)throw new V(null,null,"!=");return r.shift()}for(i=0;i<t[0];i+=1)n.push(e(r,t.slice(1)));return n}(i,t)}catch(n){if(n instanceof V)throw new V(a(t),a(r.size(e)),"!=");throw n}if(i.length>0)throw new V(a(t),a(r.size(e)),"!=");return n},r.squeeze=function(e,t){for(var n=t||r.size(e);Array.isArray(e)&&1===e.length;)e=e[0],n.shift();for(var i=n.length;1===n[i-1];)i--;return i<n.length&&(e=function e(r,t,n){var i,a;if(n<t){var o=n+1;for(i=0,a=r.length;i<a;i++)r[i]=e(r[i],t,o)}else for(;Array.isArray(r);)r=r[0];return r}(e,i,0),n.length=i),e},r.unsqueeze=function(e,t,n,i){var a=i||r.size(e);if(n)for(var o=0;o<n;o++)e=[e],a.unshift(1);for(e=function e(r,t,n){var i,a;if(Array.isArray(r)){var o=n+1;for(i=0,a=r.length;i<a;i++)r[i]=e(r[i],t,o)}else for(var s=n;s<t;s++)r=[r];return r}(e,t,0);a.length<t;)a.push(1);return e},r.flatten=function(e){if(!Array.isArray(e))return e;var r=[];return e.forEach(function e(t){Array.isArray(t)?t.forEach(e):r.push(t)}),r},r.map=function(e,r){return Array.prototype.map.call(e,r)},r.forEach=function(e,r){Array.prototype.forEach.call(e,r)},r.filter=function(e,t){if(1!==r.size(e).length)throw new Error("Only one dimensional matrices supported");return Array.prototype.filter.call(e,t)},r.filterRegExp=function(e,t){if(1!==r.size(e).length)throw new Error("Only one dimensional matrices supported");return Array.prototype.filter.call(e,function(e){return t.test(e)})},r.join=function(e,r){return Array.prototype.join.call(e,r)},r.identify=function(e){if(!Array.isArray(e))throw new TypeError("Array input expected");if(0===e.length)return e;var r=[],t=0;r[0]={value:e[0],identifier:0};for(var n=1;n<e.length;n++)e[n]===e[n-1]?t++:t=0,r.push({value:e[n],identifier:t});return r},r.generalize=function(e){if(!Array.isArray(e))throw new TypeError("Array input expected");if(0===e.length)return e;for(var r=[],t=0;t<e.length;t++)r.push(e[t].value);return r},r.isArray=Array.isArray}),Y=(J.size,J.validate,J.validateIndex,J.resize,J.reshape,J.squeeze,J.unsqueeze,J.flatten,J.map,J.forEach,J.filter,J.filterRegExp,J.join,J.identify,J.generalize,J.isArray,{isBoolean:function(e){return"boolean"==typeof e}}),X={memoize:function(e,r){return function t(){"object"!=typeof t.cache&&(t.cache={});for(var n=[],i=0;i<arguments.length;i++)n[i]=arguments[i];var a=r?r(n):JSON.stringify(n);return a in t.cache?t.cache[a]:t.cache[a]=e.apply(e,n)}},maxArgumentCount:function(e){return Object.keys(e.signatures||{}).reduce(function(e,r){var t=(r.match(/,/g)||[]).length+1;return Math.max(e,t)},-1)},callWithRightArgumentCount:function(e,r,t){return Object.keys(e.signatures||{}).reduce(function(e,r){var t=(r.match(/,/g)||[]).length+1;return Math.max(e,t)},-1)}},Q=r(function(e,r){r.array=J,r.boolean=Y,r.function=X,r.number=o,r.object=i,r.string=T,r.emitter=m}),K=(Q.array,Q.number,Q.object,Q.string,Q.emitter,Q.string.isString);var ee={name:"Matrix",path:"type",factory:function(e,r,t,n){function i(){if(!(this instanceof i))throw new SyntaxError("Constructor must be called with the new operator")}return i.prototype.type="Matrix",i.prototype.isMatrix=!0,i.storage=function(e){if(!K(e))throw new TypeError("format must be a string value");var r=i._storage[e];if(!r)throw new SyntaxError("Unsupported matrix storage format: "+e);return r},i._storage={},i.prototype.storage=function(){throw new Error("Cannot invoke storage on a Matrix interface")},i.prototype.datatype=function(){throw new Error("Cannot invoke datatype on a Matrix interface")},i.prototype.create=function(e,r){throw new Error("Cannot invoke create on a Matrix interface")},i.prototype.subset=function(e,r,t){throw new Error("Cannot invoke subset on a Matrix interface")},i.prototype.get=function(e){throw new Error("Cannot invoke get on a Matrix interface")},i.prototype.set=function(e,r,t){throw new Error("Cannot invoke set on a Matrix interface")},i.prototype.resize=function(e,r){throw new Error("Cannot invoke resize on a Matrix interface")},i.prototype.reshape=function(e,r){throw new Error("Cannot invoke reshape on a Matrix interface")},i.prototype.clone=function(){throw new Error("Cannot invoke clone on a Matrix interface")},i.prototype.size=function(){throw new Error("Cannot invoke size on a Matrix interface")},i.prototype.map=function(e,r){throw new Error("Cannot invoke map on a Matrix interface")},i.prototype.forEach=function(e){throw new Error("Cannot invoke forEach on a Matrix interface")},i.prototype.toArray=function(){throw new Error("Cannot invoke toArray on a Matrix interface")},i.prototype.valueOf=function(){throw new Error("Cannot invoke valueOf on a Matrix interface")},i.prototype.format=function(e){throw new Error("Cannot invoke format on a Matrix interface")},i.prototype.toString=function(){throw new Error("Cannot invoke toString on a Matrix interface")},i}},re=Q.string,te=Q.array,ne=Q.object,ie=Q.number,ae=Array.isArray,oe=ie.isNumber,se=ie.isInteger,ue=re.isString,ce=te.validateIndex;var fe={name:"DenseMatrix",path:"type",factory:function(e,r,t,n){var i=t(ee);function a(r,t){if(!(this instanceof a))throw new SyntaxError("Constructor must be called with the new operator");if(t&&!ue(t))throw new Error("Invalid datatype: "+t);if(e.isMatrix(r))"DenseMatrix"===r.type?(this._data=ne.clone(r._data),this._size=ne.clone(r._size),this._datatype=t||r._datatype):(this._data=r.toArray(),this._size=r.size(),this._datatype=t||r._datatype);else if(r&&ae(r.data)&&ae(r.size))this._data=r.data,this._size=r.size,this._datatype=t||r.datatype;else if(ae(r))this._data=function e(r){for(var t=0,n=r.length;t<n;t++){var i=r[t];ae(i)?r[t]=e(i):i&&!0===i.isMatrix&&(r[t]=e(i.valueOf()))}return r}(r),this._size=te.size(this._data),te.validate(this._data,this._size),this._datatype=t;else{if(r)throw new TypeError("Unsupported type of data ("+Q.types.type(r)+")");this._data=[],this._size=[0],this._datatype=t}}a.prototype=new i,a.prototype.type="DenseMatrix",a.prototype.isDenseMatrix=!0,a.prototype.storage=function(){return"dense"},a.prototype.datatype=function(){return this._datatype},a.prototype.create=function(e,r){return new a(e,r)},a.prototype.subset=function(r,t,n){switch(arguments.length){case 1:return function(r,t){if(!e.isIndex(t))throw new TypeError("Invalid index");if(t.isScalar())return r.get(t.min());var n=t.size();if(n.length!=r._size.length)throw new V(n.length,r._size.length);for(var i=t.min(),o=t.max(),s=0,u=r._size.length;s<u;s++)ce(i[s],r._size[s]),ce(o[s],r._size[s]);return new a(function e(r,t,n,i){var a=i===n-1,o=t.dimension(i);return a?o.map(function(e){return ce(e,r.length),r[e]}).valueOf():o.map(function(a){ce(a,r.length);var o=r[a];return e(o,t,n,i+1)}).valueOf()}(r._data,t,n.length,0),r._datatype)}(this,r);case 2:case 3:return function(r,t,n,i){if(!t||!0!==t.isIndex)throw new TypeError("Invalid index");var a,o=t.size(),u=t.isScalar();if(e.isMatrix(n)?(a=n.size(),n=n.valueOf()):a=te.size(n),u){if(0!==a.length)throw new TypeError("Scalar expected");r.set(t.min(),n,i)}else{if(o.length<r._size.length)throw new V(o.length,r._size.length,"<");if(a.length<o.length){for(var c=0,f=0;1===o[c]&&1===a[c];)c++;for(;1===o[c];)f++,c++;n=te.unsqueeze(n,o.length,f,a)}if(!ne.deepEqual(o,a))throw new V(o,a,">");var l=t.max().map(function(e){return e+1});s(r,l,i);var p=o.length;!function e(r,t,n,i,a){var o=a===i-1,s=t.dimension(a);o?s.forEach(function(e,t){ce(e),r[e]=n[t[0]]}):s.forEach(function(o,s){ce(o),e(r[o],t,n[s[0]],i,a+1)})}(r._data,t,n,p,0)}return r}(this,r,t,n);default:throw new SyntaxError("Wrong number of arguments")}},a.prototype.get=function(e){if(!ae(e))throw new TypeError("Array expected");if(e.length!=this._size.length)throw new V(e.length,this._size.length);for(var r=0;r<e.length;r++)ce(e[r],this._size[r]);for(var t=this._data,n=0,i=e.length;n<i;n++){var a=e[n];ce(a,t.length),t=t[a]}return t},a.prototype.set=function(e,r,t){if(!ae(e))throw new TypeError("Array expected");if(e.length<this._size.length)throw new V(e.length,this._size.length,"<");var n,i,a;s(this,e.map(function(e){return e+1}),t);var o=this._data;for(n=0,i=e.length-1;n<i;n++)a=e[n],ce(a,o.length),o=o[a];return a=e[e.length-1],ce(a,o.length),o[a]=r,this},a.prototype.resize=function(e,r,t){if(!ae(e))throw new TypeError("Array expected");var n=t?this.clone():this;return o(n,e,r)};var o=function(e,r,t){if(0===r.length){for(var n=e._data;ae(n);)n=n[0];return n}return e._size=r.slice(0),e._data=te.resize(e._data,e._size,t),e};function s(e,r,t){for(var n=e._size.slice(0),i=!1;n.length<r.length;)n.push(0),i=!0;for(var a=0,s=r.length;a<s;a++)r[a]>n[a]&&(n[a]=r[a],i=!0);i&&o(e,n,t)}return a.prototype.reshape=function(e,r){var t=r?this.clone():this;return t._data=te.reshape(t._data,e),t._size=e.slice(0),t},a.prototype.clone=function(){return new a({data:ne.clone(this._data),size:ne.clone(this._size),datatype:this._datatype})},a.prototype.size=function(){return this._size.slice(0)},a.prototype.map=function(e){var r=this,t=function(n,i){return ae(n)?n.map(function(e,r){return t(e,i.concat(r))}):e(n,i,r)};return new a({data:t(this._data,[]),size:ne.clone(this._size),datatype:this._datatype})},a.prototype.forEach=function(e){var r=this,t=function(n,i){ae(n)?n.forEach(function(e,r){t(e,i.concat(r))}):e(n,i,r)};t(this._data,[])},a.prototype.toArray=function(){return ne.clone(this._data)},a.prototype.valueOf=function(){return this._data},a.prototype.format=function(e){return re.format(this._data,e)},a.prototype.toString=function(){return re.format(this._data)},a.prototype.toJSON=function(){return{mathjs:"DenseMatrix",data:this._data,size:this._size,datatype:this._datatype}},a.prototype.diagonal=function(r){if(r){if(e.isBigNumber(r)&&(r=r.toNumber()),!oe(r)||!se(r))throw new TypeError("The parameter k must be an integer number")}else r=0;for(var t=r>0?r:0,n=r<0?-r:0,i=this._size[0],o=this._size[1],s=Math.min(i-n,o-t),u=[],c=0;c<s;c++)u[c]=this._data[c+n][c+t];return new a({data:u,size:[s],datatype:this._datatype})},a.diagonal=function(r,t,i,o,s){if(!ae(r))throw new TypeError("Array expected, size parameter");if(2!==r.length)throw new Error("Only two dimensions matrix are supported");if(r=r.map(function(r){if(e.isBigNumber(r)&&(r=r.toNumber()),!oe(r)||!se(r)||r<1)throw new Error("Size values must be positive integers");return r}),i){if(e.isBigNumber(i)&&(i=i.toNumber()),!oe(i)||!se(i))throw new TypeError("The parameter k must be an integer number")}else i=0;o&&ue(s)&&(o=n.convert(o,s));var u,c=i>0?i:0,f=i<0?-i:0,l=r[0],p=r[1],m=Math.min(l-f,p-c);if(ae(t)){if(t.length!==m)throw new Error("Invalid value array length");u=function(e){return t[e]}}else if(e.isMatrix(t)){var h=t.size();if(1!==h.length||h[0]!==m)throw new Error("Invalid matrix length");u=function(e){return t.get([e])}}else u=function(){return t};o||(o=e.isBigNumber(u(0))?new e.BigNumber(0):0);var d=[];if(r.length>0){d=te.resize(d,r,o);for(var g=0;g<m;g++)d[g+f][g+c]=u(g)}return new a({data:d,size:[l,p]})},a.fromJSON=function(e){return new a(e)},a.prototype.swapRows=function(e,r){if(!(oe(e)&&se(e)&&oe(r)&&se(r)))throw new Error("Row index must be positive integers");if(2!==this._size.length)throw new Error("Only two dimensional matrix is supported");return ce(e,this._size[0]),ce(r,this._size[0]),a._swapRows(e,r,this._data),this},a._swapRows=function(e,r,t){var n=t[e];t[e]=t[r],t[r]=n},e.Matrix._storage.dense=a,e.Matrix._storage.default=a,a},lazy:!1},le=function(e,r,t){if(null==t)return e.eq(r);if(e.eq(r))return!0;if(e.isNaN()||r.isNaN())return!1;if(e.isFinite()&&r.isFinite()){var n=e.minus(r).abs();if(n.isZero())return!0;var i=e.constructor.max(e.abs(),r.abs());return n.lte(i.times(t))}return!1},pe=o.nearlyEqual;var me={factory:function(e,r,t,n){var i=n("equalScalar",{"boolean, boolean":function(e,r){return e===r},"number, number":function(e,t){return e===t||pe(e,t,r.epsilon)},"BigNumber, BigNumber":function(e,t){return e.eq(t)||le(e,t,r.epsilon)},"Fraction, Fraction":function(e,r){return e.equals(r)},"Complex, Complex":function(e,r){return e.equals(r)},"Unit, Unit":function(e,r){if(!e.equalBase(r))throw new Error("Cannot compare units with different base");return i(e.value,r.value)}});return i}},he=Q.array,de=Q.object,ge=Q.string,ve=Q.number,ye=Array.isArray,xe=ve.isNumber,we=ve.isInteger,be=ge.isString,Ne=he.validateIndex;var Me={name:"SparseMatrix",path:"type",factory:function(e,r,t,n){var i=t(ee),a=t(me);function o(r,t){if(!(this instanceof o))throw new SyntaxError("Constructor must be called with the new operator");if(t&&!be(t))throw new Error("Invalid datatype: "+t);if(e.isMatrix(r))s(this,r,t);else if(r&&ye(r.index)&&ye(r.ptr)&&ye(r.size))this._values=r.values,this._index=r.index,this._ptr=r.ptr,this._size=r.size,this._datatype=t||r.datatype;else if(ye(r))u(this,r,t);else{if(r)throw new TypeError("Unsupported type of data ("+Q.types.type(r)+")");this._values=[],this._index=[],this._ptr=[0],this._size=[0,0],this._datatype=t}}var s=function(e,r,t){"SparseMatrix"===r.type?(e._values=r._values?de.clone(r._values):void 0,e._index=de.clone(r._index),e._ptr=de.clone(r._ptr),e._size=de.clone(r._size),e._datatype=t||r._datatype):u(e,r.valueOf(),t||r._datatype)},u=function(e,r,t){e._values=[],e._index=[],e._ptr=[],e._datatype=t;var i=r.length,o=0,s=a,u=0;if(be(t)&&(s=n.find(a,[t,t])||a,u=n.convert(0,t)),i>0){var c=0;do{e._ptr.push(e._index.length);for(var f=0;f<i;f++){var l=r[f];if(ye(l)){if(0===c&&o<l.length&&(o=l.length),c<l.length){var p=l[c];s(p,u)||(e._values.push(p),e._index.push(f))}}else 0===c&&o<1&&(o=1),s(l,u)||(e._values.push(l),e._index.push(f))}c++}while(c<o)}e._ptr.push(e._index.length),e._size=[i,o]};o.prototype=new i,o.prototype.type="SparseMatrix",o.prototype.isSparseMatrix=!0,o.prototype.storage=function(){return"sparse"},o.prototype.datatype=function(){return this._datatype},o.prototype.create=function(e,r){return new o(e,r)},o.prototype.density=function(){var e=this._size[0],r=this._size[1];return 0!==e&&0!==r?this._index.length/(e*r):0},o.prototype.subset=function(e,r,t){if(!this._values)throw new Error("Cannot invoke subset on a Pattern only matrix");switch(arguments.length){case 1:return c(this,e);case 2:case 3:return f(this,e,r,t);default:throw new SyntaxError("Wrong number of arguments")}};var c=function(r,t){if(!e.isIndex(t))throw new TypeError("Invalid index");if(t.isScalar())return r.get(t.min());var n,i,a,s,u=t.size();if(u.length!=r._size.length)throw new V(u.length,r._size.length);var c=t.min(),f=t.max();for(n=0,i=r._size.length;n<i;n++)Ne(c[n],r._size[n]),Ne(f[n],r._size[n]);var l=r._values,p=r._index,m=r._ptr,h=t.dimension(0),d=t.dimension(1),g=[],v=[];h.forEach(function(e,r){v[e]=r[0],g[e]=!0});var y=l?[]:void 0,x=[],w=[];return d.forEach(function(e){for(w.push(x.length),a=m[e],s=m[e+1];a<s;a++)n=p[a],!0===g[n]&&(x.push(v[n]),y&&y.push(l[a]))}),w.push(x.length),new o({values:y,index:x,ptr:w,size:u,datatype:r._datatype})},f=function(r,t,n,i){if(!t||!0!==t.isIndex)throw new TypeError("Invalid index");var a,o=t.size(),s=t.isScalar();if(e.isMatrix(n)?(a=n.size(),n=n.toArray()):a=he.size(n),s){if(0!==a.length)throw new TypeError("Scalar expected");r.set(t.min(),n,i)}else{if(1!==o.length&&2!==o.length)throw new V(o.length,r._size.length,"<");if(a.length<o.length){for(var u=0,c=0;1===o[u]&&1===a[u];)u++;for(;1===o[u];)c++,u++;n=he.unsqueeze(n,o.length,c,a)}if(!de.deepEqual(o,a))throw new V(o,a,">");for(var f=t.min()[0],l=t.min()[1],p=a[0],m=a[1],h=0;h<p;h++)for(var d=0;d<m;d++){var g=n[h][d];r.set([h+f,d+l],g,i)}}return r};o.prototype.get=function(e){if(!ye(e))throw new TypeError("Array expected");if(e.length!=this._size.length)throw new V(e.length,this._size.length);if(!this._values)throw new Error("Cannot invoke get on a Pattern only matrix");var r=e[0],t=e[1];Ne(r,this._size[0]),Ne(t,this._size[1]);var n=l(r,this._ptr[t],this._ptr[t+1],this._index);return n<this._ptr[t+1]&&this._index[n]===r?this._values[n]:0},o.prototype.set=function(e,r,t){if(!ye(e))throw new TypeError("Array expected");if(e.length!=this._size.length)throw new V(e.length,this._size.length);if(!this._values)throw new Error("Cannot invoke set on a Pattern only matrix");var i=e[0],o=e[1],s=this._size[0],u=this._size[1],c=a,f=0;be(this._datatype)&&(c=n.find(a,[this._datatype,this._datatype])||a,f=n.convert(0,this._datatype)),(i>s-1||o>u-1)&&(h(this,Math.max(i+1,s),Math.max(o+1,u),t),s=this._size[0],u=this._size[1]),Ne(i,s),Ne(o,u);var d=l(i,this._ptr[o],this._ptr[o+1],this._index);return d<this._ptr[o+1]&&this._index[d]===i?c(r,f)?p(d,o,this._values,this._index,this._ptr):this._values[d]=r:m(d,i,o,r,this._values,this._index,this._ptr),this};var l=function(e,r,t,n){if(t-r==0)return t;for(var i=r;i<t;i++)if(n[i]===e)return i;return r},p=function(e,r,t,n,i){t.splice(e,1),n.splice(e,1);for(var a=r+1;a<i.length;a++)i[a]--},m=function(e,r,t,n,i,a,o){i.splice(e,0,n),a.splice(e,0,r);for(var s=t+1;s<o.length;s++)o[s]++};o.prototype.resize=function(e,r,t){if(!ye(e))throw new TypeError("Array expected");if(2!==e.length)throw new Error("Only two dimensions matrix are supported");e.forEach(function(r){if(!ve.isNumber(r)||!ve.isInteger(r)||r<0)throw new TypeError("Invalid size, must contain positive integers (size: "+ge.format(e)+")")});var n=t?this.clone():this;return h(n,e[0],e[1],r)};var h=function(e,r,t,i){var o=i||0,s=a,u=0;be(e._datatype)&&(s=n.find(a,[e._datatype,e._datatype])||a,u=n.convert(0,e._datatype),o=n.convert(o,e._datatype));var c,f,l,p=!s(o,u),m=e._size[0],h=e._size[1];if(t>h){for(f=h;f<t;f++)if(e._ptr[f]=e._values.length,p)for(c=0;c<m;c++)e._values.push(o),e._index.push(c);e._ptr[t]=e._values.length}else t<h&&(e._ptr.splice(t+1,h-t),e._values.splice(e._ptr[t],e._values.length),e._index.splice(e._ptr[t],e._index.length));if(h=t,r>m){if(p){var d=0;for(f=0;f<h;f++){e._ptr[f]=e._ptr[f]+d,l=e._ptr[f+1]+d;var g=0;for(c=m;c<r;c++,g++)e._values.splice(l+g,0,o),e._index.splice(l+g,0,c),d++}e._ptr[h]=e._values.length}}else if(r<m){var v=0;for(f=0;f<h;f++){e._ptr[f]=e._ptr[f]-v;var y=e._ptr[f],x=e._ptr[f+1]-v;for(l=y;l<x;l++)(c=e._index[l])>r-1&&(e._values.splice(l,1),e._index.splice(l,1),v++)}e._ptr[f]=e._values.length}return e._size[0]=r,e._size[1]=t,e};o.prototype.reshape=function(e,r){if(!ye(e))throw new TypeError("Array expected");if(2!==e.length)throw new Error("Sparse matrices can only be reshaped in two dimensions");if(e.forEach(function(r){if(!ve.isNumber(r)||!ve.isInteger(r)||r<0)throw new TypeError("Invalid size, must contain positive integers (size: "+ge.format(e)+")")}),this._size[0]*this._size[1]!=e[0]*e[1])throw new Error("Reshaping sparse matrix will result in the wrong number of elements");var t=r?this.clone():this;if(this._size[0]===e[0]&&this._size[1]===e[1])return t;for(var n=[],i=0;i<t._ptr.length;i++)for(var a=0;a<t._ptr[i+1]-t._ptr[i];a++)n.push(i);var o=t._values.slice(),s=t._index.slice();for(i=0;i<t._index.length;i++){var u=s[i],c=n[i],f=u*t._size[1]+c;n[i]=f%e[1],s[i]=Math.floor(f/e[1])}for(t._values.length=0,t._index.length=0,t._ptr.length=e[1]+1,t._size=e.slice(),i=0;i<t._ptr.length;i++)t._ptr[i]=0;for(var p=0;p<o.length;p++){i=s[p],a=n[p];var h=o[p],d=l(i,t._ptr[a],t._ptr[a+1],t._index);m(d,i,a,h,t._values,t._index,t._ptr)}return t},o.prototype.clone=function(){return new o({values:this._values?de.clone(this._values):void 0,index:de.clone(this._index),ptr:de.clone(this._ptr),size:de.clone(this._size),datatype:this._datatype})},o.prototype.size=function(){return this._size.slice(0)},o.prototype.map=function(e,r){if(!this._values)throw new Error("Cannot invoke map on a Pattern only matrix");var t=this,n=this._size[0],i=this._size[1];return d(this,0,n-1,0,i-1,function(r,n,i){return e(r,[n,i],t)},r)};var d=function(e,r,t,i,s,u,c){var f=[],l=[],p=[],m=a,h=0;be(e._datatype)&&(m=n.find(a,[e._datatype,e._datatype])||a,h=n.convert(0,e._datatype));for(var d=function(e,r,t){e=u(e,r,t),m(e,h)||(f.push(e),l.push(r))},g=i;g<=s;g++){p.push(f.length);for(var v=e._ptr[g],y=e._ptr[g+1],x=r,w=v;w<y;w++){var b=e._index[w];if(b>=r&&b<=t){if(!c)for(var N=x;N<b;N++)d(0,N-r,g-i);d(e._values[w],b-r,g-i)}x=b+1}if(!c)for(var M=x;M<=t;M++)d(0,M-r,g-i)}return p.push(f.length),new o({values:f,index:l,ptr:p,size:[t-r+1,s-i+1]})};o.prototype.forEach=function(e,r){if(!this._values)throw new Error("Cannot invoke forEach on a Pattern only matrix");for(var t=this._size[0],n=this._size[1],i=0;i<n;i++){for(var a=this._ptr[i],o=this._ptr[i+1],s=0,u=a;u<o;u++){var c=this._index[u];if(!r)for(var f=s;f<c;f++)e(0,[f,i],this);e(this._values[u],[c,i],this),s=c+1}if(!r)for(var l=s;l<t;l++)e(0,[l,i],this)}},o.prototype.toArray=function(){return g(this._values,this._index,this._ptr,this._size,!0)},o.prototype.valueOf=function(){return g(this._values,this._index,this._ptr,this._size,!1)};var g=function(e,r,t,n,i){var a,o,s=n[0],u=n[1],c=[];for(a=0;a<s;a++)for(c[a]=[],o=0;o<u;o++)c[a][o]=0;for(o=0;o<u;o++)for(var f=t[o],l=t[o+1],p=f;p<l;p++)c[a=r[p]][o]=e?i?de.clone(e[p]):e[p]:1;return c};return o.prototype.format=function(e){for(var r=this._size[0],t=this._size[1],n=this.density(),i="Sparse Matrix ["+ge.format(r,e)+" x "+ge.format(t,e)+"] density: "+ge.format(n,e)+"\n",a=0;a<t;a++)for(var o=this._ptr[a],s=this._ptr[a+1],u=o;u<s;u++){var c=this._index[u];i+="\n    ("+ge.format(c,e)+", "+ge.format(a,e)+") ==> "+(this._values?ge.format(this._values[u],e):"X")}return i},o.prototype.toString=function(){return ge.format(this.toArray())},o.prototype.toJSON=function(){return{mathjs:"SparseMatrix",values:this._values,index:this._index,ptr:this._ptr,size:this._size,datatype:this._datatype}},o.prototype.diagonal=function(r){if(r){if(e.isBigNumber(r)&&(r=r.toNumber()),!xe(r)||!we(r))throw new TypeError("The parameter k must be an integer number")}else r=0;var t=r>0?r:0,n=r<0?-r:0,i=this._size[0],a=this._size[1],s=Math.min(i-n,a-t),u=[],c=[],f=[];f[0]=0;for(var l=t;l<a&&u.length<s;l++)for(var p=this._ptr[l],m=this._ptr[l+1],h=p;h<m;h++){var d=this._index[h];if(d===l-t+n){u.push(this._values[h]),c[u.length-1]=d-n;break}}return f.push(u.length),new o({values:u,index:c,ptr:f,size:[s,1]})},o.fromJSON=function(e){return new o(e)},o.diagonal=function(r,t,i,s,u){if(!ye(r))throw new TypeError("Array expected, size parameter");if(2!==r.length)throw new Error("Only two dimensions matrix are supported");if(r=r.map(function(r){if(e.isBigNumber(r)&&(r=r.toNumber()),!xe(r)||!we(r)||r<1)throw new Error("Size values must be positive integers");return r}),i){if(e.isBigNumber(i)&&(i=i.toNumber()),!xe(i)||!we(i))throw new TypeError("The parameter k must be an integer number")}else i=0;var c=a,f=0;be(u)&&(c=n.find(a,[u,u])||a,f=n.convert(0,u));var l,p=i>0?i:0,m=i<0?-i:0,h=r[0],d=r[1],g=Math.min(h-m,d-p);if(ye(t)){if(t.length!==g)throw new Error("Invalid value array length");l=function(e){return t[e]}}else if(e.isMatrix(t)){var v=t.size();if(1!==v.length||v[0]!==g)throw new Error("Invalid matrix length");l=function(e){return t.get([e])}}else l=function(){return t};for(var y=[],x=[],w=[],b=0;b<d;b++){w.push(y.length);var N=b-p;if(N>=0&&N<g){var M=l(N);c(M,f)||(x.push(N+m),y.push(M))}}return w.push(y.length),new o({values:y,index:x,ptr:w,size:[h,d]})},o.prototype.swapRows=function(e,r){if(!(xe(e)&&we(e)&&xe(r)&&we(r)))throw new Error("Row index must be positive integers");if(2!==this._size.length)throw new Error("Only two dimensional matrix is supported");return Ne(e,this._size[0]),Ne(r,this._size[0]),o._swapRows(e,r,this._size[1],this._values,this._index,this._ptr),this},o._forEachRow=function(e,r,t,n,i){for(var a=n[e],o=n[e+1],s=a;s<o;s++)i(t[s],r[s])},o._swapRows=function(e,r,t,n,i,a){for(var o=0;o<t;o++){var s=a[o],u=a[o+1],c=l(e,s,u,i),f=l(r,s,u,i);if(c<u&&f<u&&i[c]===e&&i[f]===r){if(n){var p=n[c];n[c]=n[f],n[f]=p}}else if(c<u&&i[c]===e&&(f>=u||i[f]!==r)){var m=n?n[c]:void 0;i.splice(f,0,r),n&&n.splice(f,0,m),i.splice(f<=c?c+1:c,1),n&&n.splice(f<=c?c+1:c,1)}else if(f<u&&i[f]===r&&(c>=u||i[c]!==e)){var h=n?n[f]:void 0;i.splice(c,0,e),n&&n.splice(c,0,h),i.splice(c<=f?f+1:f,1),n&&n.splice(c<=f?f+1:f,1)}}},e.Matrix._storage.sparse=o,o},lazy:!1};var Ee={name:"matrix",factory:function(e,r,t,n){var i=n("matrix",{"":function(){return a([])},string:function(e){return a([],e)},"string, string":function(e,r){return a([],e,r)},Array:function(e){return a(e)},Matrix:function(e){return a(e,e.storage())},"Array | Matrix, string":a,"Array | Matrix, string, string":a});return i.toTex={0:"\\begin{bmatrix}\\end{bmatrix}",1:"\\left(${args[0]}\\right)",2:"\\left(${args[0]}\\right)"},i;function a(r,t,n){return new(e.Matrix.storage(t||"default"))(r,n)}}};var Ae={factory:function(e,r,t,n){var i=n("add",{"number, number":function(e,r){return e+r},"Complex, Complex":function(e,r){return e.add(r)},"BigNumber, BigNumber":function(e,r){return e.plus(r)},"Fraction, Fraction":function(e,r){return e.add(r)},"Unit, Unit":function(e,r){if(null==e.value)throw new Error("Parameter x contains a unit with undefined value");if(null==r.value)throw new Error("Parameter y contains a unit with undefined value");if(!e.equalBase(r))throw new Error("Units do not match");var t=e.clone();return t.value=i(t.value,r.value),t.fixPrefix=!1,t}});return i}};var Oe={name:"algorithm01",factory:function(e,r,t,n){var i=e.DenseMatrix;return function(e,r,t,a){var o=e._data,s=e._size,u=e._datatype,c=r._values,f=r._index,l=r._ptr,p=r._size,m=r._datatype;if(s.length!==p.length)throw new V(s.length,p.length);if(s[0]!==p[0]||s[1]!==p[1])throw new RangeError("Dimension mismatch. Matrix A ("+s+") must match Matrix B ("+p+")");if(!c)throw new Error("Cannot perform operation on Dense Matrix and Pattern Sparse Matrix");var h,d,g=s[0],v=s[1],y="string"==typeof u&&u===m?u:void 0,x=y?n.find(t,[y,y]):t,w=[];for(h=0;h<g;h++)w[h]=[];var b=[],N=[];for(d=0;d<v;d++){for(var M=d+1,E=l[d],A=l[d+1],O=E;O<A;O++)b[h=f[O]]=a?x(c[O],o[h][d]):x(o[h][d],c[O]),N[h]=M;for(h=0;h<g;h++)N[h]===M?w[h][d]=b[h]:w[h][d]=o[h][d]}return new i({data:w,size:[g,v],datatype:y})}}};var Se={name:"algorithm04",factory:function(e,r,t,n){var i=t(me),a=e.SparseMatrix;return function(e,r,t){var o=e._values,s=e._index,u=e._ptr,c=e._size,f=e._datatype,l=r._values,p=r._index,m=r._ptr,h=r._size,d=r._datatype;if(c.length!==h.length)throw new V(c.length,h.length);if(c[0]!==h[0]||c[1]!==h[1])throw new RangeError("Dimension mismatch. Matrix A ("+c+") must match Matrix B ("+h+")");var g,v=c[0],y=c[1],x=i,w=0,b=t;"string"==typeof f&&f===d&&(g=f,x=n.find(i,[g,g]),w=n.convert(0,g),b=n.find(t,[g,g]));var N,M,E,A,O,S=o&&l?[]:void 0,_=[],T=[],C=new a({values:S,index:_,ptr:T,size:[v,y],datatype:g}),z=o&&l?[]:void 0,B=o&&l?[]:void 0,P=[],I=[];for(M=0;M<y;M++){T[M]=_.length;var R=M+1;for(A=u[M],O=u[M+1],E=A;E<O;E++)N=s[E],_.push(N),P[N]=R,z&&(z[N]=o[E]);for(A=m[M],O=m[M+1],E=A;E<O;E++)if(P[N=p[E]]===R){if(z){var U=b(z[N],l[E]);x(U,w)?P[N]=null:z[N]=U}}else _.push(N),I[N]=R,B&&(B[N]=l[E]);if(z&&B)for(E=T[M];E<_.length;)P[N=_[E]]===R?(S[E]=z[N],E++):I[N]===R?(S[E]=B[N],E++):_.splice(E,1)}return T[y]=_.length,C}}};var _e={name:"algorithm10",factory:function(e,r,t,n){var i=e.DenseMatrix;return function(e,r,t,a){var o=e._values,s=e._index,u=e._ptr,c=e._size,f=e._datatype;if(!o)throw new Error("Cannot perform operation on Pattern Sparse Matrix and Scalar value");var l,p=c[0],m=c[1],h=t;"string"==typeof f&&(l=f,r=n.convert(r,l),h=n.find(t,[l,l]));for(var d=[],g=new i({data:d,size:[p,m],datatype:l}),v=[],y=[],x=0;x<m;x++){for(var w=x+1,b=u[x],N=u[x+1],M=b;M<N;M++){var E=s[M];v[E]=o[M],y[E]=w}for(var A=0;A<p;A++)0===x&&(d[A]=[]),y[A]===w?d[A][x]=a?h(r,v[A]):h(v[A],r):d[A][x]=r}return g}}};Q.string.isString;var Te={name:"algorithm13",factory:function(e,r,t,n){var i=e.DenseMatrix,a=function(e,r,t,n,i,o){var s=[];if(r===t.length-1)for(var u=0;u<n;u++)s[u]=e(i[u],o[u]);else for(var c=0;c<n;c++)s[c]=a(e,r+1,t,t[r+1],i[c],o[c]);return s};return function(e,r,t){var o,s=e._data,u=e._size,c=e._datatype,f=r._data,l=r._size,p=r._datatype,m=[];if(u.length!==l.length)throw new V(u.length,l.length);for(var h=0;h<u.length;h++){if(u[h]!==l[h])throw new RangeError("Dimension mismatch. Matrix A ("+u+") must match Matrix B ("+l+")");m[h]=u[h]}var d=t;"string"==typeof c&&c===p&&(o=c,r=n.convert(r,o),d=n.find(t,[o,o]));var g=m.length>0?a(d,0,m,m[0],s,f):[];return new i({data:g,size:m,datatype:o})}}},Ce=i.clone;var ze={name:"algorithm14",factory:function(e,r,t,n){var i=e.DenseMatrix,a=function(e,r,t,n,i,o,s){var u=[];if(r===t.length-1)for(var c=0;c<n;c++)u[c]=s?e(o,i[c]):e(i[c],o);else for(var f=0;f<n;f++)u[f]=a(e,r+1,t,t[r+1],i[f],o,s);return u};return function(e,r,t,o){var s,u=e._data,c=e._size,f=e._datatype,l=t;"string"==typeof f&&(s=f,r=n.convert(r,s),l=n.find(t,[s,s]));var p=c.length>0?a(l,0,c,c[0],u,r,o):[];return new i({data:p,size:Ce(c),datatype:s})}}},Be=i.extend;var Pe={name:"add",factory:function(e,r,t,n){var i=t(Ee),a=t(Ae),o=L,s=t(Oe),u=t(Se),c=t(_e),f=t(Te),l=t(ze),p=n("add",Be({"DenseMatrix, DenseMatrix":function(e,r){return f(e,r,a)},"DenseMatrix, SparseMatrix":function(e,r){return s(e,r,a,!1)},"SparseMatrix, DenseMatrix":function(e,r){return s(r,e,a,!0)},"SparseMatrix, SparseMatrix":function(e,r){return u(e,r,a)},"Array, Array":function(e,r){return p(i(e),i(r)).valueOf()},"Array, Matrix":function(e,r){return p(i(e),r)},"Matrix, Array":function(e,r){return p(e,i(r))},"DenseMatrix, any":function(e,r){return l(e,r,a,!1)},"SparseMatrix, any":function(e,r){return c(e,r,a,!1)},"any, DenseMatrix":function(e,r){return l(r,e,a,!0)},"any, SparseMatrix":function(e,r){return c(r,e,a,!0)},"Array, any":function(e,r){return l(i(e),r,a,!1).valueOf()},"any, Array":function(e,r){return l(i(r),e,a,!0).valueOf()},"any, any":a,"any, any, ...any":function(e,r,t){for(var n=p(e,r),i=0;i<t.length;i++)n=p(n,t[i]);return n}},a.signatures));return p.toTex={2:"\\left(${args[0]}"+o.operators.add+"${args[1]}\\right)"},p}};var Ie={name:"Spa",path:"type",factory:function(e,r,t){var n=t(Pe),i=t(me);function a(){if(!(this instanceof a))throw new SyntaxError("Constructor must be called with the new operator");this._values=[],this._heap=new e.FibonacciHeap}return a.prototype.type="Spa",a.prototype.isSpa=!0,a.prototype.set=function(e,r){if(this._values[e])this._values[e].value=r;else{var t=this._heap.insert(e,r);this._values[e]=t}},a.prototype.get=function(e){var r=this._values[e];return r?r.value:0},a.prototype.accumulate=function(e,r){var t=this._values[e];t?t.value=n(t.value,r):(t=this._heap.insert(e,r),this._values[e]=t)},a.prototype.forEach=function(e,r,t){var n=this._heap,a=this._values,o=[],s=n.extractMinimum();for(s&&o.push(s);s&&s.key<=r;)s.key>=e&&(i(s.value,0)||t(s.key,s.value,this)),(s=n.extractMinimum())&&o.push(s);for(var u=0;u<o.length;u++){var c=o[u];a[(s=n.insert(c.key,c.value)).key]=s}},a.prototype.swap=function(e,r){var t=this._values[e],n=this._values[r];if(!t&&n)t=this._heap.insert(e,n.value),this._heap.remove(n),this._values[e]=t,this._values[r]=void 0;else if(t&&!n)n=this._heap.insert(r,t.value),this._heap.remove(t),this._values[r]=n,this._values[e]=void 0;else if(t&&n){var i=t.value;t.value=n.value,n.value=i}},a}};var Re={name:"algorithm03",factory:function(e,r,t,n){var i=e.DenseMatrix;return function(e,r,t,a){var o=e._data,s=e._size,u=e._datatype,c=r._values,f=r._index,l=r._ptr,p=r._size,m=r._datatype;if(s.length!==p.length)throw new V(s.length,p.length);if(s[0]!==p[0]||s[1]!==p[1])throw new RangeError("Dimension mismatch. Matrix A ("+s+") must match Matrix B ("+p+")");if(!c)throw new Error("Cannot perform operation on Dense Matrix and Pattern Sparse Matrix");var h,d=s[0],g=s[1],v=0,y=t;"string"==typeof u&&u===m&&(h=u,v=n.convert(0,h),y=n.find(t,[h,h]));for(var x=[],w=0;w<d;w++)x[w]=[];for(var b=[],N=[],M=0;M<g;M++){for(var E=M+1,A=l[M],O=l[M+1],S=A;S<O;S++){var _=f[S];b[_]=a?y(c[S],o[_][M]):y(o[_][M],c[S]),N[_]=E}for(var T=0;T<d;T++)N[T]===E?x[T][M]=b[T]:x[T][M]=a?y(v,o[T][M]):y(o[T][M],v)}return new i({data:x,size:[d,g],datatype:h})}}};var Ue={name:"algorithm07",factory:function(e,r,t,n){var i=e.DenseMatrix,a=function(e,r,t,n,i){for(var a=e._values,o=e._index,s=e._ptr,u=s[r],c=s[r+1];u<c;u++){var f=o[u];t[f]=i,n[f]=a[u]}};return function(e,r,t){var o=e._size,s=e._datatype,u=r._size,c=r._datatype;if(o.length!==u.length)throw new V(o.length,u.length);if(o[0]!==u[0]||o[1]!==u[1])throw new RangeError("Dimension mismatch. Matrix A ("+o+") must match Matrix B ("+u+")");var f,l,p,m=o[0],h=o[1],d=0,g=t;"string"==typeof s&&s===c&&(f=s,d=n.convert(0,f),g=n.find(t,[f,f]));var v=[];for(l=0;l<m;l++)v[l]=[];var y=new i({data:v,size:[m,h],datatype:f}),x=[],w=[],b=[],N=[];for(p=0;p<h;p++){var M=p+1;for(a(e,p,b,x,M),a(r,p,N,w,M),l=0;l<m;l++){var E=b[l]===M?x[l]:d,A=N[l]===M?w[l]:d;v[l][p]=g(E,A)}}return y}}};var ke={name:"algorithm12",factory:function(e,r,t,n){var i=e.DenseMatrix;return function(e,r,t,a){var o=e._values,s=e._index,u=e._ptr,c=e._size,f=e._datatype;if(!o)throw new Error("Cannot perform operation on Pattern Sparse Matrix and Scalar value");var l,p=c[0],m=c[1],h=t;"string"==typeof f&&(l=f,r=n.convert(r,l),h=n.find(t,[l,l]));for(var d=[],g=new i({data:d,size:[p,m],datatype:l}),v=[],y=[],x=0;x<m;x++){for(var w=x+1,b=u[x],N=u[x+1],M=b;M<N;M++){var E=s[M];v[E]=o[M],y[E]=w}for(var A=0;A<p;A++)0===x&&(d[A]=[]),y[A]===w?d[A][x]=a?h(r,v[A]):h(v[A],r):d[A][x]=a?h(r,0):h(0,r)}return g}}},De=o.nearlyEqual;var qe={name:"smaller",factory:function(e,r,t,n){var i=t(Ee),a=t(Re),o=t(Ue),s=t(ke),u=t(Te),c=t(ze),f=L,l=n("smaller",{"boolean, boolean":function(e,r){return e<r},"number, number":function(e,t){return e<t&&!De(e,t,r.epsilon)},"BigNumber, BigNumber":function(e,t){return e.lt(t)&&!le(e,t,r.epsilon)},"Fraction, Fraction":function(e,r){return-1===e.compare(r)},"Complex, Complex":function(e,r){throw new TypeError("No ordering relation is defined for complex numbers")},"Unit, Unit":function(e,r){if(!e.equalBase(r))throw new Error("Cannot compare units with different base");return l(e.value,r.value)},"SparseMatrix, SparseMatrix":function(e,r){return o(e,r,l)},"SparseMatrix, DenseMatrix":function(e,r){return a(r,e,l,!0)},"DenseMatrix, SparseMatrix":function(e,r){return a(e,r,l,!1)},"DenseMatrix, DenseMatrix":function(e,r){return u(e,r,l)},"Array, Array":function(e,r){return l(i(e),i(r)).valueOf()},"Array, Matrix":function(e,r){return l(i(e),r)},"Matrix, Array":function(e,r){return l(e,i(r))},"SparseMatrix, any":function(e,r){return s(e,r,l,!1)},"DenseMatrix, any":function(e,r){return c(e,r,l,!1)},"any, SparseMatrix":function(e,r){return s(r,e,l,!0)},"any, DenseMatrix":function(e,r){return c(r,e,l,!0)},"Array, any":function(e,r){return c(i(e),r,l,!1).valueOf()},"any, Array":function(e,r){return c(i(r),e,l,!0).valueOf()}});return l.toTex={2:"\\left(${args[0]}"+f.operators.smaller+"${args[1]}\\right)"},l}},Le=o.nearlyEqual;var Fe={name:"larger",factory:function(e,r,t,n){var i=t(Ee),a=t(Re),o=t(Ue),s=t(ke),u=t(Te),c=t(ze),f=L,l=n("larger",{"boolean, boolean":function(e,r){return e>r},"number, number":function(e,t){return e>t&&!Le(e,t,r.epsilon)},"BigNumber, BigNumber":function(e,t){return e.gt(t)&&!le(e,t,r.epsilon)},"Fraction, Fraction":function(e,r){return 1===e.compare(r)},"Complex, Complex":function(){throw new TypeError("No ordering relation is defined for complex numbers")},"Unit, Unit":function(e,r){if(!e.equalBase(r))throw new Error("Cannot compare units with different base");return l(e.value,r.value)},"SparseMatrix, SparseMatrix":function(e,r){return o(e,r,l)},"SparseMatrix, DenseMatrix":function(e,r){return a(r,e,l,!0)},"DenseMatrix, SparseMatrix":function(e,r){return a(e,r,l,!1)},"DenseMatrix, DenseMatrix":function(e,r){return u(e,r,l)},"Array, Array":function(e,r){return l(i(e),i(r)).valueOf()},"Array, Matrix":function(e,r){return l(i(e),r)},"Matrix, Array":function(e,r){return l(e,i(r))},"SparseMatrix, any":function(e,r){return s(e,r,l,!1)},"DenseMatrix, any":function(e,r){return c(e,r,l,!1)},"any, SparseMatrix":function(e,r){return s(r,e,l,!0)},"any, DenseMatrix":function(e,r){return c(r,e,l,!0)},"Array, any":function(e,r){return c(i(e),r,l,!1).valueOf()},"any, Array":function(e,r){return c(i(r),e,l,!0).valueOf()}});return l.toTex={2:"\\left(${args[0]}"+f.operators.larger+"${args[1]}\\right)"},l}};var je={name:"FibonacciHeap",path:"type",factory:function(e,r,t,n){var i=t(qe),a=t(Fe),o=1/Math.log((1+Math.sqrt(5))/2);function s(){if(!(this instanceof s))throw new SyntaxError("Constructor must be called with the new operator");this._minimum=null,this._size=0}s.prototype.type="FibonacciHeap",s.prototype.isFibonacciHeap=!0,s.prototype.insert=function(e,r){var t={key:e,value:r,degree:0};if(this._minimum){var n=this._minimum;t.left=n,t.right=n.right,n.right=t,t.right.left=t,i(e,n.key)&&(this._minimum=t)}else t.left=t,t.right=t,this._minimum=t;return this._size++,t},s.prototype.size=function(){return this._size},s.prototype.clear=function(){this._minimum=null,this._size=0},s.prototype.isEmpty=function(){return 0===this._size},s.prototype.extractMinimum=function(){var e=this._minimum;if(null===e)return e;for(var r=this._minimum,t=e.degree,n=e.child;t>0;){var i=n.right;n.left.right=n.right,n.right.left=n.left,n.left=r,n.right=r.right,r.right=n,n.right.left=n,n.parent=null,n=i,t--}return e.left.right=e.right,e.right.left=e.left,e==e.right?r=null:(r=e.right,r=l(r,this._size)),this._size--,this._minimum=r,e},s.prototype.remove=function(e){this._minimum=u(this._minimum,e,-1),this.extractMinimum()};var u=function(e,r,t){r.key=t;var n=r.parent;return n&&i(r.key,n.key)&&(c(e,r,n),f(e,n)),i(r.key,e.key)&&(e=r),e},c=function(e,r,t){r.left.right=r.right,r.right.left=r.left,t.degree--,t.child==r&&(t.child=r.right),0===t.degree&&(t.child=null),r.left=e,r.right=e.right,e.right=r,r.right.left=r,r.parent=null,r.mark=!1},f=function(e,r){var t=r.parent;t&&(r.mark?(c(e,r,t),f(t)):r.mark=!0)},l=function(e,r){var t,n,s,u=Math.floor(Math.log(r)*o)+1,c=new Array(u),f=0,l=e;if(l)for(f++,l=l.right;l!==e;)f++,l=l.right;for(;f>0;){for(var p=l.degree,m=l.right;t=c[p];){if(a(l.key,t.key)){var h=t;t=l,l=h}s=l,(n=t).left.right=n.right,n.right.left=n.left,n.parent=s,s.child?(n.left=s.child,n.right=s.child.right,s.child.right=n,n.right.left=n):(s.child=n,n.right=n,n.left=n),s.degree++,n.mark=!1,c[p]=null,p++}c[p]=l,l=m,f--}e=null;for(var d=0;d<u;d++)(t=c[d])&&(e?(t.left.right=t.right,t.right.left=t.left,t.left=e,t.right=e.right,e.right=t,t.right.left=t,i(t.key,e.key)&&(e=t)):e=t);return e};return s}},He=Q.string,$e=Q.object,Ge=Array.isArray,Ve=He.isString;var Ze={name:"ImmutableDenseMatrix",path:"type",factory:function(e,r,t){var n=t(fe),i=t(qe);function a(r,t){if(!(this instanceof a))throw new SyntaxError("Constructor must be called with the new operator");if(t&&!Ve(t))throw new Error("Invalid datatype: "+t);if(e.isMatrix(r)||Ge(r)){var i=new n(r,t);this._data=i._data,this._size=i._size,this._datatype=i._datatype,this._min=null,this._max=null}else if(r&&Ge(r.data)&&Ge(r.size))this._data=r.data,this._size=r.size,this._datatype=r.datatype,this._min=void 0!==r.min?r.min:null,this._max=void 0!==r.max?r.max:null;else{if(r)throw new TypeError("Unsupported type of data ("+Q.types.type(r)+")");this._data=[],this._size=[0],this._datatype=t,this._min=null,this._max=null}}return a.prototype=new n,a.prototype.type="ImmutableDenseMatrix",a.prototype.isImmutableDenseMatrix=!0,a.prototype.subset=function(r){switch(arguments.length){case 1:var t=n.prototype.subset.call(this,r);return e.isMatrix(t)?new a({data:t._data,size:t._size,datatype:t._datatype}):t;case 2:case 3:throw new Error("Cannot invoke set subset on an Immutable Matrix instance");default:throw new SyntaxError("Wrong number of arguments")}},a.prototype.set=function(){throw new Error("Cannot invoke set on an Immutable Matrix instance")},a.prototype.resize=function(){throw new Error("Cannot invoke resize on an Immutable Matrix instance")},a.prototype.reshape=function(){throw new Error("Cannot invoke reshape on an Immutable Matrix instance")},a.prototype.clone=function(){return new a({data:$e.clone(this._data),size:$e.clone(this._size),datatype:this._datatype})},a.prototype.toJSON=function(){return{mathjs:"ImmutableDenseMatrix",data:this._data,size:this._size,datatype:this._datatype}},a.fromJSON=function(e){return new a(e)},a.prototype.swapRows=function(){throw new Error("Cannot invoke swapRows on an Immutable Matrix instance")},a.prototype.min=function(){if(null===this._min){var e=null;this.forEach(function(r){(null===e||i(r,e))&&(e=r)}),this._min=null!==e?e:void 0}return this._min},a.prototype.max=function(){if(null===this._max){var e=null;this.forEach(function(r){(null===e||i(e,r))&&(e=r)}),this._max=null!==e?e:void 0}return this._max},a}},We=i.clone,Je=o.isInteger;var Ye={name:"Index",path:"type",factory:function(e){function r(n){if(!(this instanceof r))throw new SyntaxError("Constructor must be called with the new operator");this._dimensions=[],this._isScalar=!0;for(var i=0,a=arguments.length;i<a;i++){var o=arguments[i];if(e.isRange(o))this._dimensions.push(o),this._isScalar=!1;else if(Array.isArray(o)||e.isMatrix(o)){var s=t(o.valueOf());this._dimensions.push(s);var u=s.size();1===u.length&&1===u[0]||(this._isScalar=!1)}else if("number"==typeof o)this._dimensions.push(t([o]));else{if("string"!=typeof o)throw new TypeError("Dimension must be an Array, Matrix, number, string, or Range");this._dimensions.push(o)}}}function t(r){for(var t=0,n=r.length;t<n;t++)if("number"!=typeof r[t]||!Je(r[t]))throw new TypeError("Index parameters must be positive integer numbers");return new e.ImmutableDenseMatrix(r)}return r.prototype.type="Index",r.prototype.isIndex=!0,r.prototype.clone=function(){var e=new r;return e._dimensions=We(this._dimensions),e._isScalar=this._isScalar,e},r.create=function(e){var t=new r;return r.apply(t,e),t},r.prototype.size=function(){for(var e=[],r=0,t=this._dimensions.length;r<t;r++){var n=this._dimensions[r];e[r]="string"==typeof n?1:n.size()[0]}return e},r.prototype.max=function(){for(var e=[],r=0,t=this._dimensions.length;r<t;r++){var n=this._dimensions[r];e[r]="string"==typeof n?n:n.max()}return e},r.prototype.min=function(){for(var e=[],r=0,t=this._dimensions.length;r<t;r++){var n=this._dimensions[r];e[r]="string"==typeof n?n:n.min()}return e},r.prototype.forEach=function(e){for(var r=0,t=this._dimensions.length;r<t;r++)e(this._dimensions[r],r,this)},r.prototype.dimension=function(e){return this._dimensions[e]||null},r.prototype.isObjectProperty=function(){return 1===this._dimensions.length&&"string"==typeof this._dimensions[0]},r.prototype.getObjectProperty=function(){return this.isObjectProperty()?this._dimensions[0]:null},r.prototype.isScalar=function(){return this._isScalar},r.prototype.toArray=function(){for(var e=[],r=0,t=this._dimensions.length;r<t;r++){var n=this._dimensions[r];e.push("string"==typeof n?n:n.toArray())}return e},r.prototype.valueOf=r.prototype.toArray,r.prototype.toString=function(){for(var e=[],r=0,t=this._dimensions.length;r<t;r++){var n=this._dimensions[r];"string"==typeof n?e.push(JSON.stringify(n)):e.push(n.toString())}return"["+e.join(", ")+"]"},r.prototype.toJSON=function(){return{mathjs:"Index",dimensions:this._dimensions}},r.fromJSON=function(e){return r.create(e.dimensions)},r}};var Xe={name:"Range",path:"type",factory:function(e,r,t,n){function i(r,t,n){if(!(this instanceof i))throw new SyntaxError("Constructor must be called with the new operator");if(null!=r)if(e.isBigNumber(r))r=r.toNumber();else if("number"!=typeof r)throw new TypeError("Parameter start must be a number");if(null!=t)if(e.isBigNumber(t))t=t.toNumber();else if("number"!=typeof t)throw new TypeError("Parameter end must be a number");if(null!=n)if(e.isBigNumber(n))n=n.toNumber();else if("number"!=typeof n)throw new TypeError("Parameter step must be a number");this.start=null!=r?parseFloat(r):0,this.end=null!=t?parseFloat(t):0,this.step=null!=n?parseFloat(n):1}return i.prototype.type="Range",i.prototype.isRange=!0,i.parse=function(e){if("string"!=typeof e)return null;var r=e.split(":").map(function(e){return parseFloat(e)});if(r.some(function(e){return isNaN(e)}))return null;switch(r.length){case 2:return new i(r[0],r[1]);case 3:return new i(r[0],r[2],r[1]);default:return null}},i.prototype.clone=function(){return new i(this.start,this.end,this.step)},i.prototype.size=function(){var e=0,r=this.start,t=this.step,n=this.end-r;return o.sign(t)==o.sign(n)?e=Math.ceil(n/t):0==n&&(e=0),isNaN(e)&&(e=0),[e]},i.prototype.min=function(){var e=this.size()[0];return e>0?this.step>0?this.start:this.start+(e-1)*this.step:void 0},i.prototype.max=function(){var e=this.size()[0];return e>0?this.step>0?this.start+(e-1)*this.step:this.start:void 0},i.prototype.forEach=function(e){var r=this.start,t=this.step,n=this.end,i=0;if(t>0)for(;r<n;)e(r,[i],this),r+=t,i++;else if(t<0)for(;r>n;)e(r,[i],this),r+=t,i++},i.prototype.map=function(e){var r=[];return this.forEach(function(t,n,i){r[n[0]]=e(t,n,i)}),r},i.prototype.toArray=function(){var e=[];return this.forEach(function(r,t){e[t[0]]=r}),e},i.prototype.valueOf=function(){return this.toArray()},i.prototype.format=function(e){var r=o.format(this.start,e);return 1!=this.step&&(r+=":"+o.format(this.step,e)),r+=":"+o.format(this.end,e)},i.prototype.toString=function(){return this.format()},i.prototype.toJSON=function(){return{mathjs:"Range",start:this.start,end:this.end,step:this.step}},i.fromJSON=function(e){return new i(e.start,e.end,e.step)},i}};var Qe=[ee,fe,Me,Ie,je,Ze,Ye,Xe,{name:"index",factory:function(e,r,t,n){return n("index",{"...number | string | BigNumber | Range | Array | Matrix":function(r){var t=r.map(function(r){return e.isBigNumber(r)?r.toNumber():Array.isArray(r)||e.isMatrix(r)?r.map(function(r){return e.isBigNumber(r)?r.toNumber():r}):r}),n=new e.Index;return e.Index.apply(n,t),n}})}},Ee,{name:"sparse",factory:function(e,r,t,n){var i=e.SparseMatrix,a=n("sparse",{"":function(){return new i([])},string:function(e){return new i([],e)},"Array | Matrix":function(e){return new i(e)},"Array | Matrix, string":function(e,r){return new i(e,r)}});return a.toTex={0:"\\begin{bsparse}\\end{bsparse}",1:"\\left(${args[0]}\\right)"},a}}];var Ke={name:"number",factory:function(e,r,t,n){var i=n("number",{"":function(){return 0},number:function(e){return e},string:function(e){var r=Number(e);if(isNaN(r))throw new SyntaxError('String "'+e+'" is no valid number');return r},BigNumber:function(e){return e.toNumber()},Fraction:function(e){return e.valueOf()},Unit:function(e){throw new Error("Second argument with valueless unit expected")},null:function(e){return 0},"Unit, string | Unit":function(e,r){return e.toNumber(r)},"Array | Matrix":function(e){return A(e,i)}});return i.toTex={0:"0",1:"\\left(${args[0]}\\right)",2:"\\left(\\left(${args[0]}\\right)${args[1]}\\right)"},i}};var er={name:"ResultSet",path:"type",factory:function(e,r,t,n){function i(e){if(!(this instanceof i))throw new SyntaxError("Constructor must be called with the new operator");this.entries=e||[]}return i.prototype.type="ResultSet",i.prototype.isResultSet=!0,i.prototype.valueOf=function(){return this.entries},i.prototype.toString=function(){return"["+this.entries.join(", ")+"]"},i.prototype.toJSON=function(){return{mathjs:"ResultSet",entries:this.entries}},i.fromJSON=function(e){return new i(e.entries)},i}},rr=[er];var tr={name:"string",factory:function(e,r,t,n){var i=n("string",{"":function(){return""},number:o.format,null:function(e){return"null"},boolean:function(e){return e+""},string:function(e){return e},"Array | Matrix":function(e){return A(e,i)},any:function(e){return String(e)}});return i.toTex={0:'\\mathtt{""}',1:"\\mathrm{string}\\left(${args[0]}\\right)"},i}},nr=r(function(e,r){var t=X.memoize;function n(e){return e[0].precision}r.e=t(function(e){return new e(1).exp()},n),r.phi=t(function(e){return new e(1).plus(new e(5).sqrt()).div(2)},n),r.pi=t(function(e){return e.acos(-1)},n),r.tau=t(function(e){return r.pi(e).times(2)},n)});nr.e,nr.phi,nr.pi,nr.tau;var ir={name:"unaryMinus",factory:function(e,r,t,n){var i=L,a=n("unaryMinus",{number:function(e){return-e},Complex:function(e){return e.neg()},BigNumber:function(e){return e.neg()},Fraction:function(e){return e.neg()},Unit:function(e){var r=e.clone();return r.value=a(e.value),r},"Array | Matrix":function(e){return A(e,a,!0)}});return a.toTex={1:i.operators.unaryMinus+"\\left(${args[0]}\\right)"},a}};var ar={name:"algorithm05",factory:function(e,r,t,n){var i=t(me),a=e.SparseMatrix;return function(e,r,t){var o=e._values,s=e._index,u=e._ptr,c=e._size,f=e._datatype,l=r._values,p=r._index,m=r._ptr,h=r._size,d=r._datatype;if(c.length!==h.length)throw new V(c.length,h.length);if(c[0]!==h[0]||c[1]!==h[1])throw new RangeError("Dimension mismatch. Matrix A ("+c+") must match Matrix B ("+h+")");var g,v=c[0],y=c[1],x=i,w=0,b=t;"string"==typeof f&&f===d&&(g=f,x=n.find(i,[g,g]),w=n.convert(0,g),b=n.find(t,[g,g]));var N,M,E,A,O=o&&l?[]:void 0,S=[],_=[],T=new a({values:O,index:S,ptr:_,size:[v,y],datatype:g}),C=O?[]:void 0,z=O?[]:void 0,B=[],P=[];for(M=0;M<y;M++){_[M]=S.length;var I=M+1;for(E=u[M],A=u[M+1];E<A;E++)N=s[E],S.push(N),B[N]=I,C&&(C[N]=o[E]);for(E=m[M],A=m[M+1];E<A;E++)B[N=p[E]]!==I&&S.push(N),P[N]=I,z&&(z[N]=l[E]);if(O)for(E=_[M];E<S.length;){var R=B[N=S[E]],U=P[N];if(R===I||U===I){var k=b(R===I?C[N]:w,U===I?z[N]:w);x(k,w)?S.splice(E,1):(O.push(k),E++)}}}return _[y]=S.length,T}}};function or(e,r){var t=e.size(),n=r.size();if(t.length!==n.length)throw new V(t.length,n.length)}var sr={name:"subtract",factory:function(e,r,t,n){var i=L,a=t(Ee),o=t(Ae),s=t(ir),u=t(Oe),c=t(Re),f=t(ar),l=t(_e),p=t(Te),m=t(ze),h=n("subtract",{"number, number":function(e,r){return e-r},"Complex, Complex":function(e,r){return e.sub(r)},"BigNumber, BigNumber":function(e,r){return e.minus(r)},"Fraction, Fraction":function(e,r){return e.sub(r)},"Unit, Unit":function(e,r){if(null==e.value)throw new Error("Parameter x contains a unit with undefined value");if(null==r.value)throw new Error("Parameter y contains a unit with undefined value");if(!e.equalBase(r))throw new Error("Units do not match");var t=e.clone();return t.value=h(t.value,r.value),t.fixPrefix=!1,t},"SparseMatrix, SparseMatrix":function(e,r){return or(e,r),f(e,r,h)},"SparseMatrix, DenseMatrix":function(e,r){return or(e,r),c(r,e,h,!0)},"DenseMatrix, SparseMatrix":function(e,r){return or(e,r),u(e,r,h,!1)},"DenseMatrix, DenseMatrix":function(e,r){return or(e,r),p(e,r,h)},"Array, Array":function(e,r){return h(a(e),a(r)).valueOf()},"Array, Matrix":function(e,r){return h(a(e),r)},"Matrix, Array":function(e,r){return h(e,a(r))},"SparseMatrix, any":function(e,r){return l(e,s(r),o)},"DenseMatrix, any":function(e,r){return m(e,r,h)},"any, SparseMatrix":function(e,r){return l(r,e,h,!0)},"any, DenseMatrix":function(e,r){return m(r,e,h,!0)},"Array, any":function(e,r){return m(a(e),r,h,!1).valueOf()},"any, Array":function(e,r){return m(a(r),e,h,!0).valueOf()}});return h.toTex={2:"\\left(${args[0]}"+i.operators.subtract+"${args[1]}\\right)"},h}};var ur={factory:function(e,r,t,n){var i=n("multiplyScalar",{"number, number":function(e,r){return e*r},"Complex, Complex":function(e,r){return e.mul(r)},"BigNumber, BigNumber":function(e,r){return e.times(r)},"Fraction, Fraction":function(e,r){return e.mul(r)},"number | Fraction | BigNumber | Complex, Unit":function(e,r){var t=r.clone();return t.value=null===t.value?t._normalize(e):i(t.value,e),t},"Unit, number | Fraction | BigNumber | Complex":function(e,r){var t=e.clone();return t.value=null===t.value?t._normalize(r):i(t.value,r),t},"Unit, Unit":function(e,r){return e.multiply(r)}});return i}};var cr={factory:function(e,r,t,n){var i=t(ur),a=n("divide",{"number, number":function(e,r){return e/r},"Complex, Complex":function(e,r){return e.div(r)},"BigNumber, BigNumber":function(e,r){return e.div(r)},"Fraction, Fraction":function(e,r){return e.div(r)},"Unit, number | Fraction | BigNumber":function(e,r){var t=e.clone();return t.value=a(null===t.value?t._normalize(1):t.value,r),t},"number | Fraction | BigNumber, Unit":function(e,r){var t=r.pow(-1);return t.value=i(null===t.value?t._normalize(1):t.value,e),t},"Unit, Unit":function(e,r){return e.divide(r)}});return a}},fr=o.isInteger;var lr={name:"eye",factory:function(e,r,t,n){var i=t(Ee),a=n("eye",{"":function(){return"Matrix"===r.matrix?i([]):[]},string:function(e){return i(e)},"number | BigNumber":function(e){return s(e,e,"Matrix"===r.matrix?"default":void 0)},"number | BigNumber, string":function(e,r){return s(e,e,r)},"number | BigNumber, number | BigNumber":function(e,t){return s(e,t,"Matrix"===r.matrix?"default":void 0)},"number | BigNumber, number | BigNumber, string":function(e,r,t){return s(e,r,t)},Array:function(e){return o(e)},"Array, string":function(e,r){return o(e,r)},Matrix:function(e){return o(e.valueOf(),e.storage())},"Matrix, string":function(e,r){return o(e.valueOf(),r)}});return a.toTex=void 0,a;function o(e,r){switch(e.length){case 0:return r?i(r):[];case 1:return s(e[0],e[0],r);case 2:return s(e[0],e[1],r);default:throw new Error("Vector containing two values expected")}}function s(r,t,n){var i=e.isBigNumber(r)||e.isBigNumber(t)?e.BigNumber:null;if(e.isBigNumber(r)&&(r=r.toNumber()),e.isBigNumber(t)&&(t=t.toNumber()),!fr(r)||r<1)throw new Error("Parameters in function eye must be positive integers");if(!fr(t)||t<1)throw new Error("Parameters in function eye must be positive integers");var a=i?new e.BigNumber(1):1,o=i?new i(0):0,s=[r,t];if(n)return e.Matrix.storage(n).diagonal(s,a,0,o);for(var u=J.resize([],s,o),c=r<t?r:t,f=0;f<c;f++)u[f][f]=a;return u}}};var pr={name:"algorithm11",factory:function(e,r,t,n){var i=t(me),a=e.SparseMatrix;return function(e,r,t,o){var s=e._values,u=e._index,c=e._ptr,f=e._size,l=e._datatype;if(!s)throw new Error("Cannot perform operation on Pattern Sparse Matrix and Scalar value");var p,m=f[0],h=f[1],d=i,g=0,v=t;"string"==typeof l&&(p=l,d=n.find(i,[p,p]),g=n.convert(0,p),r=n.convert(r,p),v=n.find(t,[p,p]));for(var y=[],x=[],w=[],b=new a({values:y,index:x,ptr:w,size:[m,h],datatype:p}),N=0;N<h;N++){w[N]=x.length;for(var M=c[N],E=c[N+1],A=M;A<E;A++){var O=u[A],S=o?v(r,s[A]):v(s[A],r);d(S,g)||(x.push(O),y.push(S))}}return w[h]=x.length,b}}},mr=i.extend;var hr={name:"multiply",factory:function(e,r,t,n){var i=L,a=t(Ee),o=t(Ae),s=t(ur),u=t(me),c=t(pr),f=t(ze),l=e.DenseMatrix,p=e.SparseMatrix,m=n("multiply",mr({"Array, Array":function(r,t){h(J.size(r),J.size(t));var n=m(a(r),a(t));return e.isMatrix(n)?n.valueOf():n},"Matrix, Matrix":function(e,r){var t=e.size(),n=r.size();return h(t,n),1===t.length?1===n.length?d(e,r,t[0]):g(e,r):1===n.length?y(e,r):x(e,r)},"Matrix, Array":function(e,r){return m(e,a(r))},"Array, Matrix":function(e,r){return m(a(e,r.storage()),r)},"SparseMatrix, any":function(e,r){return c(e,r,s,!1)},"DenseMatrix, any":function(e,r){return f(e,r,s,!1)},"any, SparseMatrix":function(e,r){return c(r,e,s,!0)},"any, DenseMatrix":function(e,r){return f(r,e,s,!0)},"Array, any":function(e,r){return f(a(e),r,s,!1).valueOf()},"any, Array":function(e,r){return f(a(r),e,s,!0).valueOf()},"any, any":s,"any, any, ...any":function(e,r,t){for(var n=m(e,r),i=0;i<t.length;i++)n=m(n,t[i]);return n}},s.signatures)),h=function(e,r){switch(e.length){case 1:switch(r.length){case 1:if(e[0]!==r[0])throw new RangeError("Dimension mismatch in multiplication. Vectors must have the same length");break;case 2:if(e[0]!==r[0])throw new RangeError("Dimension mismatch in multiplication. Vector length ("+e[0]+") must match Matrix rows ("+r[0]+")");break;default:throw new Error("Can only multiply a 1 or 2 dimensional matrix (Matrix B has "+r.length+" dimensions)")}break;case 2:switch(r.length){case 1:if(e[1]!==r[0])throw new RangeError("Dimension mismatch in multiplication. Matrix columns ("+e[1]+") must match Vector length ("+r[0]+")");break;case 2:if(e[1]!==r[0])throw new RangeError("Dimension mismatch in multiplication. Matrix A columns ("+e[1]+") must match Matrix B rows ("+r[0]+")");break;default:throw new Error("Can only multiply a 1 or 2 dimensional matrix (Matrix B has "+r.length+" dimensions)")}break;default:throw new Error("Can only multiply a 1 or 2 dimensional matrix (Matrix A has "+e.length+" dimensions)")}},d=function(e,r,t){if(0===t)throw new Error("Cannot multiply two empty vectors");var i,a=e._data,u=e._datatype,c=r._data,f=r._datatype,l=o,p=s;u&&f&&u===f&&"string"==typeof u&&(i=u,l=n.find(o,[i,i]),p=n.find(s,[i,i]));for(var m=p(a[0],c[0]),h=1;h<t;h++)m=l(m,p(a[h],c[h]));return m},g=function(e,r){if("dense"!==r.storage())throw new Error("Support for SparseMatrix not implemented");return v(e,r)},v=function(e,r){var t,i=e._data,a=e._size,u=e._datatype,c=r._data,f=r._size,p=r._datatype,m=a[0],h=f[1],d=o,g=s;u&&p&&u===p&&"string"==typeof u&&(t=u,d=n.find(o,[t,t]),g=n.find(s,[t,t]));for(var v=[],y=0;y<h;y++){for(var x=g(i[0],c[0][y]),w=1;w<m;w++)x=d(x,g(i[w],c[w][y]));v[y]=x}return new l({data:v,size:[h],datatype:t})},y=n("_multiplyMatrixVector",{"DenseMatrix, any":function(e,r){var t,i=e._data,a=e._size,u=e._datatype,c=r._data,f=r._datatype,p=a[0],m=a[1],h=o,d=s;u&&f&&u===f&&"string"==typeof u&&(t=u,h=n.find(o,[t,t]),d=n.find(s,[t,t]));for(var g=[],v=0;v<p;v++){for(var y=i[v],x=d(y[0],c[0]),w=1;w<m;w++)x=h(x,d(y[w],c[w]));g[v]=x}return new l({data:g,size:[p],datatype:t})},"SparseMatrix, any":function(e,r){var t=e._values,i=e._index,a=e._ptr,c=e._datatype;if(!t)throw new Error("Cannot multiply Pattern only Matrix times Dense Matrix");var f,l=r._data,m=r._datatype,h=e._size[0],d=r._size[0],g=[],v=[],y=[],x=o,w=s,b=u,N=0;c&&m&&c===m&&"string"==typeof c&&(f=c,x=n.find(o,[f,f]),w=n.find(s,[f,f]),b=n.find(u,[f,f]),N=n.convert(0,f));var M=[],E=[];y[0]=0;for(var A=0;A<d;A++){var O=l[A];if(!b(O,N))for(var S=a[A],_=a[A+1],T=S;T<_;T++){var C=i[T];E[C]?M[C]=x(M[C],w(O,t[T])):(E[C]=!0,v.push(C),M[C]=w(O,t[T]))}}for(var z=v.length,B=0;B<z;B++){var P=v[B];g[B]=M[P]}return y[1]=v.length,new p({values:g,index:v,ptr:y,size:[h,1],datatype:f})}}),x=n("_multiplyMatrixMatrix",{"DenseMatrix, DenseMatrix":function(e,r){var t,i=e._data,a=e._size,u=e._datatype,c=r._data,f=r._size,p=r._datatype,m=a[0],h=a[1],d=f[1],g=o,v=s;u&&p&&u===p&&"string"==typeof u&&(t=u,g=n.find(o,[t,t]),v=n.find(s,[t,t]));for(var y=[],x=0;x<m;x++){var w=i[x];y[x]=[];for(var b=0;b<d;b++){for(var N=v(w[0],c[0][b]),M=1;M<h;M++)N=g(N,v(w[M],c[M][b]));y[x][b]=N}}return new l({data:y,size:[m,d],datatype:t})},"DenseMatrix, SparseMatrix":function(e,r){var t=e._data,i=e._size,a=e._datatype,c=r._values,f=r._index,l=r._ptr,m=r._size,h=r._datatype;if(!c)throw new Error("Cannot multiply Dense Matrix times Pattern only Matrix");var d,g=i[0],v=m[1],y=o,x=s,w=u,b=0;a&&h&&a===h&&"string"==typeof a&&(d=a,y=n.find(o,[d,d]),x=n.find(s,[d,d]),w=n.find(u,[d,d]),b=n.convert(0,d));for(var N=[],M=[],E=[],A=new p({values:N,index:M,ptr:E,size:[g,v],datatype:d}),O=0;O<v;O++){E[O]=M.length;var S=l[O],_=l[O+1];if(_>S)for(var T=0,C=0;C<g;C++){for(var z,B=C+1,P=S;P<_;P++){var I=f[P];T!==B?(z=x(t[C][I],c[P]),T=B):z=y(z,x(t[C][I],c[P]))}T!==B||w(z,b)||(M.push(C),N.push(z))}}return E[v]=M.length,A},"SparseMatrix, DenseMatrix":function(e,r){var t=e._values,i=e._index,a=e._ptr,c=e._datatype;if(!t)throw new Error("Cannot multiply Pattern only Matrix times Dense Matrix");var f,l=r._data,m=r._datatype,h=e._size[0],d=r._size[0],g=r._size[1],v=o,y=s,x=u,w=0;c&&m&&c===m&&"string"==typeof c&&(f=c,v=n.find(o,[f,f]),y=n.find(s,[f,f]),x=n.find(u,[f,f]),w=n.convert(0,f));for(var b=[],N=[],M=[],E=new p({values:b,index:N,ptr:M,size:[h,g],datatype:f}),A=[],O=[],S=0;S<g;S++){M[S]=N.length;for(var _=S+1,T=0;T<d;T++){var C=l[T][S];if(!x(C,w))for(var z=a[T],B=a[T+1],P=z;P<B;P++){var I=i[P];O[I]!==_?(O[I]=_,N.push(I),A[I]=y(C,t[P])):A[I]=v(A[I],y(C,t[P]))}}for(var R=M[S],U=N.length,k=R;k<U;k++){var D=N[k];b[k]=A[D]}}return M[g]=N.length,E},"SparseMatrix, SparseMatrix":function(e,r){var t,i=e._values,a=e._index,u=e._ptr,c=e._datatype,f=r._values,l=r._index,m=r._ptr,h=r._datatype,d=e._size[0],g=r._size[1],v=i&&f,y=o,x=s;c&&h&&c===h&&"string"==typeof c&&(t=c,y=n.find(o,[t,t]),x=n.find(s,[t,t]));for(var w,b,N,M,E,A,O,S,_=v?[]:void 0,T=[],C=[],z=new p({values:_,index:T,ptr:C,size:[d,g],datatype:t}),B=v?[]:void 0,P=[],I=0;I<g;I++){C[I]=T.length;var R=I+1;for(E=m[I],A=m[I+1],M=E;M<A;M++)if(S=l[M],v)for(b=u[S],N=u[S+1],w=b;w<N;w++)O=a[w],P[O]!==R?(P[O]=R,T.push(O),B[O]=x(f[M],i[w])):B[O]=y(B[O],x(f[M],i[w]));else for(b=u[S],N=u[S+1],w=b;w<N;w++)O=a[w],P[O]!==R&&(P[O]=R,T.push(O));if(v)for(var U=C[I],k=T.length,D=U;D<k;D++){var q=T[D];_[D]=B[q]}}return C[g]=T.length,z}});return m.toTex={2:"\\left(${args[0]}"+i.operators.multiply+"${args[1]}\\right)"},m}},dr=o.isInteger,gr=J.size;var vr={name:"pow",factory:function(e,r,t,n){var i=L,a=t(lr),o=t(hr),s=t(Ee),u=t(H),c=t(Ke),f=n("pow",{"number, number":l,"Complex, Complex":function(e,r){return e.pow(r)},"BigNumber, BigNumber":function(t,n){return n.isInteger()||t>=0||r.predictable?t.pow(n):new e.Complex(t.toNumber(),0).pow(n.toNumber(),0)},"Fraction, Fraction":function(e,t){if(1!==t.d){if(r.predictable)throw new Error("Function pow does not support non-integer exponents for fractions.");return l(e.valueOf(),t.valueOf())}return e.pow(t)},"Array, number":p,"Array, BigNumber":function(e,r){return p(e,r.toNumber())},"Matrix, number":m,"Matrix, BigNumber":function(e,r){return m(e,r.toNumber())},"Unit, number":function(e,r){return e.pow(r)}});function l(t,n){if(r.predictable&&!dr(n)&&t<0)try{var i=u(n),a=c(i);if((n===a||Math.abs((n-a)/n)<1e-14)&&i.d%2==1)return(i.n%2==0?1:-1)*Math.pow(-t,n)}catch(e){}return t*t<1&&n===1/0||t*t>1&&n===-1/0?0:r.predictable&&(t<-1&&n===1/0||t>-1&&t<0&&n===-1/0)?NaN:dr(n)||t>=0||r.predictable?Math.pow(t,n):new e.Complex(t,0).pow(n,0)}function p(e,r){if(!dr(r)||r<0)throw new TypeError("For A^b, b must be a positive integer (value is "+r+")");var t=gr(e);if(2!=t.length)throw new Error("For A^b, A must be 2 dimensional (A has "+t.length+" dimensions)");if(t[0]!=t[1])throw new Error("For A^b, A must be square (size is "+t[0]+"x"+t[1]+")");for(var n=a(t[0]).valueOf(),i=e;r>=1;)1==(1&r)&&(n=o(i,n)),r>>=1,i=o(i,i);return n}function m(e,r){return s(p(e.valueOf(),r))}return f.toTex={2:"\\left(${args[0]}\\right)"+i.operators.pow+"{${args[1]}}"},f}};var yr={name:"abs",factory:function(e,r,t,n){var i=n("abs",{number:Math.abs,Complex:function(e){return e.abs()},BigNumber:function(e){return e.abs()},Fraction:function(e){return e.abs()},"Array | Matrix":function(e){return A(e,i,!0)},Unit:function(e){return e.abs()}});return i.toTex={1:"\\left|${args[0]}\\right|"},i}};var xr={name:"fix",factory:function(e,r,t,n){var i=n("fix",{number:function(e){return e>0?Math.floor(e):Math.ceil(e)},Complex:function(r){return new e.Complex(r.re>0?Math.floor(r.re):Math.ceil(r.re),r.im>0?Math.floor(r.im):Math.ceil(r.im))},BigNumber:function(e){return e.isNegative()?e.ceil():e.floor()},Fraction:function(e){return e.s<0?e.ceil():e.floor()},"Array | Matrix":function(e){return A(e,i,!0)}});return i.toTex={1:"\\mathrm{${name}}\\left(${args[0]}\\right)"},i}},wr=o.isInteger,br=J.resize;var Nr={name:"zeros",factory:function(e,r,t,n){var i=t(Ee),a=n("zeros",{"":function(){return"Array"===r.matrix?o([]):o([],"default")},"...number | BigNumber | string":function(e){return"string"==typeof e[e.length-1]?o(e,e.pop()):"Array"===r.matrix?o(e):o(e,"default")},Array:o,Matrix:function(e){var r=e.storage();return o(e.valueOf(),r)},"Array | Matrix, string":function(e,r){return o(e.valueOf(),r)}});return a.toTex=void 0,a;function o(r,t){var n=function(r){var t=!1;return r.forEach(function(r,n,i){e.isBigNumber(r)&&(t=!0,i[n]=r.toNumber())}),t}(r)?new e.BigNumber(0):0;if(function(e){e.forEach(function(e){if("number"!=typeof e||!wr(e)||e<0)throw new Error("Parameters in function zeros must be positive integers")})}(r),t){var a=i(t);return r.length>0?a.resize(r,n):a}var o=[];return r.length>0?br(o,r,n):o}}},Mr=o.isInteger,Er=o.toFixed,Ar="Number of decimals in function round must be an integer";var Or={name:"round",factory:function(e,r,t,n){var i=t(Ee),a=t(me),o=t(Nr),s=t(pr),u=t(ke),c=t(ze),f=n("round",{number:Math.round,"number, number":function(e,r){if(!Mr(r))throw new TypeError(Ar);if(r<0||r>15)throw new Error("Number of decimals in function round must be in te range of 0-15");return parseFloat(Er(e,r))},Complex:function(e){return e.round()},"Complex, number":function(e,r){if(r%1)throw new TypeError(Ar);return e.round(r)},"Complex, BigNumber":function(e,r){if(!r.isInteger())throw new TypeError(Ar);var t=r.toNumber();return e.round(t)},"number, BigNumber":function(r,t){if(!t.isInteger())throw new TypeError(Ar);return new e.BigNumber(r).toDecimalPlaces(t.toNumber())},BigNumber:function(e){return e.toDecimalPlaces(0)},"BigNumber, BigNumber":function(e,r){if(!r.isInteger())throw new TypeError(Ar);return e.toDecimalPlaces(r.toNumber())},Fraction:function(e){return e.round()},"Fraction, number":function(e,r){if(r%1)throw new TypeError(Ar);return e.round(r)},"Array | Matrix":function(e){return A(e,f,!0)},"SparseMatrix, number | BigNumber":function(e,r){return s(e,r,f,!1)},"DenseMatrix, number | BigNumber":function(e,r){return c(e,r,f,!1)},"number | Complex | BigNumber, SparseMatrix":function(e,r){return a(e,0)?o(r.size(),r.storage()):u(r,e,f,!0)},"number | Complex | BigNumber, DenseMatrix":function(e,r){return a(e,0)?o(r.size(),r.storage()):c(r,e,f,!0)},"Array, number | BigNumber":function(e,r){return c(i(e),r,f,!1).valueOf()},"number | Complex | BigNumber, Array":function(e,r){return c(i(r),e,f,!0).valueOf()}});return f.toTex={1:"\\left\\lfloor${args[0]}\\right\\rceil",2:void 0},f}};var Sr={name:"equal",factory:function(e,r,t,n){var i=t(Ee),a=t(me),o=t(Re),s=t(Ue),u=t(ke),c=t(Te),f=t(ze),l=L,p=n("equal",{"any, any":function(e,r){return null===e?null===r:null===r?null===e:void 0===e?void 0===r:void 0===r?void 0===e:a(e,r)},"SparseMatrix, SparseMatrix":function(e,r){return s(e,r,a)},"SparseMatrix, DenseMatrix":function(e,r){return o(r,e,a,!0)},"DenseMatrix, SparseMatrix":function(e,r){return o(e,r,a,!1)},"DenseMatrix, DenseMatrix":function(e,r){return c(e,r,a)},"Array, Array":function(e,r){return p(i(e),i(r)).valueOf()},"Array, Matrix":function(e,r){return p(i(e),r)},"Matrix, Array":function(e,r){return p(e,i(r))},"SparseMatrix, any":function(e,r){return u(e,r,a,!1)},"DenseMatrix, any":function(e,r){return f(e,r,a,!1)},"any, SparseMatrix":function(e,r){return u(r,e,a,!0)},"any, DenseMatrix":function(e,r){return f(r,e,a,!0)},"Array, any":function(e,r){return f(i(e),r,a,!1).valueOf()},"any, Array":function(e,r){return f(i(r),e,a,!0).valueOf()}});return p.toTex={2:"\\left(${args[0]}"+l.operators.equal+"${args[1]}\\right)"},p}};var _r={name:"isNumeric",factory:function(e,r,t,n){var i=n("isNumeric",{"number | BigNumber | Fraction | boolean":function(){return!0},"Complex | Unit | string":function(){return!1},"Array | Matrix":function(e){return A(e,i)}});return i}};var Tr={name:"format",factory:function(e,r,t,n){var i=n("format",{any:T.format,"any, Object | function | number":T.format});return i.toTex=void 0,i}};var Cr={name:"typeof",factory:function(e,r,t,n){var i=n("_typeof",{any:function(r){var t=typeof r;return"object"===t?null===r?"null":Array.isArray(r)?"Array":r instanceof Date?"Date":r instanceof RegExp?"RegExp":r instanceof Boolean?"boolean":r instanceof Number?"number":r instanceof String?"string":e.isBigNumber(r)?"BigNumber":e.isComplex(r)?"Complex":e.isFraction(r)?"Fraction":e.isMatrix(r)?"Matrix":e.isUnit(r)?"Unit":e.isIndex(r)?"Index":e.isRange(r)?"Range":e.isResultSet(r)?"ResultSet":e.isNode(r)?r.type:e.isChain(r)?"Chain":e.isHelp(r)?"Help":"Object":"function"===t?"Function":t}});return i.toTex=void 0,i}},zr=T.endsWith,Br=i.clone;var Pr={name:"Unit",path:"type",factory:function(e,r,t,n,i){var a,o,s,u=t(Ae),c=t(sr),f=t(ur),l=t(cr),p=t(vr),m=t(yr),h=t(xr),d=t(Or),g=t(Sr),v=t(_r),y=t(Tr),x=t(Cr),w=t(Ke),b=t(U);function N(r,t){if(!(this instanceof N))throw new Error("Constructor must be called with the new operator");if(void 0!=r&&!v(r)&&!e.isComplex(r))throw new TypeError("First parameter in Unit constructor must be number, BigNumber, Fraction, Complex, or undefined");if(void 0!=t&&("string"!=typeof t||""===t))throw new TypeError("Second parameter in Unit constructor must be a string");if(void 0!=t){var n=N.parse(t);this.units=n.units,this.dimensions=n.dimensions}else{this.units=[{unit:k,prefix:B.NONE,power:0}],this.dimensions=[];for(var i=0;i<I.length;i++)this.dimensions[i]=0}this.value=void 0!=r?this._normalize(r):null,this.fixPrefix=!1,this.isUnitListSimplified=!0}function M(){for(;" "==s||"\t"==s;)A()}function E(e){return e>="0"&&e<="9"}function A(){o++,s=a.charAt(o)}function O(e){o=e,s=a.charAt(o)}function S(){var e,r="";if(e=o,"+"==s?A():"-"==s&&(r+=s,A()),!function(e){return e>="0"&&e<="9"||"."==e}(s))return O(e),null;if("."==s){if(r+=s,A(),!E(s))return O(e),null}else{for(;E(s);)r+=s,A();"."==s&&(r+=s,A())}for(;E(s);)r+=s,A();if("E"==s||"e"==s){var t="",n=o;if(t+=s,A(),"+"!=s&&"-"!=s||(t+=s,A()),!E(s))return O(n),r;for(r+=t;E(s);)r+=s,A()}return r}function _(){for(var e="",r=a.charCodeAt(o);r>=48&&r<=57||r>=65&&r<=90||r>=97&&r<=122;)e+=s,A(),r=a.charCodeAt(o);return((r=e.charCodeAt(0))>=65&&r<=90||r>=97&&r<=122)&&e||null}function T(e){return s===e?(A(),e):null}function C(e){if(D.hasOwnProperty(e))return{unit:n=D[e],prefix:t=n.prefixes[""]};for(var r in D)if(D.hasOwnProperty(r)&&zr(e,r)){var t,n=D[r],i=e.length-r.length,a=e.substring(0,i);if(void 0!==(t=n.prefixes.hasOwnProperty(a)?n.prefixes[a]:void 0))return{unit:n,prefix:t}}return null}N.prototype.type="Unit",N.prototype.isUnit=!0,N.parse=function(t,n){if(n=n||{},o=-1,s="","string"!=typeof(a=t))throw new TypeError("Invalid argument in Unit.parse, string expected");var i=new N;i.units=[];var u=1,c=!1;A(),M();var f=S(),l=null;f&&(l="BigNumber"===r.number?new e.BigNumber(f):"Fraction"===r.number?new e.Fraction(f):parseFloat(f),M(),T("*")?(u=1,c=!0):T("/")&&(u=-1,c=!0));for(var p=[],m=1;;){for(M();"("===s;)p.push(u),m*=u,u=1,A(),M();if(!s)break;var h=s,d=_();if(null==d)throw new SyntaxError('Unexpected "'+h+'" in "'+a+'" at index '+o.toString());var g=C(d);if(null==g)throw new SyntaxError('Unit "'+d+'" not found.');var v=u*m;if(M(),T("^")){M();var y=S();if(null==y)throw new SyntaxError('In "'+t+'", "^" must be followed by a floating-point number');v*=y}i.units.push({unit:g.unit,prefix:g.prefix,power:v});for(var x=0;x<I.length;x++)i.dimensions[x]+=(g.unit.dimensions[x]||0)*v;for(M();")"===s;){if(0===p.length)throw new SyntaxError('Unmatched ")" in "'+a+'" at index '+o.toString());m/=p.pop(),A(),M()}if(c=!1,T("*")?(u=1,c=!0):T("/")?(u=-1,c=!0):u=1,g.unit.base){var w=g.unit.base.key;F.auto[w]={unit:g.unit,prefix:g.prefix}}}if(M(),s)throw new SyntaxError('Could not parse: "'+t+'"');if(c)throw new SyntaxError('Trailing characters: "'+t+'"');if(0!==p.length)throw new SyntaxError('Unmatched "(" in "'+a+'"');if(0==i.units.length&&!n.allowNoUnits)throw new SyntaxError('"'+t+'" contains no units');return i.value=void 0!=l?i._normalize(l):null,i},N.prototype.clone=function(){var e=new N;e.fixPrefix=this.fixPrefix,e.isUnitListSimplified=this.isUnitListSimplified,e.value=Br(this.value),e.dimensions=this.dimensions.slice(0),e.units=[];for(var r=0;r<this.units.length;r++)for(var t in e.units[r]={},this.units[r])this.units[r].hasOwnProperty(t)&&(e.units[r][t]=this.units[r][t]);return e},N.prototype._isDerived=function(){return 0!==this.units.length&&(this.units.length>1||Math.abs(this.units[0].power-1)>1e-15)},N.prototype._normalize=function(e){var r,t,n,i,a;if(null==e||0===this.units.length)return e;if(this._isDerived()){var o=e;a=N._getNumberConverter(x(e));for(var s=0;s<this.units.length;s++)r=a(this.units[s].unit.value),i=a(this.units[s].prefix.value),n=a(this.units[s].power),o=f(o,p(f(r,i),n));return o}return r=(a=N._getNumberConverter(x(e)))(this.units[0].unit.value),t=a(this.units[0].unit.offset),i=a(this.units[0].prefix.value),f(u(e,t),f(r,i))},N.prototype._denormalize=function(e,r){var t,n,i,a,o;if(null==e||0===this.units.length)return e;if(this._isDerived()){var s=e;o=N._getNumberConverter(x(e));for(var u=0;u<this.units.length;u++)t=o(this.units[u].unit.value),a=o(this.units[u].prefix.value),i=o(this.units[u].power),s=l(s,p(f(t,a),i));return s}return t=(o=N._getNumberConverter(x(e)))(this.units[0].unit.value),a=o(this.units[0].prefix.value),n=o(this.units[0].unit.offset),c(l(l(e,t),void 0==r?a:r),n)},N.isValuelessUnit=function(e){return null!=C(e)},N.prototype.hasBase=function(e){if("string"==typeof e&&(e=R[e]),!e)return!1;for(var r=0;r<I.length;r++)if(Math.abs((this.dimensions[r]||0)-(e.dimensions[r]||0))>1e-12)return!1;return!0},N.prototype.equalBase=function(e){for(var r=0;r<I.length;r++)if(Math.abs((this.dimensions[r]||0)-(e.dimensions[r]||0))>1e-12)return!1;return!0},N.prototype.equals=function(e){return this.equalBase(e)&&g(this.value,e.value)},N.prototype.multiply=function(e){for(var r=this.clone(),t=0;t<I.length;t++)r.dimensions[t]=(this.dimensions[t]||0)+(e.dimensions[t]||0);for(t=0;t<e.units.length;t++){var n={};for(var i in e.units[t])n[i]=e.units[t][i];r.units.push(n)}if(null!=this.value||null!=e.value){var a=null==this.value?this._normalize(1):this.value,o=null==e.value?e._normalize(1):e.value;r.value=f(a,o)}else r.value=null;return r.isUnitListSimplified=!1,z(r)},N.prototype.divide=function(e){for(var r=this.clone(),t=0;t<I.length;t++)r.dimensions[t]=(this.dimensions[t]||0)-(e.dimensions[t]||0);for(t=0;t<e.units.length;t++){var n={};for(var i in e.units[t])n[i]=e.units[t][i];n.power=-n.power,r.units.push(n)}if(null!=this.value||null!=e.value){var a=null==this.value?this._normalize(1):this.value,o=null==e.value?e._normalize(1):e.value;r.value=l(a,o)}else r.value=null;return r.isUnitListSimplified=!1,z(r)},N.prototype.pow=function(e){for(var r=this.clone(),t=0;t<I.length;t++)r.dimensions[t]=(this.dimensions[t]||0)*e;for(t=0;t<r.units.length;t++)r.units[t].power*=e;return null!=r.value?r.value=p(r.value,e):r.value=null,r.isUnitListSimplified=!1,z(r)};var z=function(e){return e.equalBase(R.NONE)&&null!==e.value&&!r.predictable?e.value:e};N.prototype.abs=function(){var e=this.clone();for(var r in e.value=null!==e.value?m(e.value):null,e.units)"VA"!==e.units[r].unit.name&&"VAR"!==e.units[r].unit.name||(e.units[r].unit=D.W);return e},N.prototype.to=function(r){var t,n=null==this.value?this._normalize(1):this.value;if("string"==typeof r){if(t=N.parse(r),!this.equalBase(t))throw new Error("Units do not match");if(null!==t.value)throw new Error("Cannot convert to a unit with a value");return t.value=Br(n),t.fixPrefix=!0,t.isUnitListSimplified=!0,t}if(e.isUnit(r)){if(!this.equalBase(r))throw new Error("Units do not match");if(null!==r.value)throw new Error("Cannot convert to a unit with a value");return(t=r.clone()).value=Br(n),t.fixPrefix=!0,t.isUnitListSimplified=!0,t}throw new Error("String or Unit expected as parameter")},N.prototype.toNumber=function(e){return w(this.toNumeric(e))},N.prototype.toNumeric=function(e){var r=this;return e&&(r=this.to(e)),r.simplifyUnitListLazy(),r._isDerived()?r._denormalize(r.value):r._denormalize(r.value,r.units[0].prefix.value)},N.prototype.toString=function(){return this.format()},N.prototype.toJSON=function(){return{mathjs:"Unit",value:this._denormalize(this.value),unit:this.formatUnits(),fixPrefix:this.fixPrefix}},N.fromJSON=function(e){var r=new N(e.value,e.unit);return r.fixPrefix=e.fixPrefix||!1,r},N.prototype.valueOf=N.prototype.toString,N.prototype.simplifyUnitListLazy=function(){if(!this.isUnitListSimplified&&null!=this.value){var e,r,t=[];for(var n in j)if(this.hasBase(R[n])){e=n;break}if("NONE"===e)this.units=[];else if(e&&j.hasOwnProperty(e)&&(r=j[e]),r)this.units=[{unit:r.unit,prefix:r.prefix,power:1}];else{for(var i=!1,a=0;a<I.length;a++){var o=I[a];Math.abs(this.dimensions[a]||0)>1e-12&&(j.hasOwnProperty(o)?t.push({unit:j[o].unit,prefix:j[o].prefix,power:this.dimensions[a]||0}):i=!0)}t.length<this.units.length&&!i&&(this.units=t)}this.isUnitListSimplified=!0}},N.prototype.toSI=function(){for(var e=this.clone(),r=[],t=0;t<I.length;t++){var n=I[t];if(Math.abs(e.dimensions[t]||0)>1e-12){if(!F.si.hasOwnProperty(n))throw new Error("Cannot express custom unit "+n+" in SI units");r.push({unit:F.si[n].unit,prefix:F.si[n].prefix,power:e.dimensions[t]||0})}}return e.units=r,e.isUnitListSimplified=!0,e},N.prototype.formatUnits=function(){this.simplifyUnitListLazy();for(var e="",r="",t=0,n=0,i=0;i<this.units.length;i++)this.units[i].power>0?(t++,e+=" "+this.units[i].prefix.name+this.units[i].unit.name,Math.abs(this.units[i].power-1)>1e-15&&(e+="^"+this.units[i].power)):this.units[i].power<0&&n++;if(n>0)for(i=0;i<this.units.length;i++)this.units[i].power<0&&(t>0?(r+=" "+this.units[i].prefix.name+this.units[i].unit.name,Math.abs(this.units[i].power+1)>1e-15&&(r+="^"+-this.units[i].power)):(r+=" "+this.units[i].prefix.name+this.units[i].unit.name,r+="^"+this.units[i].power));e=e.substr(1),r=r.substr(1),t>1&&n>0&&(e="("+e+")"),n>1&&t>0&&(r="("+r+")");var a=e;return t>0&&n>0&&(a+=" / "),a+=r},N.prototype.format=function(r){this.simplifyUnitListLazy();var t=!1;for(var n in void 0!==this.value&&null!==this.value&&e.isComplex(this.value)&&(t=Math.abs(this.value.re)<1e-14,Math.abs(this.value.im)),this.units)this.units[n].unit&&("VA"===this.units[n].unit.name&&t?this.units[n].unit=D.VAR:"VAR"!==this.units[n].unit.name||t||(this.units[n].unit=D.VA));1!==this.units.length||this.fixPrefix||Math.abs(this.units[0].power-Math.round(this.units[0].power))<1e-14&&(this.units[0].prefix=this._bestPrefix());var i=this._denormalize(this.value),a=null!==this.value?y(i,r||{}):"",o=this.formatUnits();return this.value&&e.isComplex(this.value)&&(a="("+a+")"),o.length>0&&a.length>0&&(a+=" "),a+=o},N.prototype._bestPrefix=function(){if(1!==this.units.length)throw new Error("Can only compute the best prefix for single units with integer powers, like kg, s^2, N^-1, and so forth!");if(Math.abs(this.units[0].power-Math.round(this.units[0].power))>=1e-14)throw new Error("Can only compute the best prefix for single units with integer powers, like kg, s^2, N^-1, and so forth!");var e=null!==this.value?m(this.value):0,r=m(this.units[0].unit.value),t=this.units[0].prefix;if(0===e)return t;var n=this.units[0].power,i=Math.log(e/Math.pow(t.value*r,n))/Math.LN10-1.2;if(i>-2.200001&&i<1.800001)return t;i=Math.abs(i);var a=this.units[0].unit.prefixes;for(var o in a)if(a.hasOwnProperty(o)){var s=a[o];if(s.scientific){var u=Math.abs(Math.log(e/Math.pow(s.value*r,n))/Math.LN10-1.2);(u<i||u===i&&s.name.length<t.name.length)&&(t=s,i=u)}}return t},N.prototype.splitUnit=function(e){for(var r=this.clone(),t=[],n=0;n<e.length&&(r=r.to(e[n]),n!=e.length-1);n++){var i=r.toNumeric(),a=d(i),o=new N(g(a,i)?a:h(r.toNumeric()),e[n].toString());t.push(o),r=c(r,o)}var s=0;for(n=0;n<t.length;n++)s=u(s,t[n].value);return g(s,this.value)&&(r.value=0),t.push(r),t};var B={NONE:{"":{name:"",value:1,scientific:!0}},SHORT:{"":{name:"",value:1,scientific:!0},da:{name:"da",value:10,scientific:!1},h:{name:"h",value:100,scientific:!1},k:{name:"k",value:1e3,scientific:!0},M:{name:"M",value:1e6,scientific:!0},G:{name:"G",value:1e9,scientific:!0},T:{name:"T",value:1e12,scientific:!0},P:{name:"P",value:1e15,scientific:!0},E:{name:"E",value:1e18,scientific:!0},Z:{name:"Z",value:1e21,scientific:!0},Y:{name:"Y",value:1e24,scientific:!0},d:{name:"d",value:.1,scientific:!1},c:{name:"c",value:.01,scientific:!1},m:{name:"m",value:.001,scientific:!0},u:{name:"u",value:1e-6,scientific:!0},n:{name:"n",value:1e-9,scientific:!0},p:{name:"p",value:1e-12,scientific:!0},f:{name:"f",value:1e-15,scientific:!0},a:{name:"a",value:1e-18,scientific:!0},z:{name:"z",value:1e-21,scientific:!0},y:{name:"y",value:1e-24,scientific:!0}},LONG:{"":{name:"",value:1,scientific:!0},deca:{name:"deca",value:10,scientific:!1},hecto:{name:"hecto",value:100,scientific:!1},kilo:{name:"kilo",value:1e3,scientific:!0},mega:{name:"mega",value:1e6,scientific:!0},giga:{name:"giga",value:1e9,scientific:!0},tera:{name:"tera",value:1e12,scientific:!0},peta:{name:"peta",value:1e15,scientific:!0},exa:{name:"exa",value:1e18,scientific:!0},zetta:{name:"zetta",value:1e21,scientific:!0},yotta:{name:"yotta",value:1e24,scientific:!0},deci:{name:"deci",value:.1,scientific:!1},centi:{name:"centi",value:.01,scientific:!1},milli:{name:"milli",value:.001,scientific:!0},micro:{name:"micro",value:1e-6,scientific:!0},nano:{name:"nano",value:1e-9,scientific:!0},pico:{name:"pico",value:1e-12,scientific:!0},femto:{name:"femto",value:1e-15,scientific:!0},atto:{name:"atto",value:1e-18,scientific:!0},zepto:{name:"zepto",value:1e-21,scientific:!0},yocto:{name:"yocto",value:1e-24,scientific:!0}},SQUARED:{"":{name:"",value:1,scientific:!0},da:{name:"da",value:100,scientific:!1},h:{name:"h",value:1e4,scientific:!1},k:{name:"k",value:1e6,scientific:!0},M:{name:"M",value:1e12,scientific:!0},G:{name:"G",value:1e18,scientific:!0},T:{name:"T",value:1e24,scientific:!0},P:{name:"P",value:1e30,scientific:!0},E:{name:"E",value:1e36,scientific:!0},Z:{name:"Z",value:1e42,scientific:!0},Y:{name:"Y",value:1e48,scientific:!0},d:{name:"d",value:.01,scientific:!1},c:{name:"c",value:1e-4,scientific:!1},m:{name:"m",value:1e-6,scientific:!0},u:{name:"u",value:1e-12,scientific:!0},n:{name:"n",value:1e-18,scientific:!0},p:{name:"p",value:1e-24,scientific:!0},f:{name:"f",value:1e-30,scientific:!0},a:{name:"a",value:1e-36,scientific:!0},z:{name:"z",value:1e-42,scientific:!0},y:{name:"y",value:1e-48,scientific:!0}},CUBIC:{"":{name:"",value:1,scientific:!0},da:{name:"da",value:1e3,scientific:!1},h:{name:"h",value:1e6,scientific:!1},k:{name:"k",value:1e9,scientific:!0},M:{name:"M",value:1e18,scientific:!0},G:{name:"G",value:1e27,scientific:!0},T:{name:"T",value:1e36,scientific:!0},P:{name:"P",value:1e45,scientific:!0},E:{name:"E",value:1e54,scientific:!0},Z:{name:"Z",value:1e63,scientific:!0},Y:{name:"Y",value:1e72,scientific:!0},d:{name:"d",value:.001,scientific:!1},c:{name:"c",value:1e-6,scientific:!1},m:{name:"m",value:1e-9,scientific:!0},u:{name:"u",value:1e-18,scientific:!0},n:{name:"n",value:1e-27,scientific:!0},p:{name:"p",value:1e-36,scientific:!0},f:{name:"f",value:1e-45,scientific:!0},a:{name:"a",value:1e-54,scientific:!0},z:{name:"z",value:1e-63,scientific:!0},y:{name:"y",value:1e-72,scientific:!0}},BINARY_SHORT:{"":{name:"",value:1,scientific:!0},k:{name:"k",value:1e3,scientific:!0},M:{name:"M",value:1e6,scientific:!0},G:{name:"G",value:1e9,scientific:!0},T:{name:"T",value:1e12,scientific:!0},P:{name:"P",value:1e15,scientific:!0},E:{name:"E",value:1e18,scientific:!0},Z:{name:"Z",value:1e21,scientific:!0},Y:{name:"Y",value:1e24,scientific:!0},Ki:{name:"Ki",value:1024,scientific:!0},Mi:{name:"Mi",value:Math.pow(1024,2),scientific:!0},Gi:{name:"Gi",value:Math.pow(1024,3),scientific:!0},Ti:{name:"Ti",value:Math.pow(1024,4),scientific:!0},Pi:{name:"Pi",value:Math.pow(1024,5),scientific:!0},Ei:{name:"Ei",value:Math.pow(1024,6),scientific:!0},Zi:{name:"Zi",value:Math.pow(1024,7),scientific:!0},Yi:{name:"Yi",value:Math.pow(1024,8),scientific:!0}},BINARY_LONG:{"":{name:"",value:1,scientific:!0},kilo:{name:"kilo",value:1e3,scientific:!0},mega:{name:"mega",value:1e6,scientific:!0},giga:{name:"giga",value:1e9,scientific:!0},tera:{name:"tera",value:1e12,scientific:!0},peta:{name:"peta",value:1e15,scientific:!0},exa:{name:"exa",value:1e18,scientific:!0},zetta:{name:"zetta",value:1e21,scientific:!0},yotta:{name:"yotta",value:1e24,scientific:!0},kibi:{name:"kibi",value:1024,scientific:!0},mebi:{name:"mebi",value:Math.pow(1024,2),scientific:!0},gibi:{name:"gibi",value:Math.pow(1024,3),scientific:!0},tebi:{name:"tebi",value:Math.pow(1024,4),scientific:!0},pebi:{name:"pebi",value:Math.pow(1024,5),scientific:!0},exi:{name:"exi",value:Math.pow(1024,6),scientific:!0},zebi:{name:"zebi",value:Math.pow(1024,7),scientific:!0},yobi:{name:"yobi",value:Math.pow(1024,8),scientific:!0}},BTU:{"":{name:"",value:1,scientific:!0},MM:{name:"MM",value:1e6,scientific:!0}},SHORTLONG:{}};for(var P in B.SHORT)B.SHORT.hasOwnProperty(P)&&(B.SHORTLONG[P]=B.SHORT[P]);for(var P in B.LONG)B.LONG.hasOwnProperty(P)&&(B.SHORTLONG[P]=B.LONG[P]);var I=["MASS","LENGTH","TIME","CURRENT","TEMPERATURE","LUMINOUS_INTENSITY","AMOUNT_OF_SUBSTANCE","ANGLE","BIT"],R={NONE:{dimensions:[0,0,0,0,0,0,0,0,0]},MASS:{dimensions:[1,0,0,0,0,0,0,0,0]},LENGTH:{dimensions:[0,1,0,0,0,0,0,0,0]},TIME:{dimensions:[0,0,1,0,0,0,0,0,0]},CURRENT:{dimensions:[0,0,0,1,0,0,0,0,0]},TEMPERATURE:{dimensions:[0,0,0,0,1,0,0,0,0]},LUMINOUS_INTENSITY:{dimensions:[0,0,0,0,0,1,0,0,0]},AMOUNT_OF_SUBSTANCE:{dimensions:[0,0,0,0,0,0,1,0,0]},FORCE:{dimensions:[1,1,-2,0,0,0,0,0,0]},SURFACE:{dimensions:[0,2,0,0,0,0,0,0,0]},VOLUME:{dimensions:[0,3,0,0,0,0,0,0,0]},ENERGY:{dimensions:[1,2,-2,0,0,0,0,0,0]},POWER:{dimensions:[1,2,-3,0,0,0,0,0,0]},PRESSURE:{dimensions:[1,-1,-2,0,0,0,0,0,0]},ELECTRIC_CHARGE:{dimensions:[0,0,1,1,0,0,0,0,0]},ELECTRIC_CAPACITANCE:{dimensions:[-1,-2,4,2,0,0,0,0,0]},ELECTRIC_POTENTIAL:{dimensions:[1,2,-3,-1,0,0,0,0,0]},ELECTRIC_RESISTANCE:{dimensions:[1,2,-3,-2,0,0,0,0,0]},ELECTRIC_INDUCTANCE:{dimensions:[1,2,-2,-2,0,0,0,0,0]},ELECTRIC_CONDUCTANCE:{dimensions:[-1,-2,3,2,0,0,0,0,0]},MAGNETIC_FLUX:{dimensions:[1,2,-2,-1,0,0,0,0,0]},MAGNETIC_FLUX_DENSITY:{dimensions:[1,0,-2,-1,0,0,0,0,0]},FREQUENCY:{dimensions:[0,0,-1,0,0,0,0,0,0]},ANGLE:{dimensions:[0,0,0,0,0,0,0,1,0]},BIT:{dimensions:[0,0,0,0,0,0,0,0,1]}};for(var P in R)R[P].key=P;var k={name:"",base:{},value:1,offset:0,dimensions:[0,0,0,0,0,0,0,0,0]},D={meter:{name:"meter",base:R.LENGTH,prefixes:B.LONG,value:1,offset:0},inch:{name:"inch",base:R.LENGTH,prefixes:B.NONE,value:.0254,offset:0},foot:{name:"foot",base:R.LENGTH,prefixes:B.NONE,value:.3048,offset:0},yard:{name:"yard",base:R.LENGTH,prefixes:B.NONE,value:.9144,offset:0},mile:{name:"mile",base:R.LENGTH,prefixes:B.NONE,value:1609.344,offset:0},link:{name:"link",base:R.LENGTH,prefixes:B.NONE,value:.201168,offset:0},rod:{name:"rod",base:R.LENGTH,prefixes:B.NONE,value:5.02921,offset:0},chain:{name:"chain",base:R.LENGTH,prefixes:B.NONE,value:20.1168,offset:0},angstrom:{name:"angstrom",base:R.LENGTH,prefixes:B.NONE,value:1e-10,offset:0},m:{name:"m",base:R.LENGTH,prefixes:B.SHORT,value:1,offset:0},in:{name:"in",base:R.LENGTH,prefixes:B.NONE,value:.0254,offset:0},ft:{name:"ft",base:R.LENGTH,prefixes:B.NONE,value:.3048,offset:0},yd:{name:"yd",base:R.LENGTH,prefixes:B.NONE,value:.9144,offset:0},mi:{name:"mi",base:R.LENGTH,prefixes:B.NONE,value:1609.344,offset:0},li:{name:"li",base:R.LENGTH,prefixes:B.NONE,value:.201168,offset:0},rd:{name:"rd",base:R.LENGTH,prefixes:B.NONE,value:5.02921,offset:0},ch:{name:"ch",base:R.LENGTH,prefixes:B.NONE,value:20.1168,offset:0},mil:{name:"mil",base:R.LENGTH,prefixes:B.NONE,value:254e-7,offset:0},m2:{name:"m2",base:R.SURFACE,prefixes:B.SQUARED,value:1,offset:0},sqin:{name:"sqin",base:R.SURFACE,prefixes:B.NONE,value:64516e-8,offset:0},sqft:{name:"sqft",base:R.SURFACE,prefixes:B.NONE,value:.09290304,offset:0},sqyd:{name:"sqyd",base:R.SURFACE,prefixes:B.NONE,value:.83612736,offset:0},sqmi:{name:"sqmi",base:R.SURFACE,prefixes:B.NONE,value:2589988.110336,offset:0},sqrd:{name:"sqrd",base:R.SURFACE,prefixes:B.NONE,value:25.29295,offset:0},sqch:{name:"sqch",base:R.SURFACE,prefixes:B.NONE,value:404.6873,offset:0},sqmil:{name:"sqmil",base:R.SURFACE,prefixes:B.NONE,value:6.4516e-10,offset:0},acre:{name:"acre",base:R.SURFACE,prefixes:B.NONE,value:4046.86,offset:0},hectare:{name:"hectare",base:R.SURFACE,prefixes:B.NONE,value:1e4,offset:0},m3:{name:"m3",base:R.VOLUME,prefixes:B.CUBIC,value:1,offset:0},L:{name:"L",base:R.VOLUME,prefixes:B.SHORT,value:.001,offset:0},l:{name:"l",base:R.VOLUME,prefixes:B.SHORT,value:.001,offset:0},litre:{name:"litre",base:R.VOLUME,prefixes:B.LONG,value:.001,offset:0},cuin:{name:"cuin",base:R.VOLUME,prefixes:B.NONE,value:16387064e-12,offset:0},cuft:{name:"cuft",base:R.VOLUME,prefixes:B.NONE,value:.028316846592,offset:0},cuyd:{name:"cuyd",base:R.VOLUME,prefixes:B.NONE,value:.764554857984,offset:0},teaspoon:{name:"teaspoon",base:R.VOLUME,prefixes:B.NONE,value:5e-6,offset:0},tablespoon:{name:"tablespoon",base:R.VOLUME,prefixes:B.NONE,value:15e-6,offset:0},drop:{name:"drop",base:R.VOLUME,prefixes:B.NONE,value:5e-8,offset:0},gtt:{name:"gtt",base:R.VOLUME,prefixes:B.NONE,value:5e-8,offset:0},minim:{name:"minim",base:R.VOLUME,prefixes:B.NONE,value:6.161152e-8,offset:0},fluiddram:{name:"fluiddram",base:R.VOLUME,prefixes:B.NONE,value:36966911e-13,offset:0},fluidounce:{name:"fluidounce",base:R.VOLUME,prefixes:B.NONE,value:2957353e-11,offset:0},gill:{name:"gill",base:R.VOLUME,prefixes:B.NONE,value:.0001182941,offset:0},cc:{name:"cc",base:R.VOLUME,prefixes:B.NONE,value:1e-6,offset:0},cup:{name:"cup",base:R.VOLUME,prefixes:B.NONE,value:.0002365882,offset:0},pint:{name:"pint",base:R.VOLUME,prefixes:B.NONE,value:.0004731765,offset:0},quart:{name:"quart",base:R.VOLUME,prefixes:B.NONE,value:.0009463529,offset:0},gallon:{name:"gallon",base:R.VOLUME,prefixes:B.NONE,value:.003785412,offset:0},beerbarrel:{name:"beerbarrel",base:R.VOLUME,prefixes:B.NONE,value:.1173478,offset:0},oilbarrel:{name:"oilbarrel",base:R.VOLUME,prefixes:B.NONE,value:.1589873,offset:0},hogshead:{name:"hogshead",base:R.VOLUME,prefixes:B.NONE,value:.238481,offset:0},fldr:{name:"fldr",base:R.VOLUME,prefixes:B.NONE,value:36966911e-13,offset:0},floz:{name:"floz",base:R.VOLUME,prefixes:B.NONE,value:2957353e-11,offset:0},gi:{name:"gi",base:R.VOLUME,prefixes:B.NONE,value:.0001182941,offset:0},cp:{name:"cp",base:R.VOLUME,prefixes:B.NONE,value:.0002365882,offset:0},pt:{name:"pt",base:R.VOLUME,prefixes:B.NONE,value:.0004731765,offset:0},qt:{name:"qt",base:R.VOLUME,prefixes:B.NONE,value:.0009463529,offset:0},gal:{name:"gal",base:R.VOLUME,prefixes:B.NONE,value:.003785412,offset:0},bbl:{name:"bbl",base:R.VOLUME,prefixes:B.NONE,value:.1173478,offset:0},obl:{name:"obl",base:R.VOLUME,prefixes:B.NONE,value:.1589873,offset:0},g:{name:"g",base:R.MASS,prefixes:B.SHORT,value:.001,offset:0},gram:{name:"gram",base:R.MASS,prefixes:B.LONG,value:.001,offset:0},ton:{name:"ton",base:R.MASS,prefixes:B.SHORT,value:907.18474,offset:0},tonne:{name:"tonne",base:R.MASS,prefixes:B.SHORT,value:1e3,offset:0},grain:{name:"grain",base:R.MASS,prefixes:B.NONE,value:6479891e-11,offset:0},dram:{name:"dram",base:R.MASS,prefixes:B.NONE,value:.0017718451953125,offset:0},ounce:{name:"ounce",base:R.MASS,prefixes:B.NONE,value:.028349523125,offset:0},poundmass:{name:"poundmass",base:R.MASS,prefixes:B.NONE,value:.45359237,offset:0},hundredweight:{name:"hundredweight",base:R.MASS,prefixes:B.NONE,value:45.359237,offset:0},stick:{name:"stick",base:R.MASS,prefixes:B.NONE,value:.115,offset:0},stone:{name:"stone",base:R.MASS,prefixes:B.NONE,value:6.35029318,offset:0},gr:{name:"gr",base:R.MASS,prefixes:B.NONE,value:6479891e-11,offset:0},dr:{name:"dr",base:R.MASS,prefixes:B.NONE,value:.0017718451953125,offset:0},oz:{name:"oz",base:R.MASS,prefixes:B.NONE,value:.028349523125,offset:0},lbm:{name:"lbm",base:R.MASS,prefixes:B.NONE,value:.45359237,offset:0},cwt:{name:"cwt",base:R.MASS,prefixes:B.NONE,value:45.359237,offset:0},s:{name:"s",base:R.TIME,prefixes:B.SHORT,value:1,offset:0},min:{name:"min",base:R.TIME,prefixes:B.NONE,value:60,offset:0},h:{name:"h",base:R.TIME,prefixes:B.NONE,value:3600,offset:0},second:{name:"second",base:R.TIME,prefixes:B.LONG,value:1,offset:0},sec:{name:"sec",base:R.TIME,prefixes:B.LONG,value:1,offset:0},minute:{name:"minute",base:R.TIME,prefixes:B.NONE,value:60,offset:0},hour:{name:"hour",base:R.TIME,prefixes:B.NONE,value:3600,offset:0},day:{name:"day",base:R.TIME,prefixes:B.NONE,value:86400,offset:0},week:{name:"week",base:R.TIME,prefixes:B.NONE,value:604800,offset:0},month:{name:"month",base:R.TIME,prefixes:B.NONE,value:2629800,offset:0},year:{name:"year",base:R.TIME,prefixes:B.NONE,value:31557600,offset:0},decade:{name:"decade",base:R.TIME,prefixes:B.NONE,value:315576e3,offset:0},century:{name:"century",base:R.TIME,prefixes:B.NONE,value:315576e4,offset:0},millennium:{name:"millennium",base:R.TIME,prefixes:B.NONE,value:315576e5,offset:0},hertz:{name:"Hertz",base:R.FREQUENCY,prefixes:B.LONG,value:1,offset:0,reciprocal:!0},Hz:{name:"Hz",base:R.FREQUENCY,prefixes:B.SHORT,value:1,offset:0,reciprocal:!0},rad:{name:"rad",base:R.ANGLE,prefixes:B.SHORT,value:1,offset:0},radian:{name:"radian",base:R.ANGLE,prefixes:B.LONG,value:1,offset:0},deg:{name:"deg",base:R.ANGLE,prefixes:B.SHORT,value:null,offset:0},degree:{name:"degree",base:R.ANGLE,prefixes:B.LONG,value:null,offset:0},grad:{name:"grad",base:R.ANGLE,prefixes:B.SHORT,value:null,offset:0},gradian:{name:"gradian",base:R.ANGLE,prefixes:B.LONG,value:null,offset:0},cycle:{name:"cycle",base:R.ANGLE,prefixes:B.NONE,value:null,offset:0},arcsec:{name:"arcsec",base:R.ANGLE,prefixes:B.NONE,value:null,offset:0},arcmin:{name:"arcmin",base:R.ANGLE,prefixes:B.NONE,value:null,offset:0},A:{name:"A",base:R.CURRENT,prefixes:B.SHORT,value:1,offset:0},ampere:{name:"ampere",base:R.CURRENT,prefixes:B.LONG,value:1,offset:0},K:{name:"K",base:R.TEMPERATURE,prefixes:B.NONE,value:1,offset:0},degC:{name:"degC",base:R.TEMPERATURE,prefixes:B.NONE,value:1,offset:273.15},degF:{name:"degF",base:R.TEMPERATURE,prefixes:B.NONE,value:1/1.8,offset:459.67},degR:{name:"degR",base:R.TEMPERATURE,prefixes:B.NONE,value:1/1.8,offset:0},kelvin:{name:"kelvin",base:R.TEMPERATURE,prefixes:B.NONE,value:1,offset:0},celsius:{name:"celsius",base:R.TEMPERATURE,prefixes:B.NONE,value:1,offset:273.15},fahrenheit:{name:"fahrenheit",base:R.TEMPERATURE,prefixes:B.NONE,value:1/1.8,offset:459.67},rankine:{name:"rankine",base:R.TEMPERATURE,prefixes:B.NONE,value:1/1.8,offset:0},mol:{name:"mol",base:R.AMOUNT_OF_SUBSTANCE,prefixes:B.SHORT,value:1,offset:0},mole:{name:"mole",base:R.AMOUNT_OF_SUBSTANCE,prefixes:B.LONG,value:1,offset:0},cd:{name:"cd",base:R.LUMINOUS_INTENSITY,prefixes:B.NONE,value:1,offset:0},candela:{name:"candela",base:R.LUMINOUS_INTENSITY,prefixes:B.NONE,value:1,offset:0},N:{name:"N",base:R.FORCE,prefixes:B.SHORT,value:1,offset:0},newton:{name:"newton",base:R.FORCE,prefixes:B.LONG,value:1,offset:0},dyn:{name:"dyn",base:R.FORCE,prefixes:B.SHORT,value:1e-5,offset:0},dyne:{name:"dyne",base:R.FORCE,prefixes:B.LONG,value:1e-5,offset:0},lbf:{name:"lbf",base:R.FORCE,prefixes:B.NONE,value:4.4482216152605,offset:0},poundforce:{name:"poundforce",base:R.FORCE,prefixes:B.NONE,value:4.4482216152605,offset:0},kip:{name:"kip",base:R.FORCE,prefixes:B.LONG,value:4448.2216,offset:0},J:{name:"J",base:R.ENERGY,prefixes:B.SHORT,value:1,offset:0},joule:{name:"joule",base:R.ENERGY,prefixes:B.SHORT,value:1,offset:0},erg:{name:"erg",base:R.ENERGY,prefixes:B.NONE,value:1e-7,offset:0},Wh:{name:"Wh",base:R.ENERGY,prefixes:B.SHORT,value:3600,offset:0},BTU:{name:"BTU",base:R.ENERGY,prefixes:B.BTU,value:1055.05585262,offset:0},eV:{name:"eV",base:R.ENERGY,prefixes:B.SHORT,value:1.602176565e-19,offset:0},electronvolt:{name:"electronvolt",base:R.ENERGY,prefixes:B.LONG,value:1.602176565e-19,offset:0},W:{name:"W",base:R.POWER,prefixes:B.SHORT,value:1,offset:0},watt:{name:"watt",base:R.POWER,prefixes:B.LONG,value:1,offset:0},hp:{name:"hp",base:R.POWER,prefixes:B.NONE,value:745.6998715386,offset:0},VAR:{name:"VAR",base:R.POWER,prefixes:B.SHORT,value:b.I,offset:0},VA:{name:"VA",base:R.POWER,prefixes:B.SHORT,value:1,offset:0},Pa:{name:"Pa",base:R.PRESSURE,prefixes:B.SHORT,value:1,offset:0},psi:{name:"psi",base:R.PRESSURE,prefixes:B.NONE,value:6894.75729276459,offset:0},atm:{name:"atm",base:R.PRESSURE,prefixes:B.NONE,value:101325,offset:0},bar:{name:"bar",base:R.PRESSURE,prefixes:B.SHORTLONG,value:1e5,offset:0},torr:{name:"torr",base:R.PRESSURE,prefixes:B.NONE,value:133.322,offset:0},mmHg:{name:"mmHg",base:R.PRESSURE,prefixes:B.NONE,value:133.322,offset:0},mmH2O:{name:"mmH2O",base:R.PRESSURE,prefixes:B.NONE,value:9.80665,offset:0},cmH2O:{name:"cmH2O",base:R.PRESSURE,prefixes:B.NONE,value:98.0665,offset:0},coulomb:{name:"coulomb",base:R.ELECTRIC_CHARGE,prefixes:B.LONG,value:1,offset:0},C:{name:"C",base:R.ELECTRIC_CHARGE,prefixes:B.SHORT,value:1,offset:0},farad:{name:"farad",base:R.ELECTRIC_CAPACITANCE,prefixes:B.LONG,value:1,offset:0},F:{name:"F",base:R.ELECTRIC_CAPACITANCE,prefixes:B.SHORT,value:1,offset:0},volt:{name:"volt",base:R.ELECTRIC_POTENTIAL,prefixes:B.LONG,value:1,offset:0},V:{name:"V",base:R.ELECTRIC_POTENTIAL,prefixes:B.SHORT,value:1,offset:0},ohm:{name:"ohm",base:R.ELECTRIC_RESISTANCE,prefixes:B.SHORTLONG,value:1,offset:0},henry:{name:"henry",base:R.ELECTRIC_INDUCTANCE,prefixes:B.LONG,value:1,offset:0},H:{name:"H",base:R.ELECTRIC_INDUCTANCE,prefixes:B.SHORT,value:1,offset:0},siemens:{name:"siemens",base:R.ELECTRIC_CONDUCTANCE,prefixes:B.LONG,value:1,offset:0},S:{name:"S",base:R.ELECTRIC_CONDUCTANCE,prefixes:B.SHORT,value:1,offset:0},weber:{name:"weber",base:R.MAGNETIC_FLUX,prefixes:B.LONG,value:1,offset:0},Wb:{name:"Wb",base:R.MAGNETIC_FLUX,prefixes:B.SHORT,value:1,offset:0},tesla:{name:"tesla",base:R.MAGNETIC_FLUX_DENSITY,prefixes:B.LONG,value:1,offset:0},T:{name:"T",base:R.MAGNETIC_FLUX_DENSITY,prefixes:B.SHORT,value:1,offset:0},b:{name:"b",base:R.BIT,prefixes:B.BINARY_SHORT,value:1,offset:0},bits:{name:"bits",base:R.BIT,prefixes:B.BINARY_LONG,value:1,offset:0},B:{name:"B",base:R.BIT,prefixes:B.BINARY_SHORT,value:8,offset:0},bytes:{name:"bytes",base:R.BIT,prefixes:B.BINARY_LONG,value:8,offset:0}},q={meters:"meter",inches:"inch",feet:"foot",yards:"yard",miles:"mile",links:"link",rods:"rod",chains:"chain",angstroms:"angstrom",lt:"l",litres:"litre",liter:"litre",liters:"litre",teaspoons:"teaspoon",tablespoons:"tablespoon",minims:"minim",fluiddrams:"fluiddram",fluidounces:"fluidounce",gills:"gill",cups:"cup",pints:"pint",quarts:"quart",gallons:"gallon",beerbarrels:"beerbarrel",oilbarrels:"oilbarrel",hogsheads:"hogshead",gtts:"gtt",grams:"gram",tons:"ton",tonnes:"tonne",grains:"grain",drams:"dram",ounces:"ounce",poundmasses:"poundmass",hundredweights:"hundredweight",sticks:"stick",lb:"lbm",lbs:"lbm",kips:"kip",acres:"acre",hectares:"hectare",sqfeet:"sqft",sqyard:"sqyd",sqmile:"sqmi",sqmiles:"sqmi",mmhg:"mmHg",mmh2o:"mmH2O",cmh2o:"cmH2O",seconds:"second",secs:"second",minutes:"minute",mins:"minute",hours:"hour",hr:"hour",hrs:"hour",days:"day",weeks:"week",months:"month",years:"year",decades:"decade",centuries:"century",millennia:"millennium",hertz:"hertz",radians:"radian",degrees:"degree",gradians:"gradian",cycles:"cycle",arcsecond:"arcsec",arcseconds:"arcsec",arcminute:"arcmin",arcminutes:"arcmin",BTUs:"BTU",watts:"watt",joules:"joule",amperes:"ampere",coulombs:"coulomb",volts:"volt",ohms:"ohm",farads:"farad",webers:"weber",teslas:"tesla",electronvolts:"electronvolt",moles:"mole"};function L(r){if("BigNumber"===r.number){var t=nr.pi(e.BigNumber);D.rad.value=new e.BigNumber(1),D.deg.value=t.div(180),D.grad.value=t.div(200),D.cycle.value=t.times(2),D.arcsec.value=t.div(648e3),D.arcmin.value=t.div(10800)}else D.rad.value=1,D.deg.value=Math.PI/180,D.grad.value=Math.PI/200,D.cycle.value=2*Math.PI,D.arcsec.value=Math.PI/648e3,D.arcmin.value=Math.PI/10800;D.radian.value=D.rad.value,D.degree.value=D.deg.value,D.gradian.value=D.grad.value}L(r),i.on("config",function(e,r){e.number!==r.number&&L(e)});var F={si:{NONE:{unit:k,prefix:B.NONE[""]},LENGTH:{unit:D.m,prefix:B.SHORT[""]},MASS:{unit:D.g,prefix:B.SHORT.k},TIME:{unit:D.s,prefix:B.SHORT[""]},CURRENT:{unit:D.A,prefix:B.SHORT[""]},TEMPERATURE:{unit:D.K,prefix:B.SHORT[""]},LUMINOUS_INTENSITY:{unit:D.cd,prefix:B.SHORT[""]},AMOUNT_OF_SUBSTANCE:{unit:D.mol,prefix:B.SHORT[""]},ANGLE:{unit:D.rad,prefix:B.SHORT[""]},BIT:{unit:D.bit,prefix:B.SHORT[""]},FORCE:{unit:D.N,prefix:B.SHORT[""]},ENERGY:{unit:D.J,prefix:B.SHORT[""]},POWER:{unit:D.W,prefix:B.SHORT[""]},PRESSURE:{unit:D.Pa,prefix:B.SHORT[""]},ELECTRIC_CHARGE:{unit:D.C,prefix:B.SHORT[""]},ELECTRIC_CAPACITANCE:{unit:D.F,prefix:B.SHORT[""]},ELECTRIC_POTENTIAL:{unit:D.V,prefix:B.SHORT[""]},ELECTRIC_RESISTANCE:{unit:D.ohm,prefix:B.SHORT[""]},ELECTRIC_INDUCTANCE:{unit:D.H,prefix:B.SHORT[""]},ELECTRIC_CONDUCTANCE:{unit:D.S,prefix:B.SHORT[""]},MAGNETIC_FLUX:{unit:D.Wb,prefix:B.SHORT[""]},MAGNETIC_FLUX_DENSITY:{unit:D.T,prefix:B.SHORT[""]},FREQUENCY:{unit:D.Hz,prefix:B.SHORT[""]}}};F.cgs=JSON.parse(JSON.stringify(F.si)),F.cgs.LENGTH={unit:D.m,prefix:B.SHORT.c},F.cgs.MASS={unit:D.g,prefix:B.SHORT[""]},F.cgs.FORCE={unit:D.dyn,prefix:B.SHORT[""]},F.cgs.ENERGY={unit:D.erg,prefix:B.NONE[""]},F.us=JSON.parse(JSON.stringify(F.si)),F.us.LENGTH={unit:D.ft,prefix:B.NONE[""]},F.us.MASS={unit:D.lbm,prefix:B.NONE[""]},F.us.TEMPERATURE={unit:D.degF,prefix:B.NONE[""]},F.us.FORCE={unit:D.lbf,prefix:B.NONE[""]},F.us.ENERGY={unit:D.BTU,prefix:B.BTU[""]},F.us.POWER={unit:D.hp,prefix:B.NONE[""]},F.us.PRESSURE={unit:D.psi,prefix:B.NONE[""]},F.auto=JSON.parse(JSON.stringify(F.si));var j=F.auto;for(var P in N.setUnitSystem=function(e){if(!F.hasOwnProperty(e))throw new Error("Unit system "+e+" does not exist. Choices are: "+Object.keys(F).join(", "));j=F[e]},N.getUnitSystem=function(){for(var e in F)if(F[e]===j)return e},N.typeConverters={BigNumber:function(r){return new e.BigNumber(r+"")},Fraction:function(r){return new e.Fraction(r)},Complex:function(e){return e},number:function(e){return e}},N._getNumberConverter=function(e){if(!N.typeConverters[e])throw new TypeError('Unsupported type "'+e+'"');return N.typeConverters[e]},D)($=D[P]).dimensions=$.base.dimensions;for(var H in q)if(q.hasOwnProperty(H)){var $=D[q[H]],G={};for(var P in $)$.hasOwnProperty(P)&&(G[P]=$[P]);G.name=H,D[H]=G}return N.createUnit=function(e,r){if("object"!=typeof e)throw new TypeError("createUnit expects first parameter to be of type 'Object'");if(r&&r.override)for(var t in e)if(e.hasOwnProperty(t)&&N.deleteUnit(t),e[t].aliases)for(var n=0;n<e[t].aliases.length;n++)N.deleteUnit(e[t].aliases[n]);var i;for(var t in e)e.hasOwnProperty(t)&&(i=N.createUnitSingle(t,e[t]));return i},N.createUnitSingle=function(e,r,t){if(void 0!==r&&null!==r||(r={}),"string"!=typeof e)throw new TypeError("createUnitSingle expects first parameter to be of type 'string'");if(D.hasOwnProperty(e))throw new Error('Cannot create unit "'+e+'": a unit with that name already exists');!function(e){for(var r=0;r<e.length;r++){var t=e.charAt(r),n=function(e){return/^[a-zA-Z]$/.test(e)};if(0===r&&!n(t))throw new Error('Invalid unit name (must begin with alpha character): "'+e+'"');if(r>0&&!n(t)&&!function(e){return e>="0"&&e<="9"}(t))throw new Error('Invalid unit name (only alphanumeric characters are allowed): "'+e+'"')}}(e);var n,i,a=null,o=[],s=0;if(r&&"Unit"===r.type)a=r.clone();else if("string"==typeof r)""!==r&&(n=r);else{if("object"!=typeof r)throw new TypeError('Cannot create unit "'+e+'" from "'+r.toString()+'": expecting "string" or "Unit" or "Object"');n=r.definition,i=r.prefixes,s=r.offset,r.aliases&&(o=r.aliases.valueOf())}if(o)for(var u=0;u<o.length;u++)if(D.hasOwnProperty(o[u]))throw new Error('Cannot create alias "'+o[u]+'": a unit with that name already exists');if(n&&"string"==typeof n&&!a)try{a=N.parse(n,{allowNoUnits:!0})}catch(r){throw r.message='Could not create unit "'+e+'" from "'+n+'": '+r.message,r}else n&&"Unit"===n.type&&(a=n.clone());o=o||[],s=s||0,i=i&&i.toUpperCase&&B[i.toUpperCase()]||B.NONE;var c={};if(a){c={name:e,value:a.value,dimensions:a.dimensions.slice(0),prefixes:i,offset:s};var f=!1;for(var u in R)if(R.hasOwnProperty(u)){for(var l=!0,p=0;p<I.length;p++)if(Math.abs((c.dimensions[p]||0)-(R[u].dimensions[p]||0))>1e-12){l=!1;break}if(l){f=!0;break}}f||(m=e+"_STUFF",(d={dimensions:a.dimensions.slice(0)}).key=m,R[m]=d,j[m]={unit:c,prefix:B.NONE[""]},c.base=m)}else{var m=e+"_STUFF";if(I.indexOf(m)>=0)throw new Error('Cannot create new base unit "'+e+'": a base unit with that name already exists (and cannot be overridden)');for(var h in I.push(m),R)R.hasOwnProperty(h)&&(R[h].dimensions[I.length-1]=0);var d={dimensions:[]};for(u=0;u<I.length;u++)d.dimensions[u]=0;d.dimensions[I.length-1]=1,d.key=m,R[m]=d,c={name:e,value:1,dimensions:R[m].dimensions.slice(0),prefixes:i,offset:s,base:m},j[m]={unit:c,prefix:B.NONE[""]}}for(N.UNITS[e]=c,u=0;u<o.length;u++){var g=o[u],v={};for(var y in c)c.hasOwnProperty(y)&&(v[y]=c[y]);v.name=g,N.UNITS[g]=v}return new N(null,e)},N.deleteUnit=function(e){delete N.UNITS[e]},N.PREFIXES=B,N.BASE_DIMENSIONS=I,N.BASE_UNITS=R,N.UNIT_SYSTEMS=F,N.UNITS=D,N},math:!0};var Ir={name:"unit",factory:function(e,r,t,n){var i=n("unit",{Unit:function(e){return e.clone()},string:function(r){return e.Unit.isValuelessUnit(r)?new e.Unit(null,r):e.Unit.parse(r)},"number | BigNumber | Fraction | Complex, string":function(r,t){return new e.Unit(r,t)},"Array | Matrix":function(e){return A(e,i)}});return i.toTex={1:"\\left(${args[0]}\\right)",2:"\\left(\\left(${args[0]}\\right)${args[1]}\\right)"},i}};var Rr={name:"createUnit",factory:function(e,r,t,n){return n("createUnit",{"Object, Object":function(r,t){return e.Unit.createUnit(r,t)},Object:function(r){return e.Unit.createUnit(r,{})},"string, Unit | string | Object, Object":function(r,t,n){var i={};return i[r]=t,e.Unit.createUnit(i,n)},"string, Unit | string | Object":function(r,t){var n={};return n[r]=t,e.Unit.createUnit(n,{})},string:function(r){var t={};return t[r]={},e.Unit.createUnit(t,{})}})}};var Ur={name:"splitUnit",factory:function(e,r,t,n){return n("splitUnit",{"Unit, Array":function(e,r){return e.splitUnit(r)}})}},kr=i.lazy;function Dr(e,r,t){kr(e,r,t),kr(e.expression.mathWithTransform,r,t)}var qr=function(e,r,t,n,i){function a(r){var t=e.Unit.parse(r);return t.fixPrefix=!0,t}Dr(i,"speedOfLight",function(){return a("299792458 m s^-1")}),Dr(i,"gravitationConstant",function(){return a("6.6738480e-11 m^3 kg^-1 s^-2")}),Dr(i,"planckConstant",function(){return a("6.626069311e-34 J s")}),Dr(i,"reducedPlanckConstant",function(){return a("1.05457172647e-34 J s")}),Dr(i,"magneticConstant",function(){return a("1.2566370614e-6 N A^-2")}),Dr(i,"electricConstant",function(){return a("8.854187817e-12 F m^-1")}),Dr(i,"vacuumImpedance",function(){return a("376.730313461 ohm")}),Dr(i,"coulomb",function(){return a("8.9875517873681764e9 N m^2 C^-2")}),Dr(i,"elementaryCharge",function(){return a("1.60217656535e-19 C")}),Dr(i,"bohrMagneton",function(){return a("9.2740096820e-24 J T^-1")}),Dr(i,"conductanceQuantum",function(){return a("7.748091734625e-5 S")}),Dr(i,"inverseConductanceQuantum",function(){return a("12906.403721742 ohm")}),Dr(i,"magneticFluxQuantum",function(){return a("2.06783375846e-15 Wb")}),Dr(i,"nuclearMagneton",function(){return a("5.0507835311e-27 J T^-1")}),Dr(i,"klitzing",function(){return a("25812.807443484 ohm")}),Dr(i,"bohrRadius",function(){return a("5.291772109217e-11 m")}),Dr(i,"classicalElectronRadius",function(){return a("2.817940326727e-15 m")}),Dr(i,"electronMass",function(){return a("9.1093829140e-31 kg")}),Dr(i,"fermiCoupling",function(){return a("1.1663645e-5 GeV^-2")}),Dr(i,"fineStructure",function(){return.007297352569824}),Dr(i,"hartreeEnergy",function(){return a("4.3597443419e-18 J")}),Dr(i,"protonMass",function(){return a("1.67262177774e-27 kg")}),Dr(i,"deuteronMass",function(){return a("3.3435830926e-27 kg")}),Dr(i,"neutronMass",function(){return a("1.6749271613e-27 kg")}),Dr(i,"quantumOfCirculation",function(){return a("3.636947552024e-4 m^2 s^-1")}),Dr(i,"rydberg",function(){return a("10973731.56853955 m^-1")}),Dr(i,"thomsonCrossSection",function(){return a("6.65245873413e-29 m^2")}),Dr(i,"weakMixingAngle",function(){return.222321}),Dr(i,"efimovFactor",function(){return 22.7}),Dr(i,"atomicMass",function(){return a("1.66053892173e-27 kg")}),Dr(i,"avogadro",function(){return a("6.0221412927e23 mol^-1")}),Dr(i,"boltzmann",function(){return a("1.380648813e-23 J K^-1")}),Dr(i,"faraday",function(){return a("96485.336521 C mol^-1")}),Dr(i,"firstRadiation",function(){return a("3.7417715317e-16 W m^2")}),Dr(i,"loschmidt",function(){return a("2.686780524e25 m^-3")}),Dr(i,"gasConstant",function(){return a("8.314462175 J K^-1 mol^-1")}),Dr(i,"molarPlanckConstant",function(){return a("3.990312717628e-10 J s mol^-1")}),Dr(i,"molarVolume",function(){return a("2.241396820e-10 m^3 mol^-1")}),Dr(i,"sackurTetrode",function(){return-1.164870823}),Dr(i,"secondRadiation",function(){return a("1.438777013e-2 m K")}),Dr(i,"stefanBoltzmann",function(){return a("5.67037321e-8 W m^-2 K^-4")}),Dr(i,"wienDisplacement",function(){return a("2.897772126e-3 m K")}),Dr(i,"molarMass",function(){return a("1e-3 kg mol^-1")}),Dr(i,"molarMassC12",function(){return a("1.2e-2 kg mol^-1")}),Dr(i,"gravity",function(){return a("9.80665 m s^-2")}),Dr(i,"planckLength",function(){return a("1.61619997e-35 m")}),Dr(i,"planckMass",function(){return a("2.1765113e-8 kg")}),Dr(i,"planckTime",function(){return a("5.3910632e-44 s")}),Dr(i,"planckCharge",function(){return a("1.87554595641e-18 C")}),Dr(i,"planckTemperature",function(){return a("1.41683385e+32 K")})},Lr=[O,S,B,F,$,Qe,Ke,rr,tr,[Pr,Ir,Rr,Ur,{factory:qr,lazy:!1,math:!0}]],Fr="4.2.2";function jr(e,r,t){e[r]=t,e.expression.mathWithTransform[r]=t}function Hr(e,r,t){i.lazy(e,r,t),i.lazy(e.expression.mathWithTransform,r,t)}var $r={factory:function e(r,t,n,i,a){a.on("config",function(o,s){o.number!==s.number&&e(r,t,n,i,a)}),jr(a,"true",!0),jr(a,"false",!1),jr(a,"null",null),jr(a,"uninitialized","Error: Constant uninitialized is removed since v4.0.0. Use null instead"),"BigNumber"===t.number?(jr(a,"Infinity",new r.BigNumber(1/0)),jr(a,"NaN",new r.BigNumber(NaN)),Hr(a,"pi",function(){return nr.pi(r.BigNumber)}),Hr(a,"tau",function(){return nr.tau(r.BigNumber)}),Hr(a,"e",function(){return nr.e(r.BigNumber)}),Hr(a,"phi",function(){return nr.phi(r.BigNumber)}),Hr(a,"E",function(){return a.e}),Hr(a,"LN2",function(){return new r.BigNumber(2).ln()}),Hr(a,"LN10",function(){return new r.BigNumber(10).ln()}),Hr(a,"LOG2E",function(){return new r.BigNumber(1).div(new r.BigNumber(2).ln())}),Hr(a,"LOG10E",function(){return new r.BigNumber(1).div(new r.BigNumber(10).ln())}),Hr(a,"PI",function(){return a.pi}),Hr(a,"SQRT1_2",function(){return new r.BigNumber("0.5").sqrt()}),Hr(a,"SQRT2",function(){return new r.BigNumber(2).sqrt()})):(jr(a,"Infinity",1/0),jr(a,"NaN",NaN),jr(a,"pi",Math.PI),jr(a,"tau",2*Math.PI),jr(a,"e",Math.E),jr(a,"phi",1.618033988749895),jr(a,"E",a.e),jr(a,"LN2",Math.LN2),jr(a,"LN10",Math.LN10),jr(a,"LOG2E",Math.LOG2E),jr(a,"LOG10E",Math.LOG10E),jr(a,"PI",a.pi),jr(a,"SQRT1_2",Math.SQRT1_2),jr(a,"SQRT2",Math.SQRT2)),jr(a,"i",r.Complex.I),jr(a,"version",Fr)},lazy:!1,math:!0},Gr={name:"bignumber",category:"Construction",syntax:["bignumber(x)"],description:"Create a big number from a number or string.",examples:["0.1 + 0.2","bignumber(0.1) + bignumber(0.2)",'bignumber("7.2")','bignumber("7.2e500")',"bignumber([0.1, 0.2, 0.3])"],seealso:["boolean","complex","fraction","index","matrix","string","unit"]},Vr={name:"boolean",category:"Construction",syntax:["x","boolean(x)"],description:"Convert a string or number into a boolean.",examples:["boolean(0)","boolean(1)","boolean(3)",'boolean("true")','boolean("false")',"boolean([1, 0, 1, 1])"],seealso:["bignumber","complex","index","matrix","number","string","unit"]},Zr={name:"complex",category:"Construction",syntax:["complex()","complex(re, im)","complex(string)"],description:"Create a complex number.",examples:["complex()","complex(2, 3)",'complex("7 - 2i")'],seealso:["bignumber","boolean","index","matrix","number","string","unit"]},Wr={name:"createUnit",category:"Construction",syntax:["createUnit(definitions)","createUnit(name, definition)"],description:"Create a user-defined unit and register it with the Unit type.",examples:['createUnit("foo")','createUnit("knot", {definition: "0.514444444 m/s", aliases: ["knots", "kt", "kts"]})','createUnit("mph", "1 mile/hour")'],seealso:["unit","splitUnit"]},Jr={name:"fraction",category:"Construction",syntax:["fraction(num)","fraction(num,den)"],description:"Create a fraction from a number or from a numerator and denominator.",examples:["fraction(0.125)","fraction(1, 3) + fraction(2, 5)"],seealso:["bignumber","boolean","complex","index","matrix","string","unit"]},Yr={name:"index",category:"Construction",syntax:["[start]","[start:end]","[start:step:end]","[start1, start 2, ...]","[start1:end1, start2:end2, ...]","[start1:step1:end1, start2:step2:end2, ...]"],description:"Create an index to get or replace a subset of a matrix",examples:["[]","[1, 2, 3]","A = [1, 2, 3; 4, 5, 6]","A[1, :]","A[1, 2] = 50","A[0:2, 0:2] = ones(2, 2)"],seealso:["bignumber","boolean","complex","matrix,","number","range","string","unit"]},Xr={name:"matrix",category:"Construction",syntax:["[]","[a1, b1, ...; a2, b2, ...]","matrix()",'matrix("dense")',"matrix([...])"],description:"Create a matrix.",examples:["[]","[1, 2, 3]","[1, 2, 3; 4, 5, 6]","matrix()","matrix([3, 4])",'matrix([3, 4; 5, 6], "sparse")','matrix([3, 4; 5, 6], "sparse", "number")'],seealso:["bignumber","boolean","complex","index","number","string","unit","sparse"]},Qr={name:"number",category:"Construction",syntax:["x","number(x)","number(unit, valuelessUnit)"],description:"Create a number or convert a string or boolean into a number.",examples:["2","2e3","4.05","number(2)",'number("7.2")',"number(true)","number([true, false, true, true])",'number(unit("52cm"), "m")'],seealso:["bignumber","boolean","complex","fraction","index","matrix","string","unit"]},Kr={name:"sparse",category:"Construction",syntax:["sparse()","sparse([a1, b1, ...; a1, b2, ...])",'sparse([a1, b1, ...; a1, b2, ...], "number")'],description:"Create a sparse matrix.",examples:["sparse()","sparse([3, 4; 5, 6])",'sparse([3, 0; 5, 0], "number")'],seealso:["bignumber","boolean","complex","index","number","string","unit","matrix"]},et={name:"splitUnit",category:"Construction",syntax:["splitUnit(unit: Unit, parts: Unit[])"],description:"Split a unit in an array of units whose sum is equal to the original unit.",examples:['splitUnit(1 m, ["feet", "inch"])'],seealso:["unit","createUnit"]},rt={name:"string",category:"Construction",syntax:['"text"',"string(x)"],description:"Create a string or convert a value to a string",examples:['"Hello World!"',"string(4.2)","string(3 + 2i)"],seealso:["bignumber","boolean","complex","index","matrix","number","unit"]},tt={name:"unit",category:"Construction",syntax:["value unit","unit(value, unit)","unit(string)"],description:"Create a unit.",examples:["5.5 mm","3 inch",'unit(7.1, "kilogram")','unit("23 deg")'],seealso:["bignumber","boolean","complex","index","matrix","number","string"]},nt={name:"e",category:"Constants",syntax:["e"],description:"Euler's number, the base of the natural logarithm. Approximately equal to 2.71828",examples:["e","e ^ 2","exp(2)","log(e)"],seealso:["exp"]},it={name:"false",category:"Constants",syntax:["false"],description:"Boolean value false",examples:["false"],seealso:["true"]},at={name:"i",category:"Constants",syntax:["i"],description:"Imaginary unit, defined as i*i=-1. A complex number is described as a + b*i, where a is the real part, and b is the imaginary part.",examples:["i","i * i","sqrt(-1)"],seealso:[]},ot={name:"Infinity",category:"Constants",syntax:["Infinity"],description:"Infinity, a number which is larger than the maximum number that can be handled by a floating point number.",examples:["Infinity","1 / 0"],seealso:[]},st={name:"LN2",category:"Constants",syntax:["LN2"],description:"Returns the natural logarithm of 2, approximately equal to 0.693",examples:["LN2","log(2)"],seealso:[]},ut={name:"LN10",category:"Constants",syntax:["LN10"],description:"Returns the natural logarithm of 10, approximately equal to 2.302",examples:["LN10","log(10)"],seealso:[]},ct={name:"LOG2E",category:"Constants",syntax:["LOG2E"],description:"Returns the base-2 logarithm of E, approximately equal to 1.442",examples:["LOG2E","log(e, 2)"],seealso:[]},ft={name:"LOG10E",category:"Constants",syntax:["LOG10E"],description:"Returns the base-10 logarithm of E, approximately equal to 0.434",examples:["LOG10E","log(e, 10)"],seealso:[]},lt={name:"NaN",category:"Constants",syntax:["NaN"],description:"Not a number",examples:["NaN","0 / 0"],seealso:[]},pt={name:"null",category:"Constants",syntax:["null"],description:"Value null",examples:["null"],seealso:["true","false"]},mt={name:"pi",category:"Constants",syntax:["pi"],description:"The number pi is a mathematical constant that is the ratio of a circle's circumference to its diameter, and is approximately equal to 3.14159",examples:["pi","sin(pi/2)"],seealso:["tau"]},ht={name:"phi",category:"Constants",syntax:["phi"],description:"Phi is the golden ratio. Two quantities are in the golden ratio if their ratio is the same as the ratio of their sum to the larger of the two quantities. Phi is defined as `(1 + sqrt(5)) / 2` and is approximately 1.618034...",examples:["phi"],seealso:[]},dt={name:"SQRT1_2",category:"Constants",syntax:["SQRT1_2"],description:"Returns the square root of 1/2, approximately equal to 0.707",examples:["SQRT1_2","sqrt(1/2)"],seealso:[]},gt={name:"SQRT2",category:"Constants",syntax:["SQRT2"],description:"Returns the square root of 2, approximately equal to 1.414",examples:["SQRT2","sqrt(2)"],seealso:[]},vt={name:"tau",category:"Constants",syntax:["tau"],description:"Tau is the ratio constant of a circle's circumference to radius, equal to 2 * pi, approximately 6.2832.",examples:["tau","2 * pi"],seealso:["pi"]},yt={name:"true",category:"Constants",syntax:["true"],description:"Boolean value true",examples:["true"],seealso:["false"]},xt={name:"version",category:"Constants",syntax:["version"],description:"A string with the version number of math.js",examples:["version"],seealso:[]},wt={name:"derivative",category:"Algebra",syntax:["derivative(expr, variable)","derivative(expr, variable, {simplify: boolean})"],description:"Takes the derivative of an expression expressed in parser Nodes. The derivative will be taken over the supplied variable in the second parameter. If there are multiple variables in the expression, it will return a partial derivative.",examples:['derivative("2x^3", "x")','derivative("2x^3", "x", {simplify: false})','derivative("2x^2 + 3x + 4", "x")','derivative("sin(2x)", "x")','f = parse("x^2 + x")','x = parse("x")',"df = derivative(f, x)","df.eval({x: 3})"],seealso:["simplify","parse","eval"]},bt={name:"lsolve",category:"Algebra",syntax:["x=lsolve(L, b)"],description:"Solves the linear system L * x = b where L is an [n x n] lower triangular matrix and b is a [n] column vector.",examples:["a = [-2, 3; 2, 1]","b = [11, 9]","x = lsolve(a, b)"],seealso:["lup","lusolve","usolve","matrix","sparse"]},Nt={name:"lup",category:"Algebra",syntax:["lup(m)"],description:"Calculate the Matrix LU decomposition with partial pivoting. Matrix A is decomposed in three matrices (L, U, P) where P * A = L * U",examples:["lup([[2, 1], [1, 4]])","lup(matrix([[2, 1], [1, 4]]))","lup(sparse([[2, 1], [1, 4]]))"],seealso:["lusolve","lsolve","usolve","matrix","sparse","slu","qr"]},Mt={name:"lusolve",category:"Algebra",syntax:["x=lusolve(A, b)","x=lusolve(lu, b)"],description:"Solves the linear system A * x = b where A is an [n x n] matrix and b is a [n] column vector.",examples:["a = [-2, 3; 2, 1]","b = [11, 9]","x = lusolve(a, b)"],seealso:["lup","slu","lsolve","usolve","matrix","sparse"]},Et={name:"simplify",category:"Algebra",syntax:["simplify(expr)","simplify(expr, rules)"],description:"Simplify an expression tree.",examples:['simplify("3 + 2 / 4")','simplify("2x + x")','f = parse("x * (x + 2 + x)")',"simplified = simplify(f)","simplified.eval({x: 2})"],seealso:["derivative","parse","eval"]},At={name:"rationalize",category:"Algebra",syntax:["rationalize(expr)","rationalize(expr, scope)","rationalize(expr, scope, detailed)"],description:"Transform a rationalizable expression in a rational fraction. If rational fraction is one variable polynomial then converts the numerator and denominator in canonical form, with decreasing exponents, returning the coefficients of numerator.",examples:['rationalize("2x/y - y/(x+1)")','rationalize("2x/y - y/(x+1)", true)'],seealso:["simplify"]},Ot={name:"slu",category:"Algebra",syntax:["slu(A, order, threshold)"],description:"Calculate the Matrix LU decomposition with full pivoting. Matrix A is decomposed in two matrices (L, U) and two permutation vectors (pinv, q) where P * A * Q = L * U",examples:["slu(sparse([4.5, 0, 3.2, 0; 3.1, 2.9, 0, 0.9; 0, 1.7, 3, 0; 3.5, 0.4, 0, 1]), 1, 0.001)"],seealso:["lusolve","lsolve","usolve","matrix","sparse","lup","qr"]},St={name:"usolve",category:"Algebra",syntax:["x=usolve(U, b)"],description:"Solves the linear system U * x = b where U is an [n x n] upper triangular matrix and b is a [n] column vector.",examples:["x=usolve(sparse([1, 1, 1, 1; 0, 1, 1, 1; 0, 0, 1, 1; 0, 0, 0, 1]), [1; 2; 3; 4])"],seealso:["lup","lusolve","lsolve","matrix","sparse"]},_t={name:"qr",category:"Algebra",syntax:["qr(A)"],description:"Calculates the Matrix QR decomposition. Matrix `A` is decomposed in two matrices (`Q`, `R`) where `Q` is an orthogonal matrix and `R` is an upper triangular matrix.",examples:["qr([[1, -1,  4], [1,  4, -2], [1,  4,  2], [1,  -1, 0]])"],seealso:["lup","slu","matrix"]},Tt={name:"abs",category:"Arithmetic",syntax:["abs(x)"],description:"Compute the absolute value.",examples:["abs(3.5)","abs(-4.2)"],seealso:["sign"]},Ct={name:"add",category:"Operators",syntax:["x + y","add(x, y)"],description:"Add two values.",examples:["a = 2.1 + 3.6","a - 3.6","3 + 2i","3 cm + 2 inch",'"2.3" + "4"'],seealso:["subtract"]},zt={name:"cbrt",category:"Arithmetic",syntax:["cbrt(x)","cbrt(x, allRoots)"],description:"Compute the cubic root value. If x = y * y * y, then y is the cubic root of x. When `x` is a number or complex number, an optional second argument `allRoots` can be provided to return all three cubic roots. If not provided, the principal root is returned",examples:["cbrt(64)","cube(4)","cbrt(-8)","cbrt(2 + 3i)","cbrt(8i)","cbrt(8i, true)","cbrt(27 m^3)"],seealso:["square","sqrt","cube","multiply"]},Bt={name:"ceil",category:"Arithmetic",syntax:["ceil(x)"],description:"Round a value towards plus infinity. If x is complex, both real and imaginary part are rounded towards plus infinity.",examples:["ceil(3.2)","ceil(3.8)","ceil(-4.2)"],seealso:["floor","fix","round"]},Pt={name:"cube",category:"Arithmetic",syntax:["cube(x)"],description:"Compute the cube of a value. The cube of x is x * x * x.",examples:["cube(2)","2^3","2 * 2 * 2"],seealso:["multiply","square","pow"]},It={name:"divide",category:"Operators",syntax:["x / y","divide(x, y)"],description:"Divide two values.",examples:["a = 2 / 3","a * 3","4.5 / 2","3 + 4 / 2","(3 + 4) / 2","18 km / 4.5"],seealso:["multiply"]},Rt={name:"dotDivide",category:"Operators",syntax:["x ./ y","dotDivide(x, y)"],description:"Divide two values element wise.",examples:["a = [1, 2, 3; 4, 5, 6]","b = [2, 1, 1; 3, 2, 5]","a ./ b"],seealso:["multiply","dotMultiply","divide"]},Ut={name:"dotMultiply",category:"Operators",syntax:["x .* y","dotMultiply(x, y)"],description:"Multiply two values element wise.",examples:["a = [1, 2, 3; 4, 5, 6]","b = [2, 1, 1; 3, 2, 5]","a .* b"],seealso:["multiply","divide","dotDivide"]},kt={name:"dotpow",category:"Operators",syntax:["x .^ y","dotpow(x, y)"],description:"Calculates the power of x to y element wise.",examples:["a = [1, 2, 3; 4, 5, 6]","a .^ 2"],seealso:["pow"]},Dt={name:"exp",category:"Arithmetic",syntax:["exp(x)"],description:"Calculate the exponent of a value.",examples:["exp(1.3)","e ^ 1.3","log(exp(1.3))","x = 2.4","(exp(i*x) == cos(x) + i*sin(x))   # Euler's formula"],seealso:["expm1","pow","log"]},qt={name:"expm1",category:"Arithmetic",syntax:["expm1(x)"],description:"Calculate the value of subtracting 1 from the exponential value.",examples:["expm1(2)","pow(e, 2) - 1","log(expm1(2) + 1)"],seealso:["exp","pow","log"]},Lt={name:"fix",category:"Arithmetic",syntax:["fix(x)"],description:"Round a value towards zero. If x is complex, both real and imaginary part are rounded towards zero.",examples:["fix(3.2)","fix(3.8)","fix(-4.2)","fix(-4.8)"],seealso:["ceil","floor","round"]},Ft={name:"floor",category:"Arithmetic",syntax:["floor(x)"],description:"Round a value towards minus infinity.If x is complex, both real and imaginary part are rounded towards minus infinity.",examples:["floor(3.2)","floor(3.8)","floor(-4.2)"],seealso:["ceil","fix","round"]},jt={name:"gcd",category:"Arithmetic",syntax:["gcd(a, b)","gcd(a, b, c, ...)"],description:"Compute the greatest common divisor.",examples:["gcd(8, 12)","gcd(-4, 6)","gcd(25, 15, -10)"],seealso:["lcm","xgcd"]},Ht={name:"hypot",category:"Arithmetic",syntax:["hypot(a, b, c, ...)","hypot([a, b, c, ...])"],description:"Calculate the hypotenusa of a list with values. ",examples:["hypot(3, 4)","sqrt(3^2 + 4^2)","hypot(-2)","hypot([3, 4, 5])"],seealso:["abs","norm"]},$t={name:"lcm",category:"Arithmetic",syntax:["lcm(x, y)"],description:"Compute the least common multiple.",examples:["lcm(4, 6)","lcm(6, 21)","lcm(6, 21, 5)"],seealso:["gcd"]},Gt={name:"log",category:"Arithmetic",syntax:["log(x)","log(x, base)"],description:"Compute the logarithm of a value. If no base is provided, the natural logarithm of x is calculated. If base if provided, the logarithm is calculated for the specified base. log(x, base) is defined as log(x) / log(base).",examples:["log(3.5)","a = log(2.4)","exp(a)","10 ^ 4","log(10000, 10)","log(10000) / log(10)","b = log(1024, 2)","2 ^ b"],seealso:["exp","log1p","log2","log10"]},Vt={name:"log2",category:"Arithmetic",syntax:["log2(x)"],description:"Calculate the 2-base of a value. This is the same as calculating `log(x, 2)`.",examples:["log2(0.03125)","log2(16)","log2(16) / log2(2)","pow(2, 4)"],seealso:["exp","log1p","log","log10"]},Zt={name:"log1p",category:"Arithmetic",syntax:["log1p(x)","log1p(x, base)"],description:"Calculate the logarithm of a `value+1`",examples:["log1p(2.5)","exp(log1p(1.4))","pow(10, 4)","log1p(9999, 10)","log1p(9999) / log(10)"],seealso:["exp","log","log2","log10"]},Wt={name:"log10",category:"Arithmetic",syntax:["log10(x)"],description:"Compute the 10-base logarithm of a value.",examples:["log10(0.00001)","log10(10000)","10 ^ 4","log(10000) / log(10)","log(10000, 10)"],seealso:["exp","log"]},Jt={name:"mod",category:"Operators",syntax:["x % y","x mod y","mod(x, y)"],description:"Calculates the modulus, the remainder of an integer division.",examples:["7 % 3","11 % 2","10 mod 4","isOdd(x) = x % 2","isOdd(2)","isOdd(3)"],seealso:["divide"]},Yt={name:"multiply",category:"Operators",syntax:["x * y","multiply(x, y)"],description:"multiply two values.",examples:["a = 2.1 * 3.4","a / 3.4","2 * 3 + 4","2 * (3 + 4)","3 * 2.1 km"],seealso:["divide"]},Xt={name:"norm",category:"Arithmetic",syntax:["norm(x)","norm(x, p)"],description:"Calculate the norm of a number, vector or matrix.",examples:["abs(-3.5)","norm(-3.5)","norm(3 - 4i)","norm([1, 2, -3], Infinity)","norm([1, 2, -3], -Infinity)","norm([3, 4], 2)","norm([[1, 2], [3, 4]], 1)",'norm([[1, 2], [3, 4]], "inf")','norm([[1, 2], [3, 4]], "fro")']},Qt={name:"nthRoot",category:"Arithmetic",syntax:["nthRoot(a)","nthRoot(a, root)"],description:'Calculate the nth root of a value. The principal nth root of a positive real number A, is the positive real solution of the equation "x^root = A".',examples:["4 ^ 3","nthRoot(64, 3)","nthRoot(9, 2)","sqrt(9)"],seealso:["sqrt","pow"]},Kt={name:"pow",category:"Operators",syntax:["x ^ y","pow(x, y)"],description:"Calculates the power of x to y, x^y.",examples:["2^3","2*2*2","1 + e ^ (pi * i)"],seealso:["multiply"]},en={name:"round",category:"Arithmetic",syntax:["round(x)","round(x, n)"],description:"round a value towards the nearest integer.If x is complex, both real and imaginary part are rounded towards the nearest integer. When n is specified, the value is rounded to n decimals.",examples:["round(3.2)","round(3.8)","round(-4.2)","round(-4.8)","round(pi, 3)","round(123.45678, 2)"],seealso:["ceil","floor","fix"]},rn={name:"sign",category:"Arithmetic",syntax:["sign(x)"],description:"Compute the sign of a value. The sign of a value x is 1 when x>1, -1 when x<0, and 0 when x=0.",examples:["sign(3.5)","sign(-4.2)","sign(0)"],seealso:["abs"]},tn={name:"sqrt",category:"Arithmetic",syntax:["sqrt(x)"],description:"Compute the square root value. If x = y * y, then y is the square root of x.",examples:["sqrt(25)","5 * 5","sqrt(-1)"],seealso:["square","sqrtm","multiply"]},nn={name:"sqrtm",category:"Arithmetic",syntax:["sqrtm(x)"],description:"Calculate the principal square root of a square matrix. The principal square root matrix `X` of another matrix `A` is such that `X * X = A`.",examples:["sqrtm([[1, 2], [3, 4]])"],seealso:["sqrt","abs","square","multiply"]},an={name:"square",category:"Arithmetic",syntax:["square(x)"],description:"Compute the square of a value. The square of x is x * x.",examples:["square(3)","sqrt(9)","3^2","3 * 3"],seealso:["multiply","pow","sqrt","cube"]},on={name:"subtract",category:"Operators",syntax:["x - y","subtract(x, y)"],description:"subtract two values.",examples:["a = 5.3 - 2","a + 2","2/3 - 1/6","2 * 3 - 3","2.1 km - 500m"],seealso:["add"]},sn={name:"unaryMinus",category:"Operators",syntax:["-x","unaryMinus(x)"],description:"Inverse the sign of a value. Converts booleans and strings to numbers.",examples:["-4.5","-(-5.6)",'-"22"'],seealso:["add","subtract","unaryPlus"]},un={name:"unaryPlus",category:"Operators",syntax:["+x","unaryPlus(x)"],description:"Converts booleans and strings to numbers.",examples:["+true",'+"2"'],seealso:["add","subtract","unaryMinus"]},cn={name:"xgcd",category:"Arithmetic",syntax:["xgcd(a, b)"],description:"Calculate the extended greatest common divisor for two values. The result is an array [d, x, y] with 3 entries, where d is the greatest common divisor, and d = x * a + y * b.",examples:["xgcd(8, 12)","gcd(8, 12)","xgcd(36163, 21199)"],seealso:["gcd","lcm"]},fn={name:"bitAnd",category:"Bitwise",syntax:["x & y","bitAnd(x, y)"],description:"Bitwise AND operation. Performs the logical AND operation on each pair of the corresponding bits of the two given values by multiplying them. If both bits in the compared position are 1, the bit in the resulting binary representation is 1, otherwise, the result is 0",examples:["5 & 3","bitAnd(53, 131)","[1, 12, 31] & 42"],seealso:["bitNot","bitOr","bitXor","leftShift","rightArithShift","rightLogShift"]},ln={name:"bitNot",category:"Bitwise",syntax:["~x","bitNot(x)"],description:"Bitwise NOT operation. Performs a logical negation on each bit of the given value. Bits that are 0 become 1, and those that are 1 become 0.",examples:["~1","~2","bitNot([2, -3, 4])"],seealso:["bitAnd","bitOr","bitXor","leftShift","rightArithShift","rightLogShift"]},pn={name:"bitOr",category:"Bitwise",syntax:["x | y","bitOr(x, y)"],description:"Bitwise OR operation. Performs the logical inclusive OR operation on each pair of corresponding bits of the two given values. The result in each position is 1 if the first bit is 1 or the second bit is 1 or both bits are 1, otherwise, the result is 0.",examples:["5 | 3","bitOr([1, 2, 3], 4)"],seealso:["bitAnd","bitNot","bitXor","leftShift","rightArithShift","rightLogShift"]},mn={name:"bitXor",category:"Bitwise",syntax:["bitXor(x, y)"],description:"Bitwise XOR operation, exclusive OR. Performs the logical exclusive OR operation on each pair of corresponding bits of the two given values. The result in each position is 1 if only the first bit is 1 or only the second bit is 1, but will be 0 if both are 0 or both are 1.",examples:["bitOr(1, 2)","bitXor([2, 3, 4], 4)"],seealso:["bitAnd","bitNot","bitOr","leftShift","rightArithShift","rightLogShift"]},hn={name:"leftShift",category:"Bitwise",syntax:["x << y","leftShift(x, y)"],description:"Bitwise left logical shift of a value x by y number of bits.",examples:["4 << 1","8 >> 1"],seealso:["bitAnd","bitNot","bitOr","bitXor","rightArithShift","rightLogShift"]},dn={name:"rightArithShift",category:"Bitwise",syntax:["x >> y","rightArithShift(x, y)"],description:"Bitwise right arithmetic shift of a value x by y number of bits.",examples:["8 >> 1","4 << 1","-12 >> 2"],seealso:["bitAnd","bitNot","bitOr","bitXor","leftShift","rightLogShift"]},gn={name:"rightLogShift",category:"Bitwise",syntax:["x >>> y","rightLogShift(x, y)"],description:"Bitwise right logical shift of a value x by y number of bits.",examples:["8 >>> 1","4 << 1","-12 >>> 2"],seealso:["bitAnd","bitNot","bitOr","bitXor","leftShift","rightArithShift"]},vn={name:"bellNumbers",category:"Combinatorics",syntax:["bellNumbers(n)"],description:"The Bell Numbers count the number of partitions of a set. A partition is a pairwise disjoint subset of S whose union is S. `bellNumbers` only takes integer arguments. The following condition must be enforced: n >= 0.",examples:["bellNumbers(3)","bellNumbers(8)"],seealso:["stirlingS2"]},yn={name:"catalan",category:"Combinatorics",syntax:["catalan(n)"],description:"The Catalan Numbers enumerate combinatorial structures of many different types. catalan only takes integer arguments. The following condition must be enforced: n >= 0.",examples:["catalan(3)","catalan(8)"],seealso:["bellNumbers"]},xn={name:"composition",category:"Combinatorics",syntax:["composition(n, k)"],description:"The composition counts of n into k parts. composition only takes integer arguments. The following condition must be enforced: k <= n.",examples:["composition(5, 3)"],seealso:["combinations"]},wn={name:"stirlingS2",category:"Combinatorics",syntax:["stirlingS2(n, k)"],description:"he Stirling numbers of the second kind, counts the number of ways to partition a set of n labelled objects into k nonempty unlabelled subsets. `stirlingS2` only takes integer arguments. The following condition must be enforced: k <= n. If n = k or k = 1, then s(n,k) = 1.",examples:["stirlingS2(5, 3)"],seealso:["bellNumbers"]},bn={name:"config",category:"Core",syntax:["config()","config(options)"],description:"Get configuration or change configuration.",examples:["config()","1/3 + 1/4",'config({number: "Fraction"})',"1/3 + 1/4"],seealso:[]},Nn={name:"import",category:"Core",syntax:["import(functions)","import(functions, options)"],description:"Import functions or constants from an object.",examples:["import({myFn: f(x)=x^2, myConstant: 32 })","myFn(2)","myConstant"],seealso:[]},Mn={name:"typed",category:"Core",syntax:["typed(signatures)","typed(name, signatures)"],description:"Create a typed function.",examples:['double = typed({ "number, number": f(x)=x+x })',"double(2)",'double("hello")'],seealso:[]},En={name:"arg",category:"Complex",syntax:["arg(x)"],description:"Compute the argument of a complex value. If x = a+bi, the argument is computed as atan2(b, a).",examples:["arg(2 + 2i)","atan2(3, 2)","arg(2 + 3i)"],seealso:["re","im","conj","abs"]},An={name:"conj",category:"Complex",syntax:["conj(x)"],description:"Compute the complex conjugate of a complex value. If x = a+bi, the complex conjugate is a-bi.",examples:["conj(2 + 3i)","conj(2 - 3i)","conj(-5.2i)"],seealso:["re","im","abs","arg"]},On={name:"re",category:"Complex",syntax:["re(x)"],description:"Get the real part of a complex number.",examples:["re(2 + 3i)","im(2 + 3i)","re(-5.2i)","re(2.4)"],seealso:["im","conj","abs","arg"]},Sn={name:"im",category:"Complex",syntax:["im(x)"],description:"Get the imaginary part of a complex number.",examples:["im(2 + 3i)","re(2 + 3i)","im(-5.2i)","im(2.4)"],seealso:["re","conj","abs","arg"]},_n={name:"eval",category:"Expression",syntax:["eval(expression)","eval([expr1, expr2, expr3, ...])"],description:"Evaluate an expression or an array with expressions.",examples:['eval("2 + 3")','eval("sqrt(" + 4 + ")")'],seealso:[]},Tn={name:"help",category:"Expression",syntax:["help(object)","help(string)"],description:"Display documentation on a function or data type.",examples:["help(sqrt)",'help("complex")'],seealso:[]},Cn={name:"distance",category:"Geometry",syntax:["distance([x1, y1], [x2, y2])","distance([[x1, y1], [x2, y2])"],description:"Calculates the Euclidean distance between two points.",examples:["distance([0,0], [4,4])","distance([[0,0], [4,4]])"],seealso:[]},zn={name:"intersect",category:"Geometry",syntax:["intersect(expr1, expr2, expr3, expr4)","intersect(expr1, expr2, expr3)"],description:"Computes the intersection point of lines and/or planes.",examples:["intersect([0, 0], [10, 10], [10, 0], [0, 10])","intersect([1, 0, 1],  [4, -2, 2], [1, 1, 1, 6])"],seealso:[]},Bn={name:"and",category:"Logical",syntax:["x and y","and(x, y)"],description:"Logical and. Test whether two values are both defined with a nonzero/nonempty value.",examples:["true and false","true and true","2 and 4"],seealso:["not","or","xor"]},Pn={name:"not",category:"Logical",syntax:["not x","not(x)"],description:"Logical not. Flips the boolean value of given argument.",examples:["not true","not false","not 2","not 0"],seealso:["and","or","xor"]},In={name:"or",category:"Logical",syntax:["x or y","or(x, y)"],description:"Logical or. Test if at least one value is defined with a nonzero/nonempty value.",examples:["true or false","false or false","0 or 4"],seealso:["not","and","xor"]},Rn={name:"xor",category:"Logical",syntax:["x xor y","xor(x, y)"],description:"Logical exclusive or, xor. Test whether one and only one value is defined with a nonzero/nonempty value.",examples:["true xor false","false xor false","true xor true","0 xor 4"],seealso:["not","and","or"]},Un={name:"concat",category:"Matrix",syntax:["concat(A, B, C, ...)","concat(A, B, C, ..., dim)"],description:"Concatenate matrices. By default, the matrices are concatenated by the last dimension. The dimension on which to concatenate can be provided as last argument.",examples:["A = [1, 2; 5, 6]","B = [3, 4; 7, 8]","concat(A, B)","concat(A, B, 1)","concat(A, B, 2)"],seealso:["det","diag","eye","inv","ones","range","size","squeeze","subset","trace","transpose","zeros"]},kn={name:"cross",category:"Matrix",syntax:["cross(A, B)"],description:"Calculate the cross product for two vectors in three dimensional space.",examples:["cross([1, 1, 0],  [0, 1, 1])","cross([3, -3, 1], [4, 9, 2])","cross([2, 3, 4],  [5, 6, 7])"],seealso:["multiply","dot"]},Dn={name:"det",category:"Matrix",syntax:["det(x)"],description:"Calculate the determinant of a matrix",examples:["det([1, 2; 3, 4])","det([-2, 2, 3; -1, 1, 3; 2, 0, -1])"],seealso:["concat","diag","eye","inv","ones","range","size","squeeze","subset","trace","transpose","zeros"]},qn={name:"diag",category:"Matrix",syntax:["diag(x)","diag(x, k)"],description:"Create a diagonal matrix or retrieve the diagonal of a matrix. When x is a vector, a matrix with the vector values on the diagonal will be returned. When x is a matrix, a vector with the diagonal values of the matrix is returned. When k is provided, the k-th diagonal will be filled in or retrieved, if k is positive, the values are placed on the super diagonal. When k is negative, the values are placed on the sub diagonal.",examples:["diag(1:3)","diag(1:3, 1)","a = [1, 2, 3; 4, 5, 6; 7, 8, 9]","diag(a)"],seealso:["concat","det","eye","inv","ones","range","size","squeeze","subset","trace","transpose","zeros"]},Ln={name:"dot",category:"Matrix",syntax:["dot(A, B)","A * B"],description:"Calculate the dot product of two vectors. The dot product of A = [a1, a2, a3, ..., an] and B = [b1, b2, b3, ..., bn] is defined as dot(A, B) = a1 * b1 + a2 * b2 + a3 * b3 + ... + an * bn",examples:["dot([2, 4, 1], [2, 2, 3])","[2, 4, 1] * [2, 2, 3]"],seealso:["multiply","cross"]},Fn={name:"eye",category:"Matrix",syntax:["eye(n)","eye(m, n)","eye([m, n])"],description:"Returns the identity matrix with size m-by-n. The matrix has ones on the diagonal and zeros elsewhere.",examples:["eye(3)","eye(3, 5)","a = [1, 2, 3; 4, 5, 6]","eye(size(a))"],seealso:["concat","det","diag","inv","ones","range","size","squeeze","subset","trace","transpose","zeros"]},jn={name:"filter",category:"Matrix",syntax:["filter(x, test)"],description:"Filter items in a matrix.",examples:["isPositive(x) = x > 0","filter([6, -2, -1, 4, 3], isPositive)","filter([6, -2, 0, 1, 0], x != 0)"],seealso:["sort","map","forEach"]},Hn={name:"flatten",category:"Matrix",syntax:["flatten(x)"],description:"Flatten a multi dimensional matrix into a single dimensional matrix.",examples:["a = [1, 2, 3; 4, 5, 6]","size(a)","b = flatten(a)","size(b)"],seealso:["concat","resize","size","squeeze"]},$n={name:"forEach",category:"Matrix",syntax:["forEach(x, callback)"],description:"Iterates over all elements of a matrix/array, and executes the given callback function.",examples:["forEach([1, 2, 3], function(val) { console.log(val) })"],seealso:["map","sort","filter"]},Gn={name:"inv",category:"Matrix",syntax:["inv(x)"],description:"Calculate the inverse of a matrix",examples:["inv([1, 2; 3, 4])","inv(4)","1 / 4"],seealso:["concat","det","diag","eye","ones","range","size","squeeze","subset","trace","transpose","zeros"]},Vn={name:"kron",category:"Matrix",syntax:["kron(x, y)"],description:"Calculates the kronecker product of 2 matrices or vectors.",examples:["kron([[1, 0], [0, 1]], [[1, 2], [3, 4]])","kron([1,1], [2,3,4])"],seealso:["multiply","dot","cross"]},Zn={name:"map",category:"Matrix",syntax:["map(x, callback)"],description:"Create a new matrix or array with the results of the callback function executed on each entry of the matrix/array.",examples:["map([1, 2, 3], square)"],seealso:["filter","forEach"]},Wn={name:"ones",category:"Matrix",syntax:["ones(m)","ones(m, n)","ones(m, n, p, ...)","ones([m])","ones([m, n])","ones([m, n, p, ...])"],description:"Create a matrix containing ones.",examples:["ones(3)","ones(3, 5)","ones([2,3]) * 4.5","a = [1, 2, 3; 4, 5, 6]","ones(size(a))"],seealso:["concat","det","diag","eye","inv","range","size","squeeze","subset","trace","transpose","zeros"]},Jn={name:"partitionSelect",category:"Matrix",syntax:["partitionSelect(x, k)","partitionSelect(x, k, compare)"],description:"Partition-based selection of an array or 1D matrix. Will find the kth smallest value, and mutates the input array. Uses Quickselect.",examples:["partitionSelect([5, 10, 1], 2)",'partitionSelect(["C", "B", "A", "D"], 1)'],seealso:["sort"]},Yn={name:"range",category:"Type",syntax:["start:end","start:step:end","range(start, end)","range(start, end, step)","range(string)"],description:"Create a range. Lower bound of the range is included, upper bound is excluded.",examples:["1:5","3:-1:-3","range(3, 7)","range(0, 12, 2)",'range("4:10")',"a = [1, 2, 3, 4; 5, 6, 7, 8]","a[1:2, 1:2]"],seealso:["concat","det","diag","eye","inv","ones","size","squeeze","subset","trace","transpose","zeros"]},Xn={name:"resize",category:"Matrix",syntax:["resize(x, size)","resize(x, size, defaultValue)"],description:"Resize a matrix.",examples:["resize([1,2,3,4,5], [3])","resize([1,2,3], [5])","resize([1,2,3], [5], -1)","resize(2, [2, 3])",'resize("hello", [8], "!")'],seealso:["size","subset","squeeze","reshape"]},Qn={name:"reshape",category:"Matrix",syntax:["reshape(x, sizes)"],description:"Reshape a multi dimensional array to fit the specified dimensions.",examples:["reshape([1, 2, 3, 4, 5, 6], [2, 3])","reshape([[1, 2], [3, 4]], [1, 4])","reshape([[1, 2], [3, 4]], [4])"],seealso:["size","squeeze","resize"]},Kn={name:"size",category:"Matrix",syntax:["size(x)"],description:"Calculate the size of a matrix.",examples:["size(2.3)",'size("hello world")',"a = [1, 2; 3, 4; 5, 6]","size(a)","size(1:6)"],seealso:["concat","det","diag","eye","inv","ones","range","squeeze","subset","trace","transpose","zeros"]},ei={name:"sort",category:"Matrix",syntax:["sort(x)","sort(x, compare)"],description:'Sort the items in a matrix. Compare can be a string "asc", "desc", "natural", or a custom sort function.',examples:["sort([5, 10, 1])",'sort(["C", "B", "A", "D"])',"sortByLength(a, b) = size(a)[1] - size(b)[1]",'sort(["Langdon", "Tom", "Sara"], sortByLength)','sort(["10", "1", "2"], "natural")'],seealso:["map","filter","forEach"]},ri={name:"squeeze",category:"Matrix",syntax:["squeeze(x)"],description:"Remove inner and outer singleton dimensions from a matrix.",examples:["a = zeros(3,2,1)","size(squeeze(a))","b = zeros(1,1,3)","size(squeeze(b))"],seealso:["concat","det","diag","eye","inv","ones","range","size","subset","trace","transpose","zeros"]},ti={name:"subset",category:"Matrix",syntax:["value(index)","value(index) = replacement","subset(value, [index])","subset(value, [index], replacement)"],description:"Get or set a subset of a matrix or string. Indexes are one-based. Both the ranges lower-bound and upper-bound are included.",examples:["d = [1, 2; 3, 4]","e = []","e[1, 1:2] = [5, 6]","e[2, :] = [7, 8]","f = d * e","f[2, 1]","f[:, 1]"],seealso:["concat","det","diag","eye","inv","ones","range","size","squeeze","trace","transpose","zeros"]},ni={name:"trace",category:"Matrix",syntax:["trace(A)"],description:"Calculate the trace of a matrix: the sum of the elements on the main diagonal of a square matrix.",examples:["A = [1, 2, 3; -1, 2, 3; 2, 0, 3]","trace(A)"],seealso:["concat","det","diag","eye","inv","ones","range","size","squeeze","subset","transpose","zeros"]},ii={name:"transpose",category:"Matrix",syntax:["x'","transpose(x)"],description:"Transpose a matrix",examples:["a = [1, 2, 3; 4, 5, 6]","a'","transpose(a)"],seealso:["concat","det","diag","eye","inv","ones","range","size","squeeze","subset","trace","zeros"]},ai={name:"zeros",category:"Matrix",syntax:["zeros(m)","zeros(m, n)","zeros(m, n, p, ...)","zeros([m])","zeros([m, n])","zeros([m, n, p, ...])"],description:"Create a matrix containing zeros.",examples:["zeros(3)","zeros(3, 5)","a = [1, 2, 3; 4, 5, 6]","zeros(size(a))"],seealso:["concat","det","diag","eye","inv","ones","range","size","squeeze","subset","trace","transpose"]},oi={name:"combinations",category:"Probability",syntax:["combinations(n, k)"],description:"Compute the number of combinations of n items taken k at a time",examples:["combinations(7, 5)"],seealso:["permutations","factorial"]},si={name:"factorial",category:"Probability",syntax:["n!","factorial(n)"],description:"Compute the factorial of a value",examples:["5!","5 * 4 * 3 * 2 * 1","3!"],seealso:["combinations","permutations","gamma"]},ui={name:"gamma",category:"Probability",syntax:["gamma(n)"],description:"Compute the gamma function. For small values, the Lanczos approximation is used, and for large values the extended Stirling approximation.",examples:["gamma(4)","3!","gamma(1/2)","sqrt(pi)"],seealso:["factorial"]},ci={name:"kldivergence",category:"Probability",syntax:["kldivergence(x, y)"],description:"Calculate the Kullback-Leibler (KL) divergence  between two distributions.",examples:["kldivergence([0.7,0.5,0.4], [0.2,0.9,0.5])"],seealso:[]},fi={name:"multinomial",category:"Probability",syntax:["multinomial(A)"],description:"Multinomial Coefficients compute the number of ways of picking a1, a2, ..., ai unordered outcomes from `n` possibilities. multinomial takes one array of integers as an argument. The following condition must be enforced: every ai > 0.",examples:["multinomial([1, 2, 1])"],seealso:["combinations","factorial"]},li={name:"permutations",category:"Probability",syntax:["permutations(n)","permutations(n, k)"],description:"Compute the number of permutations of n items taken k at a time",examples:["permutations(5)","permutations(5, 3)"],seealso:["combinations","factorial"]},pi={name:"pickRandom",category:"Probability",syntax:["pickRandom(array)","pickRandom(array, number)","pickRandom(array, weights)","pickRandom(array, number, weights)","pickRandom(array, weights, number)"],description:"Pick a random entry from a given array.",examples:["pickRandom(0:10)","pickRandom([1, 3, 1, 6])","pickRandom([1, 3, 1, 6], 2)","pickRandom([1, 3, 1, 6], [2, 3, 2, 1])","pickRandom([1, 3, 1, 6], 2, [2, 3, 2, 1])","pickRandom([1, 3, 1, 6], [2, 3, 2, 1], 2)"],seealso:["random","randomInt"]},mi={name:"random",category:"Probability",syntax:["random()","random(max)","random(min, max)","random(size)","random(size, max)","random(size, min, max)"],description:"Return a random number.",examples:["random()","random(10, 20)","random([2, 3])"],seealso:["pickRandom","randomInt"]},hi={name:"randomInt",category:"Probability",syntax:["randomInt(max)","randomInt(min, max)","randomInt(size)","randomInt(size, max)","randomInt(size, min, max)"],description:"Return a random integer number",examples:["randomInt(10, 20)","randomInt([2, 3], 10)"],seealso:["pickRandom","random"]},di={name:"compare",category:"Relational",syntax:["compare(x, y)"],description:"Compare two values. Returns 1 if x is larger than y, -1 if x is smaller than y, and 0 if x and y are equal.",examples:["compare(2, 3)","compare(3, 2)","compare(2, 2)","compare(5cm, 40mm)","compare(2, [1, 2, 3])"],seealso:["equal","unequal","smaller","smallerEq","largerEq","compareNatural"]},gi={name:"compareNatural",category:"Relational",syntax:["compareNatural(x, y)"],description:"Compare two values of any type in a deterministic, natural way.",examples:["compareNatural(2, 3)","compareNatural(3, 2)","compareNatural(2, 2)","compareNatural(5cm, 40mm)",'compareNatural("2", "10")',"compareNatural(2 + 3i, 2 + 4i)","compareNatural([1, 2, 4], [1, 2, 3])","compareNatural([1, 5], [1, 2, 3])","compareNatural([1, 2], [1, 2])","compareNatural({a: 2}, {a: 4})"],seealso:["equal","unequal","smaller","smallerEq","largerEq","compare"]},vi={name:"deepEqual",category:"Relational",syntax:["deepEqual(x, y)"],description:"Check equality of two matrices element wise. Returns true if the size of both matrices is equal and when and each of the elements are equal.",examples:["deepEqual([1,3,4], [1,3,4])","deepEqual([1,3,4], [1,3])"],seealso:["equal","unequal","smaller","larger","smallerEq","largerEq","compare"]},yi={name:"equal",category:"Relational",syntax:["x == y","equal(x, y)"],description:"Check equality of two values. Returns true if the values are equal, and false if not.",examples:["2+2 == 3","2+2 == 4","a = 3.2","b = 6-2.8","a == b","50cm == 0.5m"],seealso:["unequal","smaller","larger","smallerEq","largerEq","compare","deepEqual"]},xi={name:"larger",category:"Relational",syntax:["x > y","larger(x, y)"],description:"Check if value x is larger than y. Returns true if x is larger than y, and false if not.",examples:["2 > 3","5 > 2*2","a = 3.3","b = 6-2.8","(a > b)","(b < a)","5 cm > 2 inch"],seealso:["equal","unequal","smaller","smallerEq","largerEq","compare"]},wi={name:"largerEq",category:"Relational",syntax:["x >= y","largerEq(x, y)"],description:"Check if value x is larger or equal to y. Returns true if x is larger or equal to y, and false if not.",examples:["2 >= 1+1","2 > 1+1","a = 3.2","b = 6-2.8","(a >= b)"],seealso:["equal","unequal","smallerEq","smaller","compare"]},bi={name:"smaller",category:"Relational",syntax:["x < y","smaller(x, y)"],description:"Check if value x is smaller than value y. Returns true if x is smaller than y, and false if not.",examples:["2 < 3","5 < 2*2","a = 3.3","b = 6-2.8","(a < b)","5 cm < 2 inch"],seealso:["equal","unequal","larger","smallerEq","largerEq","compare"]},Ni={name:"smallerEq",category:"Relational",syntax:["x <= y","smallerEq(x, y)"],description:"Check if value x is smaller or equal to value y. Returns true if x is smaller than y, and false if not.",examples:["2 <= 1+1","2 < 1+1","a = 3.2","b = 6-2.8","(a <= b)"],seealso:["equal","unequal","larger","smaller","largerEq","compare"]},Mi={name:"unequal",category:"Relational",syntax:["x != y","unequal(x, y)"],description:"Check unequality of two values. Returns true if the values are unequal, and false if they are equal.",examples:["2+2 != 3","2+2 != 4","a = 3.2","b = 6-2.8","a != b","50cm != 0.5m","5 cm != 2 inch"],seealso:["equal","smaller","larger","smallerEq","largerEq","compare","deepEqual"]},Ei={name:"setCartesian",category:"Set",syntax:["setCartesian(set1, set2)"],description:"Create the cartesian product of two (multi)sets. Multi-dimension arrays will be converted to single-dimension arrays before the operation.",examples:["setCartesian([1, 2], [3, 4])"],seealso:["setUnion","setIntersect","setDifference","setPowerset"]},Ai={name:"setDifference",category:"Set",syntax:["setDifference(set1, set2)"],description:"Create the difference of two (multi)sets: every element of set1, that is not the element of set2. Multi-dimension arrays will be converted to single-dimension arrays before the operation.",examples:["setDifference([1, 2, 3, 4], [3, 4, 5, 6])","setDifference([[1, 2], [3, 4]], [[3, 4], [5, 6]])"],seealso:["setUnion","setIntersect","setSymDifference"]},Oi={name:"setDistinct",category:"Set",syntax:["setDistinct(set)"],description:"Collect the distinct elements of a multiset. A multi-dimension array will be converted to a single-dimension array before the operation.",examples:["setDistinct([1, 1, 1, 2, 2, 3])"],seealso:["setMultiplicity"]},Si={name:"setIntersect",category:"Set",syntax:["setIntersect(set1, set2)"],description:"Create the intersection of two (multi)sets. Multi-dimension arrays will be converted to single-dimension arrays before the operation.",examples:["setIntersect([1, 2, 3, 4], [3, 4, 5, 6])","setIntersect([[1, 2], [3, 4]], [[3, 4], [5, 6]])"],seealso:["setUnion","setDifference"]},_i={name:"setIsSubset",category:"Set",syntax:["setIsSubset(set1, set2)"],description:"Check whether a (multi)set is a subset of another (multi)set: every element of set1 is the element of set2. Multi-dimension arrays will be converted to single-dimension arrays before the operation.",examples:["setIsSubset([1, 2], [3, 4, 5, 6])","setIsSubset([3, 4], [3, 4, 5, 6])"],seealso:["setUnion","setIntersect","setDifference"]},Ti={name:"setMultiplicity",category:"Set",syntax:["setMultiplicity(element, set)"],description:"Count the multiplicity of an element in a multiset. A multi-dimension array will be converted to a single-dimension array before the operation.",examples:["setMultiplicity(1, [1, 2, 2, 4])","setMultiplicity(2, [1, 2, 2, 4])"],seealso:["setDistinct","setSize"]},Ci={name:"setPowerset",category:"Set",syntax:["setPowerset(set)"],description:"Create the powerset of a (multi)set: the powerset contains very possible subsets of a (multi)set. A multi-dimension array will be converted to a single-dimension array before the operation.",examples:["setPowerset([1, 2, 3])"],seealso:["setCartesian"]},zi={name:"setSize",category:"Set",syntax:["setSize(set)","setSize(set, unique)"],description:'Count the number of elements of a (multi)set. When the second parameter "unique" is true, count only the unique values. A multi-dimension array will be converted to a single-dimension array before the operation.',examples:["setSize([1, 2, 2, 4])","setSize([1, 2, 2, 4], true)"],seealso:["setUnion","setIntersect","setDifference"]},Bi={name:"setSymDifference",category:"Set",syntax:["setSymDifference(set1, set2)"],description:"Create the symmetric difference of two (multi)sets. Multi-dimension arrays will be converted to single-dimension arrays before the operation.",examples:["setSymDifference([1, 2, 3, 4], [3, 4, 5, 6])","setSymDifference([[1, 2], [3, 4]], [[3, 4], [5, 6]])"],seealso:["setUnion","setIntersect","setDifference"]},Pi={name:"setUnion",category:"Set",syntax:["setUnion(set1, set2)"],description:"Create the union of two (multi)sets. Multi-dimension arrays will be converted to single-dimension arrays before the operation.",examples:["setUnion([1, 2, 3, 4], [3, 4, 5, 6])","setUnion([[1, 2], [3, 4]], [[3, 4], [5, 6]])"],seealso:["setIntersect","setDifference"]},Ii={name:"erf",category:"Special",syntax:["erf(x)"],description:"Compute the erf function of a value using a rational Chebyshev approximations for different intervals of x",examples:["erf(0.2)","erf(-0.5)","erf(4)"],seealso:[]},Ri={name:"mad",category:"Statistics",syntax:["mad(a, b, c, ...)","mad(A)"],description:"Compute the median absolute deviation of a matrix or a list with values. The median absolute deviation is defined as the median of the absolute deviations from the median.",examples:["mad(10, 20, 30)","mad([1, 2, 3])"],seealso:["mean","median","std","abs"]},Ui={name:"max",category:"Statistics",syntax:["max(a, b, c, ...)","max(A)","max(A, dim)"],description:"Compute the maximum value of a list of values.",examples:["max(2, 3, 4, 1)","max([2, 3, 4, 1])","max([2, 5; 4, 3])","max([2, 5; 4, 3], 1)","max([2, 5; 4, 3], 2)","max(2.7, 7.1, -4.5, 2.0, 4.1)","min(2.7, 7.1, -4.5, 2.0, 4.1)"],seealso:["mean","median","min","prod","std","sum","var"]},ki={name:"mean",category:"Statistics",syntax:["mean(a, b, c, ...)","mean(A)","mean(A, dim)"],description:"Compute the arithmetic mean of a list of values.",examples:["mean(2, 3, 4, 1)","mean([2, 3, 4, 1])","mean([2, 5; 4, 3])","mean([2, 5; 4, 3], 1)","mean([2, 5; 4, 3], 2)","mean([1.0, 2.7, 3.2, 4.0])"],seealso:["max","median","min","prod","std","sum","var"]},Di={name:"median",category:"Statistics",syntax:["median(a, b, c, ...)","median(A)"],description:"Compute the median of all values. The values are sorted and the middle value is returned. In case of an even number of values, the average of the two middle values is returned.",examples:["median(5, 2, 7)","median([3, -1, 5, 7])"],seealso:["max","mean","min","prod","std","sum","var","quantileSeq"]},qi={name:"min",category:"Statistics",syntax:["min(a, b, c, ...)","min(A)","min(A, dim)"],description:"Compute the minimum value of a list of values.",examples:["min(2, 3, 4, 1)","min([2, 3, 4, 1])","min([2, 5; 4, 3])","min([2, 5; 4, 3], 1)","min([2, 5; 4, 3], 2)","min(2.7, 7.1, -4.5, 2.0, 4.1)","max(2.7, 7.1, -4.5, 2.0, 4.1)"],seealso:["max","mean","median","prod","std","sum","var"]},Li={name:"mode",category:"Statistics",syntax:["mode(a, b, c, ...)","mode(A)","mode(A, a, b, B, c, ...)"],description:"Computes the mode of all values as an array. In case mode being more than one, multiple values are returned in an array.",examples:["mode(2, 1, 4, 3, 1)","mode([1, 2.7, 3.2, 4, 2.7])","mode(1, 4, 6, 1, 6)"],seealso:["max","mean","min","median","prod","std","sum","var"]},Fi={name:"prod",category:"Statistics",syntax:["prod(a, b, c, ...)","prod(A)"],description:"Compute the product of all values.",examples:["prod(2, 3, 4)","prod([2, 3, 4])","prod([2, 5; 4, 3])"],seealso:["max","mean","min","median","min","std","sum","var"]},ji={name:"quantileSeq",category:"Statistics",syntax:["quantileSeq(A, prob[, sorted])","quantileSeq(A, [prob1, prob2, ...][, sorted])","quantileSeq(A, N[, sorted])"],description:"Compute the prob order quantile of a matrix or a list with values. The sequence is sorted and the middle value is returned. Supported types of sequence values are: Number, BigNumber, Unit Supported types of probablity are: Number, BigNumber. \n\nIn case of a (multi dimensional) array or matrix, the prob order quantile of all elements will be calculated.",examples:["quantileSeq([3, -1, 5, 7], 0.5)","quantileSeq([3, -1, 5, 7], [1/3, 2/3])","quantileSeq([3, -1, 5, 7], 2)","quantileSeq([-1, 3, 5, 7], 0.5, true)"],seealso:["mean","median","min","max","prod","std","sum","var"]},Hi={name:"std",category:"Statistics",syntax:["std(a, b, c, ...)","std(A)","std(A, normalization)"],description:'Compute the standard deviation of all values, defined as std(A) = sqrt(var(A)). Optional parameter normalization can be "unbiased" (default), "uncorrected", or "biased".',examples:["std(2, 4, 6)","std([2, 4, 6, 8])",'std([2, 4, 6, 8], "uncorrected")','std([2, 4, 6, 8], "biased")',"std([1, 2, 3; 4, 5, 6])"],seealso:["max","mean","min","median","min","prod","sum","var"]},$i={name:"sum",category:"Statistics",syntax:["sum(a, b, c, ...)","sum(A)"],description:"Compute the sum of all values.",examples:["sum(2, 3, 4, 1)","sum([2, 3, 4, 1])","sum([2, 5; 4, 3])"],seealso:["max","mean","median","min","prod","std","sum","var"]},Gi={name:"var",category:"Statistics",syntax:["var(a, b, c, ...)","var(A)","var(A, normalization)"],description:'Compute the variance of all values. Optional parameter normalization can be "unbiased" (default), "uncorrected", or "biased".',examples:["var(2, 4, 6)","var([2, 4, 6, 8])",'var([2, 4, 6, 8], "uncorrected")','var([2, 4, 6, 8], "biased")',"var([1, 2, 3; 4, 5, 6])"],seealso:["max","mean","min","median","min","prod","std","sum"]},Vi={name:"acos",category:"Trigonometry",syntax:["acos(x)"],description:"Compute the inverse cosine of a value in radians.",examples:["acos(0.5)","acos(cos(2.3))"],seealso:["cos","atan","asin"]},Zi={name:"acosh",category:"Trigonometry",syntax:["acosh(x)"],description:"Calculate the hyperbolic arccos of a value, defined as `acosh(x) = ln(sqrt(x^2 - 1) + x)`.",examples:["acosh(1.5)"],seealso:["cosh","asinh","atanh"]},Wi={name:"acot",category:"Trigonometry",syntax:["acot(x)"],description:"Calculate the inverse cotangent of a value.",examples:["acot(0.5)","acot(cot(0.5))","acot(2)"],seealso:["cot","atan"]},Ji={name:"acoth",category:"Trigonometry",syntax:["acoth(x)"],description:"Calculate the hyperbolic arccotangent of a value, defined as `acoth(x) = (ln((x+1)/x) + ln(x/(x-1))) / 2`.",examples:["acoth(2)","acoth(0.5)"],seealso:["acsch","asech"]},Yi={name:"acsc",category:"Trigonometry",syntax:["acsc(x)"],description:"Calculate the inverse cotangent of a value.",examples:["acsc(2)","acsc(csc(0.5))","acsc(0.5)"],seealso:["csc","asin","asec"]},Xi={name:"acsch",category:"Trigonometry",syntax:["acsch(x)"],description:"Calculate the hyperbolic arccosecant of a value, defined as `acsch(x) = ln(1/x + sqrt(1/x^2 + 1))`.",examples:["acsch(0.5)"],seealso:["asech","acoth"]},Qi={name:"asec",category:"Trigonometry",syntax:["asec(x)"],description:"Calculate the inverse secant of a value.",examples:["asec(0.5)","asec(sec(0.5))","asec(2)"],seealso:["acos","acot","acsc"]},Ki={name:"asech",category:"Trigonometry",syntax:["asech(x)"],description:"Calculate the inverse secant of a value.",examples:["asech(0.5)"],seealso:["acsch","acoth"]},ea={name:"asin",category:"Trigonometry",syntax:["asin(x)"],description:"Compute the inverse sine of a value in radians.",examples:["asin(0.5)","asin(sin(0.5))"],seealso:["sin","acos","atan"]},ra={name:"asinh",category:"Trigonometry",syntax:["asinh(x)"],description:"Calculate the hyperbolic arcsine of a value, defined as `asinh(x) = ln(x + sqrt(x^2 + 1))`.",examples:["asinh(0.5)"],seealso:["acosh","atanh"]},ta={name:"atan",category:"Trigonometry",syntax:["atan(x)"],description:"Compute the inverse tangent of a value in radians.",examples:["atan(0.5)","atan(tan(0.5))"],seealso:["tan","acos","asin"]},na={name:"atanh",category:"Trigonometry",syntax:["atanh(x)"],description:"Calculate the hyperbolic arctangent of a value, defined as `atanh(x) = ln((1 + x)/(1 - x)) / 2`.",examples:["atanh(0.5)"],seealso:["acosh","asinh"]},ia={name:"atan2",category:"Trigonometry",syntax:["atan2(y, x)"],description:"Computes the principal value of the arc tangent of y/x in radians.",examples:["atan2(2, 2) / pi","angle = 60 deg in rad","x = cos(angle)","y = sin(angle)","atan2(y, x)"],seealso:["sin","cos","tan"]},aa={name:"cos",category:"Trigonometry",syntax:["cos(x)"],description:"Compute the cosine of x in radians.",examples:["cos(2)","cos(pi / 4) ^ 2","cos(180 deg)","cos(60 deg)","sin(0.2)^2 + cos(0.2)^2"],seealso:["acos","sin","tan"]},oa={name:"cosh",category:"Trigonometry",syntax:["cosh(x)"],description:"Compute the hyperbolic cosine of x in radians.",examples:["cosh(0.5)"],seealso:["sinh","tanh","coth"]},sa={name:"cot",category:"Trigonometry",syntax:["cot(x)"],description:"Compute the cotangent of x in radians. Defined as 1/tan(x)",examples:["cot(2)","1 / tan(2)"],seealso:["sec","csc","tan"]},ua={name:"coth",category:"Trigonometry",syntax:["coth(x)"],description:"Compute the hyperbolic cotangent of x in radians.",examples:["coth(2)","1 / tanh(2)"],seealso:["sech","csch","tanh"]},ca={name:"csc",category:"Trigonometry",syntax:["csc(x)"],description:"Compute the cosecant of x in radians. Defined as 1/sin(x)",examples:["csc(2)","1 / sin(2)"],seealso:["sec","cot","sin"]},fa={name:"csch",category:"Trigonometry",syntax:["csch(x)"],description:"Compute the hyperbolic cosecant of x in radians. Defined as 1/sinh(x)",examples:["csch(2)","1 / sinh(2)"],seealso:["sech","coth","sinh"]},la={name:"sec",category:"Trigonometry",syntax:["sec(x)"],description:"Compute the secant of x in radians. Defined as 1/cos(x)",examples:["sec(2)","1 / cos(2)"],seealso:["cot","csc","cos"]},pa={name:"sech",category:"Trigonometry",syntax:["sech(x)"],description:"Compute the hyperbolic secant of x in radians. Defined as 1/cosh(x)",examples:["sech(2)","1 / cosh(2)"],seealso:["coth","csch","cosh"]},ma={name:"sin",category:"Trigonometry",syntax:["sin(x)"],description:"Compute the sine of x in radians.",examples:["sin(2)","sin(pi / 4) ^ 2","sin(90 deg)","sin(30 deg)","sin(0.2)^2 + cos(0.2)^2"],seealso:["asin","cos","tan"]},ha={name:"sinh",category:"Trigonometry",syntax:["sinh(x)"],description:"Compute the hyperbolic sine of x in radians.",examples:["sinh(0.5)"],seealso:["cosh","tanh"]},da={name:"tan",category:"Trigonometry",syntax:["tan(x)"],description:"Compute the tangent of x in radians.",examples:["tan(0.5)","sin(0.5) / cos(0.5)","tan(pi / 4)","tan(45 deg)"],seealso:["atan","sin","cos"]},ga={name:"tanh",category:"Trigonometry",syntax:["tanh(x)"],description:"Compute the hyperbolic tangent of x in radians.",examples:["tanh(0.5)","sinh(0.5) / cosh(0.5)"],seealso:["sinh","cosh"]},va={name:"to",category:"Units",syntax:["x to unit","to(x, unit)"],description:"Change the unit of a value.",examples:["5 inch to cm","3.2kg to g","16 bytes in bits"],seealso:[]},ya={name:"clone",category:"Utils",syntax:["clone(x)"],description:"Clone a variable. Creates a copy of primitive variables,and a deep copy of matrices",examples:["clone(3.5)","clone(2 - 4i)","clone(45 deg)","clone([1, 2; 3, 4])",'clone("hello world")'],seealso:[]},xa={name:"format",category:"Utils",syntax:["format(value)","format(value, precision)"],description:"Format a value of any type as string.",examples:["format(2.3)","format(3 - 4i)","format([])","format(pi, 3)"],seealso:["print"]},wa={name:"isNaN",category:"Utils",syntax:["isNaN(x)"],description:"Test whether a value is NaN (not a number)",examples:["isNaN(2)","isNaN(0 / 0)","isNaN(NaN)","isNaN(Infinity)"],seealso:["isNegative","isNumeric","isPositive","isZero"]},ba={name:"isInteger",category:"Utils",syntax:["isInteger(x)"],description:"Test whether a value is an integer number.",examples:["isInteger(2)","isInteger(3.5)","isInteger([3, 0.5, -2])"],seealso:["isNegative","isNumeric","isPositive","isZero"]},Na={name:"isNegative",category:"Utils",syntax:["isNegative(x)"],description:"Test whether a value is negative: smaller than zero.",examples:["isNegative(2)","isNegative(0)","isNegative(-4)","isNegative([3, 0.5, -2])"],seealso:["isInteger","isNumeric","isPositive","isZero"]},Ma={name:"isNumeric",category:"Utils",syntax:["isNumeric(x)"],description:"Test whether a value is a numeric value. Returns true when the input is a number, BigNumber, Fraction, or boolean.",examples:["isNumeric(2)","isNumeric(0)","isNumeric(bignumber(500))","isNumeric(fraction(0.125))",'isNumeric("3")',"isNumeric(2 + 3i)",'isNumeric([2.3, "foo", false])'],seealso:["isInteger","isZero","isNegative","isPositive","isNaN"]},Ea={name:"isPositive",category:"Utils",syntax:["isPositive(x)"],description:"Test whether a value is positive: larger than zero.",examples:["isPositive(2)","isPositive(0)","isPositive(-4)","isPositive([3, 0.5, -2])"],seealso:["isInteger","isNumeric","isNegative","isZero"]},Aa={name:"isPrime",category:"Utils",syntax:["isPrime(x)"],description:"Test whether a value is prime: has no divisors other than itself and one.",examples:["isPrime(3)","isPrime(-2)","isPrime([2, 17, 100])"],seealso:["isInteger","isNumeric","isNegative","isZero"]},Oa={name:"isZero",category:"Utils",syntax:["isZero(x)"],description:"Test whether a value is zero.",examples:["isZero(2)","isZero(0)","isZero(-4)","isZero([3, 0, -2, 0])"],seealso:["isInteger","isNumeric","isNegative","isPositive"]},Sa={name:"typeof",category:"Utils",syntax:["typeof(x)"],description:"Get the type of a variable.",examples:["typeof(3.5)","typeof(2 - 4i)","typeof(45 deg)",'typeof("hello world")'],seealso:[]};var _a={name:"docs",path:"expression",factory:function(e,r,t,n){var i={};return i.bignumber=Gr,i.boolean=Vr,i.complex=Zr,i.createUnit=Wr,i.fraction=Jr,i.index=Yr,i.matrix=Xr,i.number=Qr,i.sparse=Kr,i.splitUnit=et,i.string=rt,i.unit=tt,i.e=nt,i.E=nt,i.false=it,i.i=at,i[1/0]=ot,i.LN2=st,i.LN10=ut,i.LOG2E=ct,i.LOG10E=ft,i.NaN=lt,i.null=pt,i.pi=mt,i.PI=mt,i.phi=ht,i.SQRT1_2=dt,i.SQRT2=gt,i.tau=vt,i.true=yt,i.version=xt,i.speedOfLight={description:"Speed of light in vacuum",examples:["speedOfLight"]},i.gravitationConstant={description:"Newtonian constant of gravitation",examples:["gravitationConstant"]},i.planckConstant={description:"Planck constant",examples:["planckConstant"]},i.reducedPlanckConstant={description:"Reduced Planck constant",examples:["reducedPlanckConstant"]},i.magneticConstant={description:"Magnetic constant (vacuum permeability)",examples:["magneticConstant"]},i.electricConstant={description:"Electric constant (vacuum permeability)",examples:["electricConstant"]},i.vacuumImpedance={description:"Characteristic impedance of vacuum",examples:["vacuumImpedance"]},i.coulomb={description:"Coulomb's constant",examples:["coulomb"]},i.elementaryCharge={description:"Elementary charge",examples:["elementaryCharge"]},i.bohrMagneton={description:"Borh magneton",examples:["bohrMagneton"]},i.conductanceQuantum={description:"Conductance quantum",examples:["conductanceQuantum"]},i.inverseConductanceQuantum={description:"Inverse conductance quantum",examples:["inverseConductanceQuantum"]},i.magneticFluxQuantum={description:"Magnetic flux quantum",examples:["magneticFluxQuantum"]},i.nuclearMagneton={description:"Nuclear magneton",examples:["nuclearMagneton"]},i.klitzing={description:"Von Klitzing constant",examples:["klitzing"]},i.bohrRadius={description:"Borh radius",examples:["bohrRadius"]},i.classicalElectronRadius={description:"Classical electron radius",examples:["classicalElectronRadius"]},i.electronMass={description:"Electron mass",examples:["electronMass"]},i.fermiCoupling={description:"Fermi coupling constant",examples:["fermiCoupling"]},i.fineStructure={description:"Fine-structure constant",examples:["fineStructure"]},i.hartreeEnergy={description:"Hartree energy",examples:["hartreeEnergy"]},i.protonMass={description:"Proton mass",examples:["protonMass"]},i.deuteronMass={description:"Deuteron Mass",examples:["deuteronMass"]},i.neutronMass={description:"Neutron mass",examples:["neutronMass"]},i.quantumOfCirculation={description:"Quantum of circulation",examples:["quantumOfCirculation"]},i.rydberg={description:"Rydberg constant",examples:["rydberg"]},i.thomsonCrossSection={description:"Thomson cross section",examples:["thomsonCrossSection"]},i.weakMixingAngle={description:"Weak mixing angle",examples:["weakMixingAngle"]},i.efimovFactor={description:"Efimov factor",examples:["efimovFactor"]},i.atomicMass={description:"Atomic mass constant",examples:["atomicMass"]},i.avogadro={description:"Avogadro's number",examples:["avogadro"]},i.boltzmann={description:"Boltzmann constant",examples:["boltzmann"]},i.faraday={description:"Faraday constant",examples:["faraday"]},i.firstRadiation={description:"First radiation constant",examples:["firstRadiation"]},i.loschmidt={description:"Loschmidt constant at T=273.15 K and p=101.325 kPa",examples:["loschmidt"]},i.gasConstant={description:"Gas constant",examples:["gasConstant"]},i.molarPlanckConstant={description:"Molar Planck constant",examples:["molarPlanckConstant"]},i.molarVolume={description:"Molar volume of an ideal gas at T=273.15 K and p=101.325 kPa",examples:["molarVolume"]},i.sackurTetrode={description:"Sackur-Tetrode constant at T=1 K and p=101.325 kPa",examples:["sackurTetrode"]},i.secondRadiation={description:"Second radiation constant",examples:["secondRadiation"]},i.stefanBoltzmann={description:"Stefan-Boltzmann constant",examples:["stefanBoltzmann"]},i.wienDisplacement={description:"Wien displacement law constant",examples:["wienDisplacement"]},i.molarMass={description:"Molar mass constant",examples:["molarMass"]},i.molarMassC12={description:"Molar mass constant of carbon-12",examples:["molarMassC12"]},i.gravity={description:"Standard acceleration of gravity (standard acceleration of free-fall on Earth)",examples:["gravity"]},i.planckLength={description:"Planck length",examples:["planckLength"]},i.planckMass={description:"Planck mass",examples:["planckMass"]},i.planckTime={description:"Planck time",examples:["planckTime"]},i.planckCharge={description:"Planck charge",examples:["planckCharge"]},i.planckTemperature={description:"Planck temperature",examples:["planckTemperature"]},i.derivative=wt,i.lsolve=bt,i.lup=Nt,i.lusolve=Mt,i.simplify=Et,i.rationalize=At,i.slu=Ot,i.usolve=St,i.qr=_t,i.abs=Tt,i.add=Ct,i.cbrt=zt,i.ceil=Bt,i.cube=Pt,i.divide=It,i.dotDivide=Rt,i.dotMultiply=Ut,i.dotPow=kt,i.exp=Dt,i.expm1=qt,i.fix=Lt,i.floor=Ft,i.gcd=jt,i.hypot=Ht,i.lcm=$t,i.log=Gt,i.log2=Vt,i.log1p=Zt,i.log10=Wt,i.mod=Jt,i.multiply=Yt,i.norm=Xt,i.nthRoot=Qt,i.pow=Kt,i.round=en,i.sign=rn,i.sqrt=tn,i.sqrtm=nn,i.square=an,i.subtract=on,i.unaryMinus=sn,i.unaryPlus=un,i.xgcd=cn,i.bitAnd=fn,i.bitNot=ln,i.bitOr=pn,i.bitXor=mn,i.leftShift=hn,i.rightArithShift=dn,i.rightLogShift=gn,i.bellNumbers=vn,i.catalan=yn,i.composition=xn,i.stirlingS2=wn,i.config=bn,i.import=Nn,i.typed=Mn,i.arg=En,i.conj=An,i.re=On,i.im=Sn,i.eval=_n,i.help=Tn,i.distance=Cn,i.intersect=zn,i.and=Bn,i.not=Pn,i.or=In,i.xor=Rn,i.concat=Un,i.cross=kn,i.det=Dn,i.diag=qn,i.dot=Ln,i.eye=Fn,i.filter=jn,i.flatten=Hn,i.forEach=$n,i.inv=Gn,i.kron=Vn,i.map=Zn,i.ones=Wn,i.partitionSelect=Jn,i.range=Yn,i.resize=Xn,i.reshape=Qn,i.size=Kn,i.sort=ei,i.squeeze=ri,i.subset=ti,i.trace=ni,i.transpose=ii,i.zeros=ai,i.combinations=oi,i.factorial=si,i.gamma=ui,i.kldivergence=ci,i.multinomial=fi,i.permutations=li,i.pickRandom=pi,i.random=mi,i.randomInt=hi,i.compare=di,i.compareNatural=gi,i.deepEqual=vi,i.equal=yi,i.larger=xi,i.largerEq=wi,i.smaller=bi,i.smallerEq=Ni,i.unequal=Mi,i.setCartesian=Ei,i.setDifference=Ai,i.setDistinct=Oi,i.setIntersect=Si,i.setIsSubset=_i,i.setMultiplicity=Ti,i.setPowerset=Ci,i.setSize=zi,i.setSymDifference=Bi,i.setUnion=Pi,i.erf=Ii,i.mad=Ri,i.max=Ui,i.mean=ki,i.median=Di,i.min=qi,i.mode=Li,i.prod=Fi,i.quantileSeq=ji,i.std=Hi,i.sum=$i,i.var=Gi,i.acos=Vi,i.acosh=Zi,i.acot=Wi,i.acoth=Ji,i.acsc=Yi,i.acsch=Xi,i.asec=Qi,i.asech=Ki,i.asin=ea,i.asinh=ra,i.atan=ta,i.atanh=na,i.atan2=ia,i.cos=aa,i.cosh=oa,i.cot=sa,i.coth=ua,i.csc=ca,i.csch=fa,i.sec=la,i.sech=pa,i.sin=ma,i.sinh=ha,i.tan=da,i.tanh=ga,i.to=va,i.clone=ya,i.format=xa,i.isNaN=wa,i.isInteger=ba,i.isNegative=Na,i.isNumeric=Ma,i.isPositive=Ea,i.isPrime=Aa,i.isZero=Oa,i.typeof=Sa,i}};var Ta={factory:function(e,r,t,n){return function(r,t){if("BigNumber"===t)return new e.BigNumber(r);if("Fraction"===t)return new e.Fraction(r);if("number"==typeof r)return r;if("Infinity"===r)return 1/0;if("NaN"===r)return NaN;if(!/^[\-+]?((\d+\.?\d*)|(\d*\.?\d+))([eE][+\-]?\d+)?$/.test(r))throw new Error('Invalid numeric value "'+r+'"');return parseFloat(r.replace(/^(0*)[0-9]/,function(e,r){return e.substring(r.length)}))}}},Ca=i.hasOwnProperty;function za(e,r){return!(!e||"object"!=typeof e)&&(!!Ca(Ia,r)||!(r in Object.prototype)&&!(r in Function.prototype))}function Ba(e,r){return!(!e||"function"!=typeof e[r])&&(!(Ca(e,r)&&e.__proto__&&r in e.__proto__)&&(!!Ca(Ra,r)||!(r in Object.prototype)&&!(r in Function.prototype)))}function Pa(e){return"object"==typeof e&&e&&e.constructor===Object}var Ia={length:!0,name:!0},Ra={toString:!0,valueOf:!0,toLocaleString:!0},Ua={getSafeProperty:function(e,r){if(Pa(e)&&za(e,r))return e[r];if("function"==typeof e[r]&&Ba(e,r))throw new Error('Cannot access method "'+r+'" as a property');throw new Error('No access to property "'+r+'"')},setSafeProperty:function(e,r,t){if(Pa(e)&&za(e,r))return e[r]=t;throw new Error('No access to property "'+r+'"')},isSafeProperty:za,validateSafeMethod:function(e,r){if(!Ba(e,r))throw new Error('No access to method "'+r+'"')},isSafeMethod:Ba,isPlainObject:Pa},ka={end:!0},Da=i.deepEqual,qa=i.hasOwnProperty;var La={name:"Node",path:"expression.node",math:!0,factory:function(e,r,t,n,i){function a(){if(!(this instanceof a))throw new SyntaxError("Constructor must be called with the new operator")}return a.prototype.eval=function(e){return this.compile().eval(e)},a.prototype.type="Node",a.prototype.isNode=!0,a.prototype.comment="",a.prototype.compile=function(){var e=this._compile(i.expression.mathWithTransform,{}),r={};return{eval:function(t){var n=t||{};return function(e){for(var r in e)if(qa(e,r)&&r in ka)throw new Error('Scope contains an illegal symbol, "'+r+'" is a reserved keyword')}(n),e(n,r,null)}}},a.prototype._compile=function(e,r){throw new Error("Method _compile should be implemented by type "+this.type)},a.prototype.forEach=function(e){throw new Error("Cannot run forEach on a Node interface")},a.prototype.map=function(e){throw new Error("Cannot run map on a Node interface")},a.prototype._ifNode=function(r){if(!e.isNode(r))throw new TypeError("Callback function must return a Node");return r},a.prototype.traverse=function(e){e(this,null,null),function e(r,t){r.forEach(function(r,n,i){t(r,n,i),e(r,t)})}(this,e)},a.prototype.transform=function(e){return function e(r,t){return r.map(function(r,n,i){return e(t(r,n,i),t)})}(e(this,null,null),e)},a.prototype.filter=function(e){var r=[];return this.traverse(function(t,n,i){e(t,n,i)&&r.push(t)}),r},a.prototype.find=function(){throw new Error("Function Node.find is deprecated. Use Node.filter instead.")},a.prototype.match=function(){throw new Error("Function Node.match is deprecated. See functions Node.filter, Node.transform, Node.traverse.")},a.prototype.clone=function(){throw new Error("Cannot clone a Node interface")},a.prototype.cloneDeep=function(){return this.map(function(e){return e.cloneDeep()})},a.prototype.equals=function(e){return!!e&&Da(this,e)},a.prototype.toString=function(e){var r;if(e&&"object"==typeof e)switch(typeof e.handler){case"object":case"undefined":break;case"function":r=e.handler(this,e);break;default:throw new TypeError("Object or function expected as callback")}return void 0!==r?r:this._toString(e)},a.prototype.toJSON=function(){throw new Error("Cannot serialize object: toJSON not implemented by "+this.type)},a.prototype.toHTML=function(e){var r;if(e&&"object"==typeof e)switch(typeof e.handler){case"object":case"undefined":break;case"function":r=e.handler(this,e);break;default:throw new TypeError("Object or function expected as callback")}return void 0!==r?r:this.toHTML(e)},a.prototype._toString=function(){throw new Error("_toString not implemented for "+this.type)},a.prototype.toTex=function(e){var r;if(e&&"object"==typeof e)switch(typeof e.handler){case"object":case"undefined":break;case"function":r=e.handler(this,e);break;default:throw new TypeError("Object or function expected as callback")}return void 0!==r?r:this._toTex(e)},a.prototype._toTex=function(e){throw new Error("_toTex not implemented for "+this.type)},a.prototype.getIdentifier=function(){return this.type},a.prototype.getContent=function(){return this},a}},Fa=J.map,ja=T.escape;var Ha={name:"IndexNode",path:"expression.node",factory:function(e,r,t,n){var i=t(La),a=t(Xe),o=Array.isArray;function s(r,t){if(!(this instanceof s))throw new SyntaxError("Constructor must be called with the new operator");if(this.dimensions=r,this.dotNotation=t||!1,!o(r)||!r.every(e.isNode))throw new TypeError('Array containing Nodes expected for parameter "dimensions"');if(this.dotNotation&&!this.isObjectProperty())throw new Error("dotNotation only applicable for object properties");var n=function(){throw new Error("Property `IndexNode.object` is deprecated, use `IndexNode.fn` instead")};Object.defineProperty(this,"object",{get:n,set:n})}function u(r,t,n){return new a(e.isBigNumber(r)?r.toNumber():r,e.isBigNumber(t)?t.toNumber():t,e.isBigNumber(n)?n.toNumber():n)}return s.prototype=new i,s.prototype.type="IndexNode",s.prototype.isIndexNode=!0,s.prototype._compile=function(r,t){var n=Fa(this.dimensions,function(n,i){if(e.isRangeNode(n)){if(n.needsEnd()){(c=Object.create(t)).end=!0;var a=n.start._compile(r,c),o=n.end._compile(r,c),s=n.step?n.step._compile(r,c):function(){return 1};return function(e,t,n){var c=r.size(n).valueOf(),f=Object.create(t);return f.end=c[i],u(a(e,f,n),o(e,f,n),s(e,f,n))}}return a=n.start._compile(r,t),o=n.end._compile(r,t),s=n.step?n.step._compile(r,t):function(){return 1},function(e,r,t){return u(a(e,r,t),o(e,r,t),s(e,r,t))}}if(e.isSymbolNode(n)&&"end"===n.name){var c;(c=Object.create(t)).end=!0;var f=n._compile(r,c);return function(e,t,n){var a=r.size(n).valueOf(),o=Object.create(t);return o.end=a[i],f(e,o,n)}}return f=n._compile(r,t),function(e,r,t){return f(e,r,t)}});return function(e,t,i){var a=Fa(n,function(r){return r(e,t,i)});return r.index.apply(r,a)}},s.prototype.forEach=function(e){for(var r=0;r<this.dimensions.length;r++)e(this.dimensions[r],"dimensions["+r+"]",this)},s.prototype.map=function(e){for(var r=[],t=0;t<this.dimensions.length;t++)r[t]=this._ifNode(e(this.dimensions[t],"dimensions["+t+"]",this));return new s(r)},s.prototype.clone=function(){return new s(this.dimensions.slice(0))},s.prototype.isObjectProperty=function(){return 1===this.dimensions.length&&e.isConstantNode(this.dimensions[0])&&"string"==typeof this.dimensions[0].value},s.prototype.getObjectProperty=function(){return this.isObjectProperty()?this.dimensions[0].value:null},s.prototype._toString=function(e){return this.dotNotation?"."+this.getObjectProperty():"["+this.dimensions.join(", ")+"]"},s.prototype.toJSON=function(){return{mathjs:"IndexNode",dimensions:this.dimensions,dotNotation:this.dotNotation}},s.fromJSON=function(e){return new s(e.dimensions,e.dotNotation)},s.prototype.toHTML=function(e){for(var r=[],t=0;t<this.dimensions.length;t++)r[t]=this.dimensions[t].toHTML();return this.dotNotation?'<span class="math-operator math-accessor-operator">.</span><span class="math-symbol math-property">'+ja(this.getObjectProperty())+"</span>":'<span class="math-parenthesis math-square-parenthesis">[</span>'+r.join('<span class="math-separator">,</span>')+'<span class="math-parenthesis math-square-parenthesis">]</span>'},s.prototype._toTex=function(e){var r=this.dimensions.map(function(r){return r.toTex(e)});return this.dotNotation?"."+this.getObjectProperty():"_{"+r.join(",")+"}"},s}},$a=function(e){return e&&e.isIndexError?new W(e.index+1,e.min+1,void 0!==e.max?e.max+1:void 0):e},Ga=i.clone,Va=J.validateIndex,Za=Ua.getSafeProperty,Wa=Ua.setSafeProperty;function Ja(e,r){if(1!==r.size().length)throw new V(r.size(),1);var t=r.dimension(0);if("string"!=typeof t)throw new TypeError("String expected as index to retrieve an object property");return Za(e,t)}function Ya(e,r,t){if(1!==r.size().length)throw new V(r.size(),1);var n=r.dimension(0);if("string"!=typeof n)throw new TypeError("String expected as index to retrieve an object property");var i=Ga(e);return Wa(i,n,t),i}var Xa={name:"subset",factory:function(e,r,t,n){var i=t(Ee),a=n("subset",{"Array, Index":function(e,r){var t=i(e).subset(r);return r.isScalar()?t:t.valueOf()},"Matrix, Index":function(e,r){return e.subset(r)},"Object, Index":Ja,"string, Index":function(r,t){if(!e.isIndex(t))throw new TypeError("Index expected");if(1!=t.size().length)throw new V(t.size().length,1);var n=r.length;Va(t.min()[0],n),Va(t.max()[0],n);var i="";return t.dimension(0).forEach(function(e){i+=r.charAt(e)}),i},"Array, Index, any":function(e,r,t){return i(Ga(e)).subset(r,t,void 0).valueOf()},"Array, Index, any, any":function(e,r,t,n){return i(Ga(e)).subset(r,t,n).valueOf()},"Matrix, Index, any":function(e,r,t){return e.clone().subset(r,t)},"Matrix, Index, any, any":function(e,r,t,n){return e.clone().subset(r,t,n)},"string, Index, string":o,"string, Index, string, string":o,"Object, Index, any":Ya});return a.toTex=void 0,a;function o(e,r,t,n){if(!r||!0!==r.isIndex)throw new TypeError("Index expected");if(1!=r.size().length)throw new V(r.size().length,1);if(void 0!==n){if("string"!=typeof n||1!==n.length)throw new TypeError("Single character expected as defaultValue")}else n=" ";var i=r.dimension(0),a=i.size()[0];if(a!=t.length)throw new V(i.size()[0],t.length);var o=e.length;Va(r.min()[0]),Va(r.max()[0]);for(var s=[],u=0;u<o;u++)s[u]=e.charAt(u);if(i.forEach(function(e,r){s[e]=t.charAt(r[0])}),s.length>o)for(u=o-1,a=s.length;u<a;u++)s[u]||(s[u]=n);return s.join("")}}},Qa=$a,Ka=Ua.getSafeProperty;var eo={factory:function(e,r,t,n){var i=t(Xa);return function(e,r){try{if(Array.isArray(e))return i(e,r);if(e&&"function"==typeof e.subset)return e.subset(r);if("string"==typeof e)return i(e,r);if("object"==typeof e){if(!r.isObjectProperty())throw new TypeError("Cannot apply a numeric index as object property");return Ka(e,r.getObjectProperty())}throw new TypeError("Cannot apply index: unsupported type of object")}catch(e){throw Qa(e)}}}},ro=Ua.getSafeProperty;var to={name:"AccessorNode",path:"expression.node",factory:function(e,r,t,n){var i=t(La),a=(t(Ha),t(eo));function o(r,t){if(!(this instanceof o))throw new SyntaxError("Constructor must be called with the new operator");if(!e.isNode(r))throw new TypeError('Node expected for parameter "object"');if(!e.isIndexNode(t))throw new TypeError('IndexNode expected for parameter "index"');this.object=r||null,this.index=t,Object.defineProperty(this,"name",{get:function(){return this.index?this.index.isObjectProperty()?this.index.getObjectProperty():"":this.object.name||""}.bind(this),set:function(){throw new Error("Cannot assign a new name, name is read-only")}})}function s(r){return!(e.isAccessorNode(r)||e.isArrayNode(r)||e.isConstantNode(r)||e.isFunctionNode(r)||e.isObjectNode(r)||e.isParenthesisNode(r)||e.isSymbolNode(r))}return o.prototype=new i,o.prototype.type="AccessorNode",o.prototype.isAccessorNode=!0,o.prototype._compile=function(e,r){var t=this.object._compile(e,r),n=this.index._compile(e,r);if(this.index.isObjectProperty()){var i=this.index.getObjectProperty();return function(e,r,n){return ro(t(e,r,n),i)}}return function(e,r,i){var o=t(e,r,i),s=n(e,r,o);return a(o,s)}},o.prototype.forEach=function(e){e(this.object,"object",this),e(this.index,"index",this)},o.prototype.map=function(e){return new o(this._ifNode(e(this.object,"object",this)),this._ifNode(e(this.index,"index",this)))},o.prototype.clone=function(){return new o(this.object,this.index)},o.prototype._toString=function(e){var r=this.object.toString(e);return s(this.object)&&(r="("+r+")"),r+this.index.toString(e)},o.prototype.toHTML=function(e){var r=this.object.toHTML(e);return s(this.object)&&(r='<span class="math-parenthesis math-round-parenthesis">(</span>'+r+'<span class="math-parenthesis math-round-parenthesis">)</span>'),r+this.index.toHTML(e)},o.prototype._toTex=function(e){var r=this.object.toTex(e);return s(this.object)&&(r="\\left("+r+"\\right)"),r+this.index.toTex(e)},o.prototype.toJSON=function(){return{mathjs:"AccessorNode",object:this.object,index:this.index}},o.fromJSON=function(e){return new o(e.object,e.index)},o}},no=J.map;var io={name:"ArrayNode",path:"expression.node",factory:function(e,r,t,n){var i=t(La);function a(r){if(!(this instanceof a))throw new SyntaxError("Constructor must be called with the new operator");if(this.items=r||[],!Array.isArray(this.items)||!this.items.every(e.isNode))throw new TypeError("Array containing Nodes expected");var t=function(){throw new Error("Property `ArrayNode.nodes` is deprecated, use `ArrayNode.items` instead")};Object.defineProperty(this,"nodes",{get:t,set:t})}return a.prototype=new i,a.prototype.type="ArrayNode",a.prototype.isArrayNode=!0,a.prototype._compile=function(e,r){var t=no(this.items,function(t){return t._compile(e,r)});if("Array"!==e.config().matrix){var n=e.matrix;return function(e,r,i){return n(no(t,function(t){return t(e,r,i)}))}}return function(e,r,n){return no(t,function(t){return t(e,r,n)})}},a.prototype.forEach=function(e){for(var r=0;r<this.items.length;r++)e(this.items[r],"items["+r+"]",this)},a.prototype.map=function(e){for(var r=[],t=0;t<this.items.length;t++)r[t]=this._ifNode(e(this.items[t],"items["+t+"]",this));return new a(r)},a.prototype.clone=function(){return new a(this.items.slice(0))},a.prototype._toString=function(e){return"["+this.items.map(function(r){return r.toString(e)}).join(", ")+"]"},a.prototype.toJSON=function(){return{mathjs:"ArrayNode",items:this.items}},a.fromJSON=function(e){return new a(e.items)},a.prototype.toHTML=function(e){return'<span class="math-parenthesis math-square-parenthesis">[</span>'+this.items.map(function(r){return r.toHTML(e)}).join('<span class="math-separator">,</span>')+'<span class="math-parenthesis math-square-parenthesis">]</span>'},a.prototype._toTex=function(e){var r="\\begin{bmatrix}";return this.items.forEach(function(t){t.items?r+=t.items.map(function(r){return r.toTex(e)}).join("&"):r+=t.toTex(e),r+="\\\\"}),r+="\\end{bmatrix}"},a}},ao=$a,oo=Ua.setSafeProperty;var so={factory:function(e,r,t,n){var i=t(Xa),a=t(Ee);return function(e,r,t){try{if(Array.isArray(e))return a(e).subset(r,t).valueOf();if(e&&"function"==typeof e.subset)return e.subset(r,t);if("string"==typeof e)return i(e,r,t);if("object"==typeof e){if(!r.isObjectProperty())throw TypeError("Cannot apply a numeric index as object property");return oo(e,r.getObjectProperty(),t),e}throw new TypeError("Cannot apply index: unsupported type of object")}catch(e){throw ao(e)}}}},uo=[{AssignmentNode:{},FunctionAssignmentNode:{}},{ConditionalNode:{latexLeftParens:!1,latexRightParens:!1,latexParens:!1}},{"OperatorNode:or":{associativity:"left",associativeWith:[]}},{"OperatorNode:xor":{associativity:"left",associativeWith:[]}},{"OperatorNode:and":{associativity:"left",associativeWith:[]}},{"OperatorNode:bitOr":{associativity:"left",associativeWith:[]}},{"OperatorNode:bitXor":{associativity:"left",associativeWith:[]}},{"OperatorNode:bitAnd":{associativity:"left",associativeWith:[]}},{"OperatorNode:equal":{associativity:"left",associativeWith:[]},"OperatorNode:unequal":{associativity:"left",associativeWith:[]},"OperatorNode:smaller":{associativity:"left",associativeWith:[]},"OperatorNode:larger":{associativity:"left",associativeWith:[]},"OperatorNode:smallerEq":{associativity:"left",associativeWith:[]},"OperatorNode:largerEq":{associativity:"left",associativeWith:[]}},{"OperatorNode:leftShift":{associativity:"left",associativeWith:[]},"OperatorNode:rightArithShift":{associativity:"left",associativeWith:[]},"OperatorNode:rightLogShift":{associativity:"left",associativeWith:[]}},{"OperatorNode:to":{associativity:"left",associativeWith:[]}},{RangeNode:{}},{"OperatorNode:add":{associativity:"left",associativeWith:["OperatorNode:add","OperatorNode:subtract"]},"OperatorNode:subtract":{associativity:"left",associativeWith:[]}},{"OperatorNode:multiply":{associativity:"left",associativeWith:["OperatorNode:multiply","OperatorNode:divide","Operator:dotMultiply","Operator:dotDivide"]},"OperatorNode:divide":{associativity:"left",associativeWith:[],latexLeftParens:!1,latexRightParens:!1,latexParens:!1},"OperatorNode:dotMultiply":{associativity:"left",associativeWith:["OperatorNode:multiply","OperatorNode:divide","OperatorNode:dotMultiply","OperatorNode:doDivide"]},"OperatorNode:dotDivide":{associativity:"left",associativeWith:[]},"OperatorNode:mod":{associativity:"left",associativeWith:[]}},{"OperatorNode:unaryPlus":{associativity:"right"},"OperatorNode:unaryMinus":{associativity:"right"},"OperatorNode:bitNot":{associativity:"right"},"OperatorNode:not":{associativity:"right"}},{"OperatorNode:pow":{associativity:"right",associativeWith:[],latexRightParens:!1},"OperatorNode:dotPow":{associativity:"right",associativeWith:[]}},{"OperatorNode:factorial":{associativity:"left"}},{"OperatorNode:transpose":{associativity:"left"}}];function co(e,r){var t=e;"keep"!==r&&(t=e.getContent());for(var n=t.getIdentifier(),i=0;i<uo.length;i++)if(n in uo[i])return i;return null}var fo={properties:uo,getPrecedence:co,getAssociativity:function(e,r){var t=e;"keep"!==r&&(t=e.getContent());var n=t.getIdentifier(),i=co(t,r);if(null===i)return null;var a=uo[i][n];if(a.hasOwnProperty("associativity")){if("left"===a.associativity)return"left";if("right"===a.associativity)return"right";throw Error("'"+n+"' has the invalid associativity '"+a.associativity+"'.")}return null},isAssociativeWith:function(e,r,t){var n=e,i=r;"keep"!==t&&(n=e.getContent(),i=r.getContent());var a=n.getIdentifier(),o=i.getIdentifier(),s=co(n,t);if(null===s)return null;var u=uo[s][a];if(u.hasOwnProperty("associativeWith")&&u.associativeWith instanceof Array){for(var c=0;c<u.associativeWith.length;c++)if(u.associativeWith[c]===o)return!0;return!1}return null}},lo=Ua.getSafeProperty,po=Ua.setSafeProperty;var mo={name:"AssignmentNode",path:"expression.node",factory:function(e,r,t,n){var i=t(La),a=t(so),o=t(eo),s=fo;function u(r,t,n){if(!(this instanceof u))throw new SyntaxError("Constructor must be called with the new operator");if(this.object=r,this.index=n?t:null,this.value=n||t,!e.isSymbolNode(r)&&!e.isAccessorNode(r))throw new TypeError('SymbolNode or AccessorNode expected as "object"');if(e.isSymbolNode(r)&&"end"===r.name)throw new Error('Cannot assign to symbol "end"');if(this.index&&!e.isIndexNode(this.index))throw new TypeError('IndexNode expected as "index"');if(!e.isNode(this.value))throw new TypeError('Node expected as "value"');Object.defineProperty(this,"name",{get:function(){return this.index?this.index.isObjectProperty()?this.index.getObjectProperty():"":this.object.name||""}.bind(this),set:function(){throw new Error("Cannot assign a new name, name is read-only")}})}function c(e,r){r||(r="keep");var t=s.getPrecedence(e,r),n=s.getPrecedence(e.value,r);return"all"===r||null!==n&&n<=t}return u.prototype=new i,u.prototype.type="AssignmentNode",u.prototype.isAssignmentNode=!0,u.prototype._compile=function(r,t){var n=this.object._compile(r,t),i=this.index?this.index._compile(r,t):null,s=this.value._compile(r,t),u=this.object.name;if(this.index){if(this.index.isObjectProperty()){var c=this.index.getObjectProperty();return function(e,r,t){var i=n(e,r,t),a=s(e,r,t);return po(i,c,a)}}if(e.isSymbolNode(this.object))return function(e,r,t){var o=n(e,r,t),c=s(e,r,t),f=i(e,r,o);return po(e,u,a(o,f,c)),c};var f=this.object.object._compile(r,t);if(this.object.index.isObjectProperty()){var l=this.object.index.getObjectProperty();return function(e,r,t){var n=f(e,r,t),o=lo(n,l),u=i(e,r,o),c=s(e,r,t);return po(n,l,a(o,u,c)),c}}var p=this.object.index._compile(r,t);return function(e,r,t){var n=f(e,r,t),u=p(e,r,n),c=o(n,u),l=i(e,r,c),m=s(e,r,t);return a(n,u,a(c,l,m)),m}}if(!e.isSymbolNode(this.object))throw new TypeError("SymbolNode expected as object");return function(e,r,t){return po(e,u,s(e,r,t))}},u.prototype.forEach=function(e){e(this.object,"object",this),this.index&&e(this.index,"index",this),e(this.value,"value",this)},u.prototype.map=function(e){return new u(this._ifNode(e(this.object,"object",this)),this.index?this._ifNode(e(this.index,"index",this)):null,this._ifNode(e(this.value,"value",this)))},u.prototype.clone=function(){return new u(this.object,this.index,this.value)},u.prototype._toString=function(e){var r=this.object.toString(e),t=this.index?this.index.toString(e):"",n=this.value.toString(e);return c(this,e&&e.parenthesis)&&(n="("+n+")"),r+t+" = "+n},u.prototype.toJSON=function(){return{mathjs:"AssignmentNode",object:this.object,index:this.index,value:this.value}},u.fromJSON=function(e){return new u(e.object,e.index,e.value)},u.prototype.toHTML=function(e){var r=this.object.toHTML(e),t=this.index?this.index.toHTML(e):"",n=this.value.toHTML(e);return c(this,e&&e.parenthesis)&&(n='<span class="math-paranthesis math-round-parenthesis">(</span>'+n+'<span class="math-paranthesis math-round-parenthesis">)</span>'),r+t+'<span class="math-operator math-assignment-operator math-variable-assignment-operator math-binary-operator">=</span>'+n},u.prototype._toTex=function(e){var r=this.object.toTex(e),t=this.index?this.index.toTex(e):"",n=this.value.toTex(e);return c(this,e&&e.parenthesis)&&(n="\\left("+n+"\\right)"),r+t+":="+n},u}},ho=J.forEach,go=J.map;var vo={name:"BlockNode",path:"expression.node",factory:function(e,r,t,n){var i=t(La),a=t(er);function o(r){if(!(this instanceof o))throw new SyntaxError("Constructor must be called with the new operator");if(!Array.isArray(r))throw new Error("Array expected");this.blocks=r.map(function(r){var t=r&&r.node,n=!r||void 0===r.visible||r.visible;if(!e.isNode(t))throw new TypeError('Property "node" must be a Node');if("boolean"!=typeof n)throw new TypeError('Property "visible" must be a boolean');return{node:t,visible:n}})}return o.prototype=new i,o.prototype.type="BlockNode",o.prototype.isBlockNode=!0,o.prototype._compile=function(e,r){var t=go(this.blocks,function(t){return{eval:t.node._compile(e,r),visible:t.visible}});return function(e,r,n){var i=[];return ho(t,function(t){var a=t.eval(e,r,n);t.visible&&i.push(a)}),new a(i)}},o.prototype.forEach=function(e){for(var r=0;r<this.blocks.length;r++)e(this.blocks[r].node,"blocks["+r+"].node",this)},o.prototype.map=function(e){for(var r=[],t=0;t<this.blocks.length;t++){var n=this.blocks[t],i=this._ifNode(e(n.node,"blocks["+t+"].node",this));r[t]={node:i,visible:n.visible}}return new o(r)},o.prototype.clone=function(){return new o(this.blocks.map(function(e){return{node:e.node,visible:e.visible}}))},o.prototype._toString=function(e){return this.blocks.map(function(r){return r.node.toString(e)+(r.visible?"":";")}).join("\n")},o.prototype.toJSON=function(){return{mathjs:"BlockNode",blocks:this.blocks}},o.fromJSON=function(e){return new o(e.blocks)},o.prototype.toHTML=function(e){return this.blocks.map(function(r){return r.node.toHTML(e)+(r.visible?"":'<span class="math-separator">;</span>')}).join('<span class="math-separator"><br /></span>')},o.prototype._toTex=function(e){return this.blocks.map(function(r){return r.node.toTex(e)+(r.visible?"":";")}).join("\\;\\;\n")},o}};var yo={name:"ConditionalNode",path:"expression.node",factory:function(e,r,t,n){var i=t(La),a=t(Cr);function o(r,t,n){if(!(this instanceof o))throw new SyntaxError("Constructor must be called with the new operator");if(!e.isNode(r))throw new TypeError("Parameter condition must be a Node");if(!e.isNode(t))throw new TypeError("Parameter trueExpr must be a Node");if(!e.isNode(n))throw new TypeError("Parameter falseExpr must be a Node");this.condition=r,this.trueExpr=t,this.falseExpr=n}return o.prototype=new i,o.prototype.type="ConditionalNode",o.prototype.isConditionalNode=!0,o.prototype._compile=function(r,t){var n=this.condition._compile(r,t),i=this.trueExpr._compile(r,t),o=this.falseExpr._compile(r,t);return function(r,t,s){return function(r){if("number"==typeof r||"boolean"==typeof r||"string"==typeof r)return!!r;if(r){if(e.isBigNumber(r))return!r.isZero();if(e.isComplex(r))return!(!r.re&&!r.im);if(e.isUnit(r))return!!r.value}if(null===r||void 0===r)return!1;throw new TypeError('Unsupported type of condition "'+a(r)+'"')}(n(r,t,s))?i(r,t,s):o(r,t,s)}},o.prototype.forEach=function(e){e(this.condition,"condition",this),e(this.trueExpr,"trueExpr",this),e(this.falseExpr,"falseExpr",this)},o.prototype.map=function(e){return new o(this._ifNode(e(this.condition,"condition",this)),this._ifNode(e(this.trueExpr,"trueExpr",this)),this._ifNode(e(this.falseExpr,"falseExpr",this)))},o.prototype.clone=function(){return new o(this.condition,this.trueExpr,this.falseExpr)},o.prototype._toString=function(e){var r=e&&e.parenthesis?e.parenthesis:"keep",t=fo.getPrecedence(this,r),n=this.condition.toString(e),i=fo.getPrecedence(this.condition,r);("all"===r||"OperatorNode"===this.condition.type||null!==i&&i<=t)&&(n="("+n+")");var a=this.trueExpr.toString(e),o=fo.getPrecedence(this.trueExpr,r);("all"===r||"OperatorNode"===this.trueExpr.type||null!==o&&o<=t)&&(a="("+a+")");var s=this.falseExpr.toString(e),u=fo.getPrecedence(this.falseExpr,r);return("all"===r||"OperatorNode"===this.falseExpr.type||null!==u&&u<=t)&&(s="("+s+")"),n+" ? "+a+" : "+s},o.prototype.toJSON=function(){return{mathjs:"ConditionalNode",condition:this.condition,trueExpr:this.trueExpr,falseExpr:this.falseExpr}},o.fromJSON=function(e){return new o(e.condition,e.trueExpr,e.falseExpr)},o.prototype.toHTML=function(e){var r=e&&e.parenthesis?e.parenthesis:"keep",t=fo.getPrecedence(this,r),n=this.condition.toHTML(e),i=fo.getPrecedence(this.condition,r);("all"===r||"OperatorNode"===this.condition.type||null!==i&&i<=t)&&(n='<span class="math-parenthesis math-round-parenthesis">(</span>'+n+'<span class="math-parenthesis math-round-parenthesis">)</span>');var a=this.trueExpr.toHTML(e),o=fo.getPrecedence(this.trueExpr,r);("all"===r||"OperatorNode"===this.trueExpr.type||null!==o&&o<=t)&&(a='<span class="math-parenthesis math-round-parenthesis">(</span>'+a+'<span class="math-parenthesis math-round-parenthesis">)</span>');var s=this.falseExpr.toHTML(e),u=fo.getPrecedence(this.falseExpr,r);return("all"===r||"OperatorNode"===this.falseExpr.type||null!==u&&u<=t)&&(s='<span class="math-parenthesis math-round-parenthesis">(</span>'+s+'<span class="math-parenthesis math-round-parenthesis">)</span>'),n+'<span class="math-operator math-conditional-operator">?</span>'+a+'<span class="math-operator math-conditional-operator">:</span>'+s},o.prototype._toTex=function(e){return"\\begin{cases} {"+this.trueExpr.toTex(e)+"}, &\\quad{\\text{if }\\;"+this.condition.toTex(e)+"}\\\\{"+this.falseExpr.toTex(e)+"}, &\\quad{\\text{otherwise}}\\end{cases}"},o}},xo=T.format,wo=L.escape;var bo={name:"ConstantNode",path:"expression.node",factory:function(e,r,t,n){var i=t(La),a=t(Cr);function o(e){if(!(this instanceof o))throw new SyntaxError("Constructor must be called with the new operator");if(2===arguments.length)throw new SyntaxError("new ConstantNode(valueStr, valueType) is not supported anymore since math v4.0.0. Use new ConstantNode(value) instead, where value is a non-stringified value.");this.value=e}return o.prototype=new i,o.prototype.type="ConstantNode",o.prototype.isConstantNode=!0,o.prototype._compile=function(e,r){var t=this.value;return function(){return t}},o.prototype.forEach=function(e){},o.prototype.map=function(e){return this.clone()},o.prototype.clone=function(){return new o(this.value)},o.prototype._toString=function(e){return xo(this.value,e)},o.prototype.toHTML=function(e){var r=this._toString(e);switch(a(this.value)){case"number":case"BigNumber":case"Fraction":return'<span class="math-number">'+r+"</span>";case"string":return'<span class="math-string">'+r+"</span>";case"boolean":return'<span class="math-boolean">'+r+"</span>";case"null":return'<span class="math-null-symbol">'+r+"</span>";case"undefined":return'<span class="math-undefined">'+r+"</span>";default:return'<span class="math-symbol">'+r+"</span>"}},o.prototype.toJSON=function(){return{mathjs:"ConstantNode",value:this.value}},o.fromJSON=function(e){return new o(e.value)},o.prototype._toTex=function(e){var r=this._toString(e);switch(a(this.value)){case"string":return"\\mathtt{"+wo(r)+"}";case"number":case"BigNumber":var t=r.toLowerCase().indexOf("e");return-1!==t?r.substring(0,t)+"\\cdot10^{"+r.substring(t+1)+"}":r;case"Fraction":return this.value.toLatex();default:return r}},o}},No=T.escape,Mo=J.forEach,Eo=J.join,Ao=Ua.setSafeProperty;var Oo={name:"FunctionAssignmentNode",path:"expression.node",factory:function(e,r,t,n){var i=t(La);function a(r,t,n){if(!(this instanceof a))throw new SyntaxError("Constructor must be called with the new operator");if("string"!=typeof r)throw new TypeError('String expected for parameter "name"');if(!Array.isArray(t))throw new TypeError('Array containing strings or objects expected for parameter "params"');if(!e.isNode(n))throw new TypeError('Node expected for parameter "expr"');if(r in ka)throw new Error('Illegal function name, "'+r+'" is a reserved keyword');this.name=r,this.params=t.map(function(e){return e&&e.name||e}),this.types=t.map(function(e){return e&&e.type||"any"}),this.expr=n}function o(e,r){var t=fo.getPrecedence(e,r),n=fo.getPrecedence(e.expr,r);return"all"===r||null!==n&&n<=t}return a.prototype=new i,a.prototype.type="FunctionAssignmentNode",a.prototype.isFunctionAssignmentNode=!0,a.prototype._compile=function(e,r){var t=Object.create(r);Mo(this.params,function(e){t[e]=!0});var i=this.expr._compile(e,t),a=this.name,o=this.params,s=Eo(this.types,","),u=a+"("+Eo(this.params,", ")+")";return function(e,r,t){var c={};c[s]=function(){for(var n=Object.create(r),a=0;a<o.length;a++)n[o[a]]=arguments[a];return i(e,n,t)};var f=n(a,c);return f.syntax=u,Ao(e,a,f),f}},a.prototype.forEach=function(e){e(this.expr,"expr",this)},a.prototype.map=function(e){var r=this._ifNode(e(this.expr,"expr",this));return new a(this.name,this.params.slice(0),r)},a.prototype.clone=function(){return new a(this.name,this.params.slice(0),this.expr)},a.prototype._toString=function(e){var r=e&&e.parenthesis?e.parenthesis:"keep",t=this.expr.toString(e);return o(this,r)&&(t="("+t+")"),this.name+"("+this.params.join(", ")+") = "+t},a.prototype.toJSON=function(){var e=this.types;return{mathjs:"FunctionAssignmentNode",name:this.name,params:this.params.map(function(r,t){return{name:r,type:e[t]}}),expr:this.expr}},a.fromJSON=function(e){return new a(e.name,e.params,e.expr)},a.prototype.toHTML=function(e){for(var r=e&&e.parenthesis?e.parenthesis:"keep",t=[],n=0;n<this.params.length;n++)t.push('<span class="math-symbol math-parameter">'+No(this.params[n])+"</span>");var i=this.expr.toHTML(e);return o(this,r)&&(i='<span class="math-parenthesis math-round-parenthesis">(</span>'+i+'<span class="math-parenthesis math-round-parenthesis">)</span>'),'<span class="math-function">'+No(this.name)+'</span><span class="math-parenthesis math-round-parenthesis">(</span>'+t.join('<span class="math-separator">,</span>')+'<span class="math-parenthesis math-round-parenthesis">)</span><span class="math-operator math-assignment-operator math-variable-assignment-operator math-binary-operator">=</span>'+i},a.prototype._toTex=function(e){var r=e&&e.parenthesis?e.parenthesis:"keep",t=this.expr.toTex(e);return o(this,r)&&(t="\\left("+t+"\\right)"),"\\mathrm{"+this.name+"}\\left("+this.params.map(L.toSymbol).join(",")+"\\right):="+t},a}},So=T.stringify,_o=T.escape,To=Ua.isSafeProperty,Co=i.hasOwnProperty;var zo={name:"ObjectNode",path:"expression.node",factory:function(e,r,t,n){var i=t(La);function a(r){if(!(this instanceof a))throw new SyntaxError("Constructor must be called with the new operator");if(this.properties=r||{},r&&("object"!=typeof r||!Object.keys(r).every(function(t){return e.isNode(r[t])})))throw new TypeError("Object containing Nodes expected")}return a.prototype=new i,a.prototype.type="ObjectNode",a.prototype.isObjectNode=!0,a.prototype._compile=function(e,r){var t={};for(var n in this.properties)if(Co(this.properties,n)){var i=So(n),a=JSON.parse(i);if(!To(this.properties,a))throw new Error('No access to property "'+a+'"');t[a]=this.properties[n]._compile(e,r)}return function(e,r,n){var i={};for(var a in t)Co(t,a)&&(i[a]=t[a](e,r,n));return i}},a.prototype.forEach=function(e){for(var r in this.properties)this.properties.hasOwnProperty(r)&&e(this.properties[r],"properties["+So(r)+"]",this)},a.prototype.map=function(e){var r={};for(var t in this.properties)this.properties.hasOwnProperty(t)&&(r[t]=this._ifNode(e(this.properties[t],"properties["+So(t)+"]",this)));return new a(r)},a.prototype.clone=function(){var e={};for(var r in this.properties)this.properties.hasOwnProperty(r)&&(e[r]=this.properties[r]);return new a(e)},a.prototype._toString=function(e){var r=[];for(var t in this.properties)this.properties.hasOwnProperty(t)&&r.push(So(t)+": "+this.properties[t].toString(e));return"{"+r.join(", ")+"}"},a.prototype.toJSON=function(){return{mathjs:"ObjectNode",properties:this.properties}},a.fromJSON=function(e){return new a(e.properties)},a.prototype.toHTML=function(e){var r=[];for(var t in this.properties)this.properties.hasOwnProperty(t)&&r.push('<span class="math-symbol math-property">'+_o(t)+'</span><span class="math-operator math-assignment-operator math-property-assignment-operator math-binary-operator">:</span>'+this.properties[t].toHTML(e));return'<span class="math-parenthesis math-curly-parenthesis">{</span>'+r.join('<span class="math-separator">,</span>')+'<span class="math-parenthesis math-curly-parenthesis">}</span>'},a.prototype._toTex=function(e){var r=[];for(var t in this.properties)this.properties.hasOwnProperty(t)&&r.push("\\mathbf{"+t+":} & "+this.properties[t].toTex(e)+"\\\\");return"\\left\\{\\begin{array}{ll}"+r.join("\n")+"\\end{array}\\right\\}"},a}},Bo=J.map,Po=T.escape,Io=Ua.isSafeMethod,Ro=Ua.getSafeProperty;var Uo={name:"OperatorNode",path:"expression.node",factory:function(e,r,t,n){var i=t(La);function a(r,t,n,i){if(!(this instanceof a))throw new SyntaxError("Constructor must be called with the new operator");if("string"!=typeof r)throw new TypeError('string expected for parameter "op"');if("string"!=typeof t)throw new TypeError('string expected for parameter "fn"');if(!Array.isArray(n)||!n.every(e.isNode))throw new TypeError('Array containing Nodes expected for parameter "args"');this.implicit=!0===i,this.op=r,this.fn=t,this.args=n||[]}function o(e,r,t,n,i){var a=fo.getPrecedence(e,r),o=fo.getAssociativity(e,r);if("all"===r||n.length>2&&"OperatorNode:add"!==e.getIdentifier()&&"OperatorNode:multiply"!==e.getIdentifier())return n.map(function(e){switch(e.getContent().type){case"ArrayNode":case"ConstantNode":case"SymbolNode":case"ParenthesisNode":return!1;default:return!0}});var s=void 0;switch(n.length){case 0:s=[];break;case 1:var u=fo.getPrecedence(n[0],r);if(i&&null!==u){var c;if("keep"===r?(c=n[0].getIdentifier(),h=e.getIdentifier()):(c=n[0].getContent().getIdentifier(),h=e.getContent().getIdentifier()),!1===fo.properties[a][h].latexLeftParens){s=[!1];break}if(!1===fo.properties[u][c].latexParens){s=[!1];break}}if(null===u){s=[!1];break}if(u<=a){s=[!0];break}s=[!1];break;case 2:var f,l,p=fo.getPrecedence(n[0],r),m=fo.isAssociativeWith(e,n[0],r);f=null!==p&&(p===a&&"right"===o&&!m||p<a);var h,d,g,v=fo.getPrecedence(n[1],r),y=fo.isAssociativeWith(e,n[1],r);l=null!==v&&(v===a&&"left"===o&&!y||v<a),i&&("keep"===r?(h=e.getIdentifier(),d=e.args[0].getIdentifier(),g=e.args[1].getIdentifier()):(h=e.getContent().getIdentifier(),d=e.args[0].getContent().getIdentifier(),g=e.args[1].getContent().getIdentifier()),null!==p&&(!1===fo.properties[a][h].latexLeftParens&&(f=!1),!1===fo.properties[p][d].latexParens&&(f=!1)),null!==v&&(!1===fo.properties[a][h].latexRightParens&&(l=!1),!1===fo.properties[v][g].latexParens&&(l=!1))),s=[f,l];break;default:"OperatorNode:add"!==e.getIdentifier()&&"OperatorNode:multiply"!==e.getIdentifier()||(s=n.map(function(t){var n=fo.getPrecedence(t,r),i=fo.isAssociativeWith(e,t,r),s=fo.getAssociativity(t,r);return null!==n&&(a===n&&o===s&&!i||n<a)}))}return n.length>=2&&"OperatorNode:multiply"===e.getIdentifier()&&e.implicit&&"auto"===r&&"hide"===t&&(s=n.map(function(e,r){var t="ParenthesisNode"===e.getIdentifier();return!(!s[r]&&!t)})),s}return a.prototype=new i,a.prototype.type="OperatorNode",a.prototype.isOperatorNode=!0,a.prototype._compile=function(e,r){if("string"!=typeof this.fn||!Io(e,this.fn))throw e[this.fn]?new Error('No access to function "'+this.fn+'"'):new Error("Function "+this.fn+' missing in provided namespace "math"');var t=Ro(e,this.fn),n=Bo(this.args,function(t){return t._compile(e,r)});if(1===n.length){var i=n[0];return function(e,r,n){return t(i(e,r,n))}}if(2===n.length){i=n[0];var a=n[1];return function(e,r,n){return t(i(e,r,n),a(e,r,n))}}return function(e,r,i){return t.apply(null,Bo(n,function(t){return t(e,r,i)}))}},a.prototype.forEach=function(e){for(var r=0;r<this.args.length;r++)e(this.args[r],"args["+r+"]",this)},a.prototype.map=function(e){for(var r=[],t=0;t<this.args.length;t++)r[t]=this._ifNode(e(this.args[t],"args["+t+"]",this));return new a(this.op,this.fn,r,this.implicit)},a.prototype.clone=function(){return new a(this.op,this.fn,this.args.slice(0),this.implicit)},a.prototype.isUnary=function(){return 1===this.args.length},a.prototype.isBinary=function(){return 2===this.args.length},a.prototype._toString=function(e){var r=e&&e.parenthesis?e.parenthesis:"keep",t=e&&e.implicit?e.implicit:"hide",n=this.args,i=o(this,r,t,n,!1);if(1===n.length){var a=fo.getAssociativity(this,r),s=n[0].toString(e);return i[0]&&(s="("+s+")"),"right"===a?this.op+s:s+this.op}if(2==n.length){var u=n[0].toString(e),c=n[1].toString(e);return i[0]&&(u="("+u+")"),i[1]&&(c="("+c+")"),this.implicit&&"OperatorNode:multiply"===this.getIdentifier()&&"hide"==t?u+" "+c:u+" "+this.op+" "+c}if(n.length>2&&("OperatorNode:add"===this.getIdentifier()||"OperatorNode:multiply"===this.getIdentifier())){var f=n.map(function(r,t){return r=r.toString(e),i[t]&&(r="("+r+")"),r});return this.implicit&&"OperatorNode:multiply"===this.getIdentifier()&&"hide"===t?f.join(" "):f.join(" "+this.op+" ")}return this.fn+"("+this.args.join(", ")+")"},a.prototype.toJSON=function(){return{mathjs:"OperatorNode",op:this.op,fn:this.fn,args:this.args,implicit:this.implicit}},a.fromJSON=function(e){return new a(e.op,e.fn,e.args,e.implicit)},a.prototype.toHTML=function(e){var r=e&&e.parenthesis?e.parenthesis:"keep",t=e&&e.implicit?e.implicit:"hide",n=this.args,i=o(this,r,t,n,!1);if(1===n.length){var a=fo.getAssociativity(this,r),s=n[0].toHTML(e);return i[0]&&(s='<span class="math-parenthesis math-round-parenthesis">(</span>'+s+'<span class="math-parenthesis math-round-parenthesis">)</span>'),"right"===a?'<span class="math-operator math-unary-operator math-lefthand-unary-operator">'+Po(this.op)+"</span>"+s:'<span class="math-operator math-unary-operator math-righthand-unary-operator">'+Po(this.op)+"</span>"+s}if(2==n.length){var u=n[0].toHTML(e),c=n[1].toHTML(e);return i[0]&&(u='<span class="math-parenthesis math-round-parenthesis">(</span>'+u+'<span class="math-parenthesis math-round-parenthesis">)</span>'),i[1]&&(c='<span class="math-parenthesis math-round-parenthesis">(</span>'+c+'<span class="math-parenthesis math-round-parenthesis">)</span>'),this.implicit&&"OperatorNode:multiply"===this.getIdentifier()&&"hide"==t?u+'<span class="math-operator math-binary-operator math-implicit-binary-operator"></span>'+c:u+'<span class="math-operator math-binary-operator math-explicit-binary-operator">'+Po(this.op)+"</span>"+c}if(n.length>2&&("OperatorNode:add"===this.getIdentifier()||"OperatorNode:multiply"===this.getIdentifier())){var f=n.map(function(r,t){return r=r.toHTML(e),i[t]&&(r='<span class="math-parenthesis math-round-parenthesis">(</span>'+r+'<span class="math-parenthesis math-round-parenthesis">)</span>'),r});return this.implicit&&"OperatorNode:multiply"===this.getIdentifier()&&"hide"===t?f.join('<span class="math-operator math-binary-operator math-implicit-binary-operator"></span>'):f.join('<span class="math-operator math-binary-operator math-explicit-binary-operator">'+Po(this.op)+"</span>")}return'<span class="math-function">'+Po(this.fn)+'</span><span class="math-paranthesis math-round-parenthesis">(</span>'+f.join('<span class="math-separator">,</span>')+'<span class="math-paranthesis math-round-parenthesis">)</span>'},a.prototype._toTex=function(e){var r=e&&e.parenthesis?e.parenthesis:"keep",t=e&&e.implicit?e.implicit:"hide",n=this.args,i=o(this,r,t,n,!0),a=L.operators[this.fn];if(a=void 0===a?this.op:a,1===n.length){var s=fo.getAssociativity(this,r),u=n[0].toTex(e);return i[0]&&(u="\\left("+u+"\\right)"),"right"===s?a+u:u+a}if(2===n.length){var c=n[0],f=c.toTex(e);i[0]&&(f="\\left("+f+"\\right)");var l,p=n[1].toTex(e);switch(i[1]&&(p="\\left("+p+"\\right)"),l="keep"===r?c.getIdentifier():c.getContent().getIdentifier(),this.getIdentifier()){case"OperatorNode:divide":return a+"{"+f+"}{"+p+"}";case"OperatorNode:pow":switch(f="{"+f+"}",p="{"+p+"}",l){case"ConditionalNode":case"OperatorNode:divide":f="\\left("+f+"\\right)"}case"OperatorNode:multiply":if(this.implicit&&"hide"===t)return f+"~"+p}return f+a+p}if(n.length>2&&("OperatorNode:add"===this.getIdentifier()||"OperatorNode:multiply"===this.getIdentifier())){var m=n.map(function(r,t){return r=r.toTex(e),i[t]&&(r="\\left("+r+"\\right)"),r});return"OperatorNode:multiply"===this.getIdentifier()&&this.implicit?m.join("~"):m.join(a)}return"\\mathrm{"+this.fn+"}\\left("+n.map(function(r){return r.toTex(e)}).join(",")+"\\right)"},a.prototype.getIdentifier=function(){return this.type+":"+this.fn},a}};var ko={name:"ParenthesisNode",path:"expression.node",factory:function(e,r,t,n){var i=t(La);function a(r){if(!(this instanceof a))throw new SyntaxError("Constructor must be called with the new operator");if(!e.isNode(r))throw new TypeError('Node expected for parameter "content"');this.content=r}return a.prototype=new i,a.prototype.type="ParenthesisNode",a.prototype.isParenthesisNode=!0,a.prototype._compile=function(e,r){return this.content._compile(e,r)},a.prototype.getContent=function(){return this.content.getContent()},a.prototype.forEach=function(e){e(this.content,"content",this)},a.prototype.map=function(e){return new a(e(this.content,"content",this))},a.prototype.clone=function(){return new a(this.content)},a.prototype._toString=function(e){return!e||e&&!e.parenthesis||e&&"keep"===e.parenthesis?"("+this.content.toString(e)+")":this.content.toString(e)},a.prototype.toJSON=function(){return{mathjs:"ParenthesisNode",content:this.content}},a.fromJSON=function(e){return new a(e.content)},a.prototype.toHTML=function(e){return!e||e&&!e.parenthesis||e&&"keep"===e.parenthesis?'<span class="math-parenthesis math-round-parenthesis">(</span>'+this.content.toHTML(e)+'<span class="math-parenthesis math-round-parenthesis">)</span>':this.content.toHTML(e)},a.prototype._toTex=function(e){return!e||e&&!e.parenthesis||e&&"keep"===e.parenthesis?"\\left("+this.content.toTex(e)+"\\right)":this.content.toTex(e)},a}},Do=T.escape,qo=i.hasOwnProperty,Lo=Ua.getSafeProperty;var Fo={name:"SymbolNode",path:"expression.node",math:!0,factory:function(e,r,t,n,i){var a=t(La);function o(r){return!!e.Unit&&e.Unit.isValuelessUnit(r)}function s(e){if(!(this instanceof s))throw new SyntaxError("Constructor must be called with the new operator");if("string"!=typeof e)throw new TypeError('String expected for parameter "name"');this.name=e}return s.prototype=new a,s.prototype.type="SymbolNode",s.prototype.isSymbolNode=!0,s.prototype._compile=function(r,t){var n=this.name;if(qo(t,n))return function(e,r,t){return r[n]};if(n in r)return function(e,t,i){return Lo(n in e?e:r,n)};var i=o(n);return function(r,t,a){return n in r?Lo(r,n):i?new e.Unit(null,n):function(e){throw new Error("Undefined symbol "+e)}(n)}},s.prototype.forEach=function(e){},s.prototype.map=function(e){return this.clone()},s.prototype.clone=function(){return new s(this.name)},s.prototype._toString=function(e){return this.name},s.prototype.toHTML=function(e){var r=Do(this.name);return"true"==r||"false"==r?'<span class="math-symbol math-boolean">'+r+"</span>":"i"==r?'<span class="math-symbol math-imaginary-symbol">'+r+"</span>":"Infinity"==r?'<span class="math-symbol math-infinity-symbol">'+r+"</span>":"NaN"==r?'<span class="math-symbol math-nan-symbol">'+r+"</span>":"null"==r?'<span class="math-symbol math-null-symbol">'+r+"</span>":"undefined"==r?'<span class="math-symbol math-undefined-symbol">'+r+"</span>":'<span class="math-symbol">'+r+"</span>"},s.prototype.toJSON=function(){return{mathjs:"SymbolNode",name:this.name}},s.fromJSON=function(e){return new s(e.name)},s.prototype._toTex=function(e){var r=!1;void 0===i[this.name]&&o(this.name)&&(r=!0);var t=L.toSymbol(this.name,r);return"\\"===t[0]?t:" "+t},s}},jo=L,Ho=T.escape,$o=i.hasOwnProperty,Go=J.map,Vo=Ua.validateSafeMethod,Zo=Ua.getSafeProperty;var Wo={name:"FunctionNode",path:"expression.node",math:!0,factory:function(e,r,t,n,i){var a=t(La),o=t(Fo);function s(r,t){if(!(this instanceof s))throw new SyntaxError("Constructor must be called with the new operator");if("string"==typeof r&&(r=new o(r)),!e.isNode(r))throw new TypeError('Node expected as parameter "fn"');if(!Array.isArray(t)||!t.every(e.isNode))throw new TypeError('Array containing Nodes expected for parameter "args"');this.fn=r,this.args=t||[],Object.defineProperty(this,"name",{get:function(){return this.fn.name||""}.bind(this),set:function(){throw new Error("Cannot assign a new name, name is read-only")}});var n=function(){throw new Error("Property `FunctionNode.object` is deprecated, use `FunctionNode.fn` instead")};Object.defineProperty(this,"object",{get:n,set:n})}s.prototype=new a,s.prototype.type="FunctionNode",s.prototype.isFunctionNode=!0,s.prototype._compile=function(r,t){if(!(this instanceof s))throw new TypeError("No valid FunctionNode");var n=Go(this.args,function(e){return e._compile(r,t)});if(e.isSymbolNode(this.fn)){var i=this.fn.name,a=i in r?Zo(r,i):void 0;if("function"==typeof a&&1==a.rawArgs){var o=this.args;return function(e,t,n){return(i in e?Zo(e,i):a)(o,r,e)}}if(1===n.length){var u=n[0];return function(e,r,t){return(i in e?Zo(e,i):a)(u(e,r,t))}}if(2===n.length){u=n[0];var c=n[1];return function(e,r,t){return(i in e?Zo(e,i):a)(u(e,r,t),c(e,r,t))}}return function(e,r,t){return(i in e?Zo(e,i):a).apply(null,Go(n,function(n){return n(e,r,t)}))}}if(e.isAccessorNode(this.fn)&&e.isIndexNode(this.fn.index)&&this.fn.index.isObjectProperty()){var f=this.fn.object._compile(r,t),l=this.fn.index.getObjectProperty();return o=this.args,function(e,t,i){var a=f(e,t,i);return Vo(a,l),a[l]&&a[l].rawArgs?a[l](o,r,e):a[l].apply(a,Go(n,function(r){return r(e,t,i)}))}}var p=this.fn._compile(r,t);return function(e,t,i){var a=p(e,t,i);return a&&a.rawArgs?a(o,r,e):a.apply(a,Go(n,function(r){return r(e,t,i)}))}},s.prototype.forEach=function(e){for(var r=0;r<this.args.length;r++)e(this.args[r],"args["+r+"]",this)},s.prototype.map=function(e){for(var r=this.fn.map(e),t=[],n=0;n<this.args.length;n++)t[n]=this._ifNode(e(this.args[n],"args["+n+"]",this));return new s(r,t)},s.prototype.clone=function(){return new s(this.fn,this.args.slice(0))};var u=s.prototype.toString;function c(r,t,n){for(var i,a="",o=new RegExp("\\$(?:\\{([a-z_][a-z_0-9]*)(?:\\[([0-9]+)\\])?\\}|\\$)","ig"),s=0;null!==(i=o.exec(r));)if(a+=r.substring(s,i.index),s=i.index,"$$"===i[0])a+="$",s++;else{s+=i[0].length;var u=t[i[1]];if(!u)throw new ReferenceError("Template: Property "+i[1]+" does not exist.");if(void 0===i[2])switch(typeof u){case"string":a+=u;break;case"object":if(e.isNode(u))a+=u.toTex(n);else{if(!Array.isArray(u))throw new TypeError("Template: "+i[1]+" has to be a Node, String or array of Nodes");a+=u.map(function(r,t){if(e.isNode(r))return r.toTex(n);throw new TypeError("Template: "+i[1]+"["+t+"] is not a Node.")}).join(",")}break;default:throw new TypeError("Template: "+i[1]+" has to be a Node, String or array of Nodes")}else{if(!e.isNode(u[i[2]]&&u[i[2]]))throw new TypeError("Template: "+i[1]+"["+i[2]+"] is not a Node.");a+=u[i[2]].toTex(n)}}return a+=r.slice(s)}s.prototype.toString=function(e){var r,t=this.fn.toString(e);return e&&"object"==typeof e.handler&&$o(e.handler,t)&&(r=e.handler[t](this,e)),void 0!==r?r:u.call(this,e)},s.prototype._toString=function(r){var t=this.args.map(function(e){return e.toString(r)});return(e.isFunctionAssignmentNode(this.fn)?"("+this.fn.toString(r)+")":this.fn.toString(r))+"("+t.join(", ")+")"},s.prototype.toJSON=function(){return{mathjs:"FunctionNode",fn:this.fn,args:this.args}},s.fromJSON=function(e){return new s(e.fn,e.args)},s.prototype.toHTML=function(e){var r=this.args.map(function(r){return r.toHTML(e)});return'<span class="math-function">'+Ho(this.fn)+'</span><span class="math-paranthesis math-round-parenthesis">(</span>'+r.join('<span class="math-separator">,</span>')+'<span class="math-paranthesis math-round-parenthesis">)</span>'};var f=s.prototype.toTex;return s.prototype.toTex=function(e){var r;return e&&"object"==typeof e.handler&&$o(e.handler,this.name)&&(r=e.handler[this.name](this,e)),void 0!==r?r:f.call(this,e)},s.prototype._toTex=function(e){var r,t,n=this.args.map(function(r){return r.toTex(e)});switch(!i[this.name]||"function"!=typeof i[this.name].toTex&&"object"!=typeof i[this.name].toTex&&"string"!=typeof i[this.name].toTex||(r=i[this.name].toTex),typeof r){case"function":t=r(this,e);break;case"string":t=c(r,this,e);break;case"object":switch(typeof r[n.length]){case"function":t=r[n.length](this,e);break;case"string":t=c(r[n.length],this,e)}}return void 0!==t?t:c(jo.defaultTemplate,this,e)},s.prototype.getIdentifier=function(){return this.type+":"+this.name},s}};var Jo={name:"RangeNode",path:"expression.node",factory:function(e,r,t,n){var i=t(La);function a(r,t,n){if(!(this instanceof a))throw new SyntaxError("Constructor must be called with the new operator");if(!e.isNode(r))throw new TypeError("Node expected");if(!e.isNode(t))throw new TypeError("Node expected");if(n&&!e.isNode(n))throw new TypeError("Node expected");if(arguments.length>3)throw new Error("Too many arguments");this.start=r,this.end=t,this.step=n||null}function o(e,r){var t=fo.getPrecedence(e,r),n={},i=fo.getPrecedence(e.start,r);if(n.start=null!==i&&i<=t||"all"===r,e.step){var a=fo.getPrecedence(e.step,r);n.step=null!==a&&a<=t||"all"===r}var o=fo.getPrecedence(e.end,r);return n.end=null!==o&&o<=t||"all"===r,n}return a.prototype=new i,a.prototype.type="RangeNode",a.prototype.isRangeNode=!0,a.prototype.needsEnd=function(){return this.filter(function(r){return e.isSymbolNode(r)&&"end"===r.name}).length>0},a.prototype._compile=function(e,r){var t=e.range,n=this.start._compile(e,r),i=this.end._compile(e,r);if(this.step){var a=this.step._compile(e,r);return function(e,r,o){return t(n(e,r,o),i(e,r,o),a(e,r,o))}}return function(e,r,a){return t(n(e,r,a),i(e,r,a))}},a.prototype.forEach=function(e){e(this.start,"start",this),e(this.end,"end",this),this.step&&e(this.step,"step",this)},a.prototype.map=function(e){return new a(this._ifNode(e(this.start,"start",this)),this._ifNode(e(this.end,"end",this)),this.step&&this._ifNode(e(this.step,"step",this)))},a.prototype.clone=function(){return new a(this.start,this.end,this.step&&this.step)},a.prototype._toString=function(e){var r,t=o(this,e&&e.parenthesis?e.parenthesis:"keep"),n=this.start.toString(e);if(t.start&&(n="("+n+")"),r=n,this.step){var i=this.step.toString(e);t.step&&(i="("+i+")"),r+=":"+i}var a=this.end.toString(e);return t.end&&(a="("+a+")"),r+=":"+a},a.prototype.toJSON=function(){return{mathjs:"RangeNode",start:this.start,end:this.end,step:this.step}},a.fromJSON=function(e){return new a(e.start,e.end,e.step)},a.prototype.toHTML=function(e){var r,t=o(this,e&&e.parenthesis?e.parenthesis:"keep"),n=this.start.toHTML(e);if(t.start&&(n='<span class="math-parenthesis math-round-parenthesis">(</span>'+n+'<span class="math-parenthesis math-round-parenthesis">)</span>'),r=n,this.step){var i=this.step.toHTML(e);t.step&&(i='<span class="math-parenthesis math-round-parenthesis">(</span>'+i+'<span class="math-parenthesis math-round-parenthesis">)</span>'),r+='<span class="math-operator math-range-operator">:</span>'+i}var a=this.end.toHTML(e);return t.end&&(a='<span class="math-parenthesis math-round-parenthesis">(</span>'+a+'<span class="math-parenthesis math-round-parenthesis">)</span>'),r+='<span class="math-operator math-range-operator">:</span>'+a},a.prototype._toTex=function(e){var r=o(this,e&&e.parenthesis?e.parenthesis:"keep"),t=this.start.toTex(e);if(r.start&&(t="\\left("+t+"\\right)"),this.step){var n=this.step.toTex(e);r.step&&(n="\\left("+n+"\\right)"),t+=":"+n}var i=this.end.toTex(e);return r.end&&(i="\\left("+i+"\\right)"),t+=":"+i},a}};var Yo={name:"parse",path:"expression",factory:function(e,r,t,n){var i=t(Ta),a=t(to),o=t(io),s=t(mo),u=t(vo),c=t(yo),f=t(bo),l=t(Oo),p=t(Ha),m=t(zo),h=t(Uo),g=t(ko),v=t(Wo),y=t(Jo),x=t(Fo);function w(r,t){if(1!==arguments.length&&2!==arguments.length)throw new d("parse",arguments.length,1,2);if(S=t&&t.nodes?t.nodes:{},"string"==typeof r)return _=r,V();if(Array.isArray(r)||r instanceof e.Matrix)return A(r,function(e){if("string"!=typeof e)throw new TypeError("String expected");return _=e,V()});throw new TypeError("String or matrix expected")}var b={NULL:0,DELIMITER:1,NUMBER:2,SYMBOL:3,UNKNOWN:4},N={",":!0,"(":!0,")":!0,"[":!0,"]":!0,"{":!0,"}":!0,'"':!0,";":!0,"+":!0,"-":!0,"*":!0,".*":!0,"/":!0,"./":!0,"%":!0,"^":!0,".^":!0,"~":!0,"!":!0,"&":!0,"|":!0,"^|":!0,"'":!0,"=":!0,":":!0,"?":!0,"==":!0,"!=":!0,"<":!0,">":!0,"<=":!0,">=":!0,"<<":!0,">>":!0,">>>":!0},M={mod:!0,to:!0,in:!0,and:!0,xor:!0,or:!0,not:!0},E={true:!0,false:!1,null:null,undefined:void 0},O=["NaN","Infinity"],S={},_="",T="",C=0,z="",B="",P=b.NULL,I=0,R=null,U=[];function k(){C++,z=_.charAt(C)}function D(){return _.charAt(C-1)}function q(){return _.charAt(C+1)}function L(){U.push({token_type:P,token:B,comment:T,index:C,c:z})}function F(){var e=U.pop();P=e.token_type,B=e.token,T=e.comment,C=e.index,z=e.c}function j(){for(P=b.NULL,B="",T="";w.isWhitespace(z,I);)k();if("#"===z)for(;"\n"!==z&&""!==z;)T+=z,k();if(""!==z){if("\n"===z&&!I)return P=b.DELIMITER,B=z,void k();var e=z+q(),r=e+_.charAt(C+2);if(3===r.length&&N[r])return P=b.DELIMITER,B=r,k(),k(),void k();if(2===e.length&&N[e])return P=b.DELIMITER,B=e,k(),void k();if(N[z])return P=b.DELIMITER,B=z,void k();if(w.isDigitDot(z)){if(P=b.NUMBER,"."===z)B+=z,k(),w.isDigit(z)||(P=b.DELIMITER);else{for(;w.isDigit(z);)B+=z,k();w.isDecimalMark(z,q())&&(B+=z,k())}for(;w.isDigit(z);)B+=z,k();if(e=q(),"E"===z||"e"===z)if(w.isDigit(e)||"-"===e||"+"===e){if(B+=z,k(),"+"!==z&&"-"!==z||(B+=z,k()),!w.isDigit(z))throw pe('Digit expected, got "'+z+'"');for(;w.isDigit(z);)B+=z,k();if(w.isDecimalMark(z,q()))throw pe('Digit expected, got "'+z+'"')}else if("."===e)throw k(),pe('Digit expected, got "'+z+'"')}else{if(!w.isAlpha(z,D(),q())){for(P=b.UNKNOWN;""!==z;)B+=z,k();throw pe('Syntax error in part "'+B+'"')}for(;w.isAlpha(z,D(),q())||w.isDigit(z);)B+=z,k();P=M.hasOwnProperty(B)?b.DELIMITER:b.SYMBOL}}else P=b.DELIMITER}function H(){do{j()}while("\n"===B)}function $(){I++}function G(){I--}function V(){C=0,z=_.charAt(0),I=0,R=null,j();var e=function(){var e,r,t=[];for(""!==B&&"\n"!==B&&";"!==B&&((e=Z()).comment=T);"\n"===B||";"===B;)0===t.length&&e&&(r=";"!==B,t.push({node:e,visible:r})),j(),"\n"!==B&&";"!==B&&""!==B&&((e=Z()).comment=T,r=";"!==B,t.push({node:e,visible:r}));return t.length>0?new u(t):(e||((e=new f(void 0)).comment=T),e)}();if(""!==B)throw P===b.DELIMITER?me("Unexpected operator "+B):pe('Unexpected part "'+B+'"');return e}function Z(){var r,t,n,i,a=function(){for(var e=function(){for(var e=W();"or"===B;)H(),e=new h("or","or",[e,W()]);return e}();"?"===B;){var r=R;R=I,H();var t=e,n=Z();if(":"!==B)throw pe("False part of conditional expression expected");R=null,H();var i=Z();e=new c(t,n,i),R=r}return e}();if("="===B){if(e.isSymbolNode(a))return r=a.name,H(),n=Z(),new s(new x(r),n);if(e.isAccessorNode(a))return H(),n=Z(),new s(a.object,a.index,n);if(e.isFunctionNode(a)&&e.isSymbolNode(a.fn)&&(i=!0,t=[],r=a.name,a.args.forEach(function(r,n){e.isSymbolNode(r)?t[n]=r.name:i=!1}),i))return H(),n=Z(),new l(r,t,n);throw pe("Invalid left hand side of assignment operator =")}return a}function W(){for(var e=J();"xor"===B;)H(),e=new h("xor","xor",[e,J()]);return e}function J(){for(var e=Y();"and"===B;)H(),e=new h("and","and",[e,Y()]);return e}function Y(){for(var e=X();"|"===B;)H(),e=new h("|","bitOr",[e,X()]);return e}function X(){for(var e=Q();"^|"===B;)H(),e=new h("^|","bitXor",[e,Q()]);return e}function Q(){for(var e=K();"&"===B;)H(),e=new h("&","bitAnd",[e,K()]);return e}function K(){var e,r,t,n,i;for(e=ee(),r={"==":"equal","!=":"unequal","<":"smaller",">":"larger","<=":"smallerEq",">=":"largerEq"};r.hasOwnProperty(B);)n=r[t=B],H(),i=[e,ee()],e=new h(t,n,i);return e}function ee(){var e,r,t,n,i;for(e=re(),r={"<<":"leftShift",">>":"rightArithShift",">>>":"rightLogShift"};r.hasOwnProperty(B);)n=r[t=B],H(),i=[e,re()],e=new h(t,n,i);return e}function re(){var e,r,t,n,i;for(e=te(),r={to:"to",in:"to"};r.hasOwnProperty(B);)n=r[t=B],H(),"in"===t&&""===B?e=new h("*","multiply",[e,new x("in")],!0):(i=[e,te()],e=new h(t,n,i));return e}function te(){var e,r=[];if(e=":"===B?new f(1):ne(),":"===B&&R!==I){for(r.push(e);":"===B&&r.length<3;)H(),")"===B||"]"===B||","===B||""===B?r.push(new x("end")):r.push(ne());e=3===r.length?new y(r[0],r[2],r[1]):new y(r[0],r[1])}return e}function ne(){var e,r,t,n,i;for(e=ie(),r={"+":"add","-":"subtract"};r.hasOwnProperty(B);)n=r[t=B],H(),i=[e,ie()],e=new h(t,n,i);return e}function ie(){var e,r,t,n,i;for(r=e=ae(),t={"*":"multiply",".*":"dotMultiply","/":"divide","./":"dotDivide","%":"mod",mod:"mod"};t.hasOwnProperty(B);)i=t[n=B],H(),r=ae(),e=new h(n,i,[e,r]);return e}function ae(){var r,t;for(t=r=oe();P===b.SYMBOL||"in"===B&&e.isConstantNode(r)||!(P!==b.NUMBER||e.isConstantNode(t)||e.isOperatorNode(t)&&"!"!==t.op)||"("===B;)t=oe(),r=new h("*","multiply",[r,t],!0);return r}function oe(){var r,t;for(t=r=se();"/"===B&&e.isConstantNode(t);){if(L(),H(),P!==b.NUMBER){F();break}if(L(),H(),P!==b.SYMBOL&&"("!==B){F(),F();break}F(),U.pop(),t=se(),r=new h("/","divide",[r,t])}return r}function se(){var e,t,n,a={"-":"unaryMinus","+":"unaryPlus","~":"bitNot",not:"not"};return a.hasOwnProperty(B)?(n=a[B],e=B,H(),t=[se()],new h(e,n,t)):function(){var e,t,n,a;return e=function(){var e,t,n,a;for(e=function(){var e,t,n=[];if(P===b.SYMBOL&&S.hasOwnProperty(B)){var a=S[B];if(j(),"("===B){if(n=[],$(),j(),")"!==B)for(n.push(Z());","===B;)j(),n.push(Z());if(")"!==B)throw pe("Parenthesis ) expected");G(),j()}return new a(n)}return P===b.SYMBOL||P===b.DELIMITER&&B in M?(e=B,j(),ue(E.hasOwnProperty(e)?new f(E[e]):-1!==O.indexOf(e)?new f(i(e)):new x(e))):'"'===B?(t=ce(),ue(new f(t))):function(){var e,t,n,a;if("["===B){if($(),j(),"]"!==B){var s=fe();if(";"===B){for(n=1,t=[s];";"===B;)j(),t[n]=fe(),n++;if("]"!==B)throw pe("End of matrix ] expected");G(),j(),a=t[0].items.length;for(var u=1;u<n;u++)if(t[u].items.length!==a)throw me("Column dimensions mismatch ("+t[u].items.length+" !== "+a+")");e=new o(t)}else{if("]"!==B)throw pe("End of matrix ] expected");G(),j(),e=s}}else G(),j(),e=new o([]);return ue(e)}return function(){if("{"===B){var e,t={};do{if(j(),"}"!==B){if('"'===B)e=ce();else{if(P!==b.SYMBOL)throw pe("Symbol or string expected as object key");e=B,j()}if(":"!==B)throw pe("Colon : expected after object key");j(),t[e]=Z()}}while(","===B);if("}"!==B)throw pe("Comma , or bracket } expected after object value");j();var n=new m(t);return n=ue(n)}return P===b.NUMBER?(a=B,j(),new f(i(a,r.number))):function(){var e;if("("===B){if($(),j(),e=Z(),")"!==B)throw pe("Parenthesis ) expected");return G(),j(),e=ue(e=new g(e))}return function(){throw pe(""===B?"Unexpected end of expression":"'"===B?"Value expected. Note: strings must be enclosed by double quotes":"Value expected")}()}();var a}()}()}(),t={"!":"factorial","'":"transpose"};t.hasOwnProperty(B);)a=t[n=B],j(),e=ue(e=new h(n,a,[e]));return e}(),("^"===B||".^"===B)&&(n="^"===(t=B)?"pow":"dotPow",H(),a=[e,se()],e=new h(t,n,a)),e}()}function ue(r,t){for(var n;!("("!==B&&"["!==B&&"."!==B||t&&-1===t.indexOf(B));)if(n=[],"("===B){if(!e.isSymbolNode(r)&&!e.isAccessorNode(r))return r;if($(),j(),")"!==B)for(n.push(Z());","===B;)j(),n.push(Z());if(")"!==B)throw pe("Parenthesis ) expected");G(),j(),r=new v(r,n)}else if("["===B){if($(),j(),"]"!==B)for(n.push(Z());","===B;)j(),n.push(Z());if("]"!==B)throw pe("Parenthesis ] expected");G(),j(),r=new a(r,new p(n))}else{if(j(),P!==b.SYMBOL)throw pe("Property name expected after dot");n.push(new f(B)),j(),r=new a(r,new p(n,!0))}return r}function ce(){for(var e="";""!==z&&'"'!==z;)"\\"===z&&(e+=z,k()),e+=z,k();if(j(),'"'!==B)throw pe('End of string " expected');return j(),JSON.parse('"'+e+'"')}function fe(){for(var e=[Z()],r=1;","===B;)j(),e[r]=Z(),r++;return new o(e)}function le(){return C-B.length+1}function pe(e){var r=le(),t=new SyntaxError(e+" (char "+r+")");return t.char=r,t}function me(e){var r=le(),t=new SyntaxError(e+" (char "+r+")");return t.char=r,t}return w.isAlpha=function(e,r,t){return w.isValidLatinOrGreek(e)||w.isValidMathSymbol(e,t)||w.isValidMathSymbol(r,e)},w.isValidLatinOrGreek=function(e){return/^[a-zA-Z_$\u00C0-\u02AF\u0370-\u03FF\u2100-\u214F]$/.test(e)},w.isValidMathSymbol=function(e,r){return/^[\uD835]$/.test(e)&&/^[\uDC00-\uDFFF]$/.test(r)&&/^[^\uDC55\uDC9D\uDCA0\uDCA1\uDCA3\uDCA4\uDCA7\uDCA8\uDCAD\uDCBA\uDCBC\uDCC4\uDD06\uDD0B\uDD0C\uDD15\uDD1D\uDD3A\uDD3F\uDD45\uDD47-\uDD49\uDD51\uDEA6\uDEA7\uDFCC\uDFCD]$/.test(r)},w.isWhitespace=function(e,r){return" "===e||"\t"===e||"\n"===e&&r>0},w.isDecimalMark=function(e,r){return"."===e&&"/"!==r&&"*"!==r&&"^"!==r},w.isDigitDot=function(e){return e>="0"&&e<="9"||"."===e},w.isDigit=function(e){return e>="0"&&e<="9"},w}};var Xo={name:"compile",factory:function(e,r,t,n){var i=t(Yo);return n("compile",{string:function(e){return i(e).compile()},"Array | Matrix":function(e){return A(e,function(e){return i(e).compile()})}})}};var Qo={name:"eval",factory:function(e,r,t,n){var i=t(Yo);return n("compile",{string:function(e){return i(e).compile().eval({})},"string, Object":function(e,r){return i(e).compile().eval(r)},"Array | Matrix":function(e){var r={};return A(e,function(e){return i(e).compile().eval(r)})},"Array | Matrix, Object":function(e,r){return A(e,function(e){return i(e).compile().eval(r)})}})}},Ko=Ua.getSafeProperty;var es={math:!0,name:"help",factory:function(e,r,t,n,i){var a=t(_a);return n("help",{any:function(r){var t,n=r;if("string"!=typeof r)for(t in i)if(i.hasOwnProperty(t)&&r===i[t]){n=t;break}var o=Ko(a,n);if(!o)throw new Error('No documentation found on "'+n+'"');return new e.Help(o)}})}};var rs={name:"parse",factory:function(e,r,t,n){var i=t(Yo);return n("parse",{"string | Array | Matrix":i,"string | Array | Matrix, Object":i})}},ts=i.extend;var ns={name:"Parser",path:"expression",factory:function(e,r,t,n,i){var a=t(Yo);function o(){if(!(this instanceof o))throw new SyntaxError("Constructor must be called with the new operator");this.scope={}}return o.prototype.type="Parser",o.prototype.isParser=!0,o.prototype.parse=function(e){throw new Error("Parser.parse is deprecated. Use math.parse instead.")},o.prototype.compile=function(e){throw new Error("Parser.compile is deprecated. Use math.compile instead.")},o.prototype.eval=function(e){return a(e).compile().eval(this.scope)},o.prototype.get=function(e){return e in this.scope?Ua.getSafeProperty(this.scope,e):void 0},o.prototype.getAll=function(){return ts({},this.scope)},o.prototype.set=function(e,r){return Ua.setSafeProperty(this.scope,e,r)},o.prototype.remove=function(e){delete this.scope[e]},o.prototype.clear=function(){for(var e in this.scope)this.scope.hasOwnProperty(e)&&delete this.scope[e]},o},math:!0};var is={name:"parser",factory:function(e,r,t,n,i){var a=t(ns);return n("parser",{"":function(){return new a(i)}})},math:!0},as=[Xo,Qo,es,rs,is];var os=[to,io,mo,vo,yo,bo,Ha,Oo,Wo,La,zo,Uo,ko,Jo,Fo,{name:"UpdateNode",path:"expression.node",factory:function(e,r,t,n){return function(){throw new Error("UpdateNode is deprecated. Use AssignmentNode instead.")}}}],ss=i.clone,us=o.isInteger;function cs(e,r,t,n){if(n<t){if(e.length!=r.length)throw new V(e.length,r.length);for(var i=[],a=0;a<e.length;a++)i[a]=cs(e[a],r[a],t,n+1);return i}return e.concat(r)}var fs={name:"concat",factory:function(e,r,t,n){var i=t(Ee),a=n("concat",{"...Array | Matrix | number | BigNumber":function(r){var t,n,a=r.length,o=-1,s=!1,u=[];for(t=0;t<a;t++){var c=r[t];if(e.isMatrix(c)&&(s=!0),e.isNumber(c)||e.isBigNumber(c)){if(t!==a-1)throw new Error("Dimension must be specified as last argument");if(n=o,o=c.valueOf(),!us(o))throw new TypeError("Integer number expected for dimension");if(o<0||t>0&&o>n)throw new W(o,n+1)}else{var f=ss(c).valueOf(),l=J.size(f);if(u[t]=f,n=o,o=l.length-1,t>0&&o!=n)throw new V(n+1,o+1)}}if(0==u.length)throw new SyntaxError("At least one matrix expected");for(var p=u.shift();u.length;)p=cs(p,u.shift(),o,0);return s?i(p):p},"...string":function(e){return e.join("")}});return a.toTex=void 0,a}},ls=$a;var ps={name:"concat",path:"expression.transform",factory:function(e,r,t,n){var i=t(fs);return n("concat",{"...any":function(r){var t=r.length-1,n=r[t];e.isNumber(n)?r[t]=n-1:e.isBigNumber(n)&&(r[t]=n.minus(1));try{return i.apply(null,r)}catch(e){throw ls(e)}}})}};var ms={factory:function(e,r,t,n){return function(r,t,n){var i=r.filter(function(r){return e.isSymbolNode(r)&&!(r.name in t)&&!(r.name in n)})[0];if(!i)throw new Error('No undefined variable found in inline expression "'+r+'"');var a=i.name,o=Object.create(n),s=r.compile();return function(e){return o[a]=e,s.eval(o)}}}},hs=J.filter,ds=J.filterRegExp,gs=X.maxArgumentCount;function vs(e,r){var t=gs(r);return hs(e,function(e,n,i){return 1===t?r(e):2===t?r(e,[n+1]):r(e,[n+1],i)})}var ys={name:"filter",path:"expression.transform",factory:function(e,r,t,n){var i=t(ms),a=t(Ee);function o(r,t,n){var a,o;return r[0]&&(a=r[0].compile().eval(n)),r[1]&&(o=e.isSymbolNode(r[1])||e.isFunctionAssignmentNode(r[1])?r[1].compile().eval(n):i(r[1],t,n)),s(a,o)}o.rawArgs=!0;var s=n("filter",{"Array, function":vs,"Matrix, function":function(e,r){return a(vs(e.toArray(),r))},"Array, RegExp":ds,"Matrix, RegExp":function(e,r){return a(ds(e.toArray(),r))}});return s.toTex=void 0,o}},xs=X.maxArgumentCount,ws=J.forEach;var bs={name:"forEach",path:"expression.transform",factory:function(e,r,t,n){var i=t(ms);function a(r,t,n){var a,s;return r[0]&&(a=r[0].compile().eval(n)),r[1]&&(s=e.isSymbolNode(r[1])||e.isFunctionAssignmentNode(r[1])?r[1].compile().eval(n):i(r[1],t,n)),o(a,s)}a.rawArgs=!0;var o=n("forEach",{"Array | Matrix, function":function(e,r){var t=xs(r),n=function(i,a){Array.isArray(i)?ws(i,function(e,r){n(e,a.concat(r+1))}):1===t?r(i):2===t?r(i,a):r(i,a,e)};n(e.valueOf(),[])}});return a}};var Ns={name:"index",path:"expression.transform",factory:function(e,r,t){return function(){for(var r=[],t=0,n=arguments.length;t<n;t++){var i=arguments[t];if(e.isRange(i))i.start--,i.end-=i.step>0?0:2;else if(i&&!0===i.isSet)i=i.map(function(e){return e-1});else if(e.isArray(i)||e.isMatrix(i))i=i.map(function(e){return e-1});else if(e.isNumber(i))i--;else if(e.isBigNumber(i))i=i.toNumber()-1;else if("string"!=typeof i)throw new TypeError("Dimension must be an Array, Matrix, number, string, or Range");r[t]=i}var a=new e.Index;return e.Index.apply(a,r),a}}},Ms=X.maxArgumentCount,Es=J.map;function As(e,r,t){var n=Ms(r);return function e(i,a){return Array.isArray(i)?Es(i,function(r,t){return e(r,a.concat(t+1))}):1===n?r(i):2===n?r(i,a):r(i,a,t)}(e,[])}var Os={name:"map",path:"expression.transform",factory:function(e,r,t,n){var i=t(ms),a=t(Ee);function o(r,t,n){var a,o;return r[0]&&(a=r[0].compile().eval(n)),r[1]&&(o=e.isSymbolNode(r[1])||e.isFunctionAssignmentNode(r[1])?r[1].compile().eval(n):i(r[1],t,n)),s(a,o)}o.rawArgs=!0;var s=n("map",{"Array, function":function(e,r){return As(e,r,e)},"Matrix, function":function(e,r){return a(As(e.valueOf(),r,e))}});return o}},Ss=function(e){return Array.isArray(e)||s(e)},_s=function e(r,t){s(r)&&(r=r.valueOf());for(var n=0,i=r.length;n<i;n++){var a=r[n];Array.isArray(a)?e(a,t):t(a)}},Ts=J.size,Cs=function(e,r,t){var n=Array.isArray(e)?Ts(e):e.size();if(r<0||r>=n.length)throw new W(r,n.length);return s(e)?e.create(zs(e.valueOf(),r,t)):zs(e,r,t)};function zs(e,r,t){var n,i,a,o;if(r<=0){if(Array.isArray(e[0])){for(o=function(e){var r,t,n=e.length,i=e[0].length,a=[];for(t=0;t<i;t++){var o=[];for(r=0;r<n;r++)o.push(e[r][t]);a.push(o)}return a}(e),i=[],n=0;n<o.length;n++)i[n]=zs(o[n],r-1,t);return i}for(a=e[0],n=1;n<e.length;n++)a=t(a,e[n]);return a}for(i=[],n=0;n<e.length;n++)i[n]=zs(e[n],r-1,t);return i}var Bs=function(e){for(var r=0;r<e.length;r++)if(Ss(e[r]))return!0;return!1};var Ps={factory:function(e,r,t,n){var i=t(Cr);return function(e,r,t){var n;return-1!==String(e).indexOf("Unexpected type")?(n=arguments.length>2?" (type: "+i(t)+", value: "+JSON.stringify(t)+")":" (type: "+e.data.actual+")",new TypeError("Cannot calculate "+r+", unexpected type of argument"+n)):-1!==String(e).indexOf("complex numbers")?(n=arguments.length>2?" (type: "+i(t)+", value: "+JSON.stringify(t)+")":"",new TypeError("Cannot calculate "+r+", no ordering relation is defined for complex numbers"+n)):e}}};var Is={name:"max",factory:function(e,r,t,n){var i=t(Fe),a=t(Ps),o=n("max",{"Array | Matrix":u,"Array | Matrix, number | BigNumber":function(e,r){return Cs(e,r.valueOf(),s)},"...":function(e){if(Bs(e))throw new TypeError("Scalar values expected in function max");return u(e)}});return o.toTex="\\max\\left(${args}\\right)",o;function s(e,r){try{return i(e,r)?e:r}catch(e){throw a(e,"max",r)}}function u(e){var r=void 0;if(_s(e,function(e){try{(void 0===r||i(e,r))&&(r=e)}catch(r){throw a(r,"max",e)}}),void 0===r)throw new Error("Cannot calculate max of an empty array");return r}}},Rs=$a;var Us={name:"max",path:"expression.transform",factory:function(e,r,t,n){var i=t(Is);return n("max",{"...any":function(r){if(2==r.length&&Ss(r[0])){var t=r[1];e.isNumber(t)?r[1]=t-1:e.isBigNumber(t)&&(r[1]=t.minus(1))}try{return i.apply(null,r)}catch(e){throw Rs(e)}}})}},ks=Q.object,Ds=Q.string;var qs={name:"det",factory:function(e,r,t,n){var i=t(Ee),a=t(Pe),o=t(sr),s=t(hr),u=t(ir),c=n("det",{any:function(e){return ks.clone(e)},"Array | Matrix":function(r){var t;switch((t=e.isMatrix(r)?r.size():Array.isArray(r)?(r=i(r)).size():[]).length){case 0:return ks.clone(r);case 1:if(1==t[0])return ks.clone(r.valueOf()[0]);throw new RangeError("Matrix must be square (size: "+Ds.format(t)+")");case 2:var n=t[0],c=t[1];if(n==c)return function(e,r,t){if(1==r)return ks.clone(e[0][0]);if(2==r)return o(s(e[0][0],e[1][1]),s(e[1][0],e[0][1]));for(var n=function(e){var r,t,n=new Array(e.length),i=0;for(r=1;r<e.length;r++)i=a(i,e[r][r]);for(r=0;r<e.length;r++){for(n[r]=new Array(e.length),n[r][r]=u(i),t=0;t<r;t++)n[r][t]=0;for(t=r+1;t<e.length;t++)n[r][t]=e[r][t];r+1<e.length&&(i=o(i,e[r+1][r+1]))}return n},i=e,c=0;c<r-1;c++)i=s(n(i),e);return r%2==0?u(i[0][0]):i[0][0]}(r.clone().valueOf(),n);throw new RangeError("Matrix must be square (size: "+Ds.format(t)+")");default:throw new RangeError("Matrix must be two dimensional (size: "+Ds.format(t)+")")}}});return c.toTex={1:"\\det\\left(${args[0]}\\right)"},c}};var Ls={name:"inv",factory:function(e,r,t,n){var i=t(Ee),a=t(cr),o=t(Ae),s=t(hr),u=t(ir),c=t(qs),f=t(lr),l=n("inv",{"Array | Matrix":function(r){var t=e.isMatrix(r)?r.size():Q.array.size(r);switch(t.length){case 1:if(1==t[0])return e.isMatrix(r)?i([a(1,r.valueOf()[0])]):[a(1,r[0])];throw new RangeError("Matrix must be square (size: "+Q.string.format(t)+")");case 2:var n=t[0],o=t[1];if(n==o)return e.isMatrix(r)?i(p(r.valueOf(),n,o),r.storage()):p(r,n,o);throw new RangeError("Matrix must be square (size: "+Q.string.format(t)+")");default:throw new RangeError("Matrix must be two dimensional (size: "+Q.string.format(t)+")")}},any:function(e){return a(1,e)}});function p(e,r,t){var n,i,l,p,m;if(1==r){if(0==(p=e[0][0]))throw Error("Cannot calculate inverse, determinant is zero");return[[a(1,p)]]}if(2==r){var h=c(e);if(0==h)throw Error("Cannot calculate inverse, determinant is zero");return[[a(e[1][1],h),a(u(e[0][1]),h)],[a(u(e[1][0]),h),a(e[0][0],h)]]}var d=e.concat();for(n=0;n<r;n++)d[n]=d[n].concat();for(var g=f(r).valueOf(),v=0;v<t;v++){for(n=v;n<r&&0==d[n][v];)n++;if(n==r||0==d[n][v])throw Error("Cannot calculate inverse, determinant is zero");n!=v&&(m=d[v],d[v]=d[n],d[n]=m,m=g[v],g[v]=g[n],g[n]=m);var y=d[v],x=g[v];for(n=0;n<r;n++){var w=d[n],b=g[n];if(n!=v){if(0!=w[v]){for(l=a(u(w[v]),y[v]),i=v;i<t;i++)w[i]=o(w[i],s(l,y[i]));for(i=0;i<t;i++)b[i]=o(b[i],s(l,x[i]))}}else{for(l=y[v],i=v;i<t;i++)w[i]=a(w[i],l);for(i=0;i<t;i++)b[i]=a(b[i],l)}}}return g}return l.toTex={1:"\\left(${args[0]}\\right)^{-1}"},l}},Fs=i.extend;var js={name:"divide",factory:function(e,r,t,n){var i=t(cr),a=t(hr),o=t(Ls),s=t(Ee),u=t(pr),c=t(ze),f=n("divide",Fs({"Array | Matrix, Array | Matrix":function(e,r){return a(e,o(r))},"DenseMatrix, any":function(e,r){return c(e,r,i,!1)},"SparseMatrix, any":function(e,r){return u(e,r,i,!1)},"Array, any":function(e,r){return c(s(e),r,i,!1).valueOf()},"any, Array | Matrix":function(e,r){return a(e,o(r))}},i.signatures));return f.toTex={2:"\\frac{${args[0]}}{${args[1]}}"},f}},Hs=J.size;var $s={name:"mean",factory:function(e,r,t,n){var i=t(Pe),a=t(js),o=t(Ps),s=n("mean",{"Array | Matrix":u,"Array | Matrix, number | BigNumber":function(e,r){try{var t=Cs(e,r,i),n=Array.isArray(e)?Hs(e):e.size();return a(t,n[r])}catch(e){throw o(e,"mean")}},"...":function(e){if(Bs(e))throw new TypeError("Scalar values expected in function mean");return u(e)}});return s.toTex=void 0,s;function u(e){var r=0,t=0;if(_s(e,function(e){try{r=i(r,e),t++}catch(r){throw o(r,"mean",e)}}),0===t)throw new Error("Cannot calculate mean of an empty array");return a(r,t)}}},Gs=$a;var Vs={name:"min",factory:function(e,r,t,n){var i=t(qe),a=t(Ps),o=n("min",{"Array | Matrix":u,"Array | Matrix, number | BigNumber":function(e,r){return Cs(e,r.valueOf(),s)},"...":function(e){if(Bs(e))throw new TypeError("Scalar values expected in function min");return u(e)}});return o.toTex="\\min\\left(${args}\\right)",o;function s(e,r){try{return i(e,r)?e:r}catch(e){throw a(e,"min",r)}}function u(e){var r=void 0;if(_s(e,function(e){try{(void 0===r||i(e,r))&&(r=e)}catch(r){throw a(r,"min",e)}}),void 0===r)throw new Error("Cannot calculate min of an empty array");return r}}},Zs=$a;var Ws={name:"range",factory:function(e,r,t,n){var i=t(Ee),a=new e.BigNumber(0),o=new e.BigNumber(1),s=n("range",{string:c,"string, boolean":c,"number, number":function(e,r){return u(f(e,r,1))},"number, number, number":function(e,r,t){return u(f(e,r,t))},"number, number, boolean":function(e,r,t){return u(t?l(e,r,1):f(e,r,1))},"number, number, number, boolean":function(e,r,t,n){return u(n?l(e,r,t):f(e,r,t))},"BigNumber, BigNumber":function(e,r){return u(p(e,r,o))},"BigNumber, BigNumber, BigNumber":function(e,r,t){return u(p(e,r,t))},"BigNumber, BigNumber, boolean":function(e,r,t){return u(t?m(e,r,o):p(e,r,o))},"BigNumber, BigNumber, BigNumber, boolean":function(e,r,t,n){return u(n?m(e,r,t):p(e,r,t))}});return s.toTex=void 0,s;function u(e){return"Array"===r.matrix?e:i(e)}function c(t,n){var i=function(e){var r=e.split(":").map(function(e){return Number(e)});if(r.some(function(e){return isNaN(e)}))return null;switch(r.length){case 2:return{start:r[0],end:r[1],step:1};case 3:return{start:r[0],end:r[2],step:r[1]};default:return null}}(t);if(!i)throw new SyntaxError('String "'+t+'" is no valid range');return"BigNumber"===r.number?u((n?m:p)(new e.BigNumber(i.start),new e.BigNumber(i.end),new e.BigNumber(i.step))):u((n?l:f)(i.start,i.end,i.step))}function f(e,r,t){var n=[],i=e;if(t>0)for(;i<r;)n.push(i),i+=t;else if(t<0)for(;i>r;)n.push(i),i+=t;return n}function l(e,r,t){var n=[],i=e;if(t>0)for(;i<=r;)n.push(i),i+=t;else if(t<0)for(;i>=r;)n.push(i),i+=t;return n}function p(e,r,t){var n=[],i=e;if(t.gt(a))for(;i.lt(r);)n.push(i),i=i.plus(t);else if(t.lt(a))for(;i.gt(r);)n.push(i),i=i.plus(t);return n}function m(e,r,t){var n=[],i=e;if(t.gt(a))for(;i.lte(r);)n.push(i),i=i.plus(t);else if(t.lt(a))for(;i.gte(r);)n.push(i),i=i.plus(t);return n}}};var Js=$a;var Ys=[_a,as,os,[ps,ys,bs,Ns,Os,Us,{name:"mean",path:"expression.transform",factory:function(e,r,t,n){var i=t($s);return n("mean",{"...any":function(r){if(2==r.length&&Ss(r[0])){var t=r[1];e.isNumber(t)?r[1]=t-1:e.isBigNumber(t)&&(r[1]=t.minus(1))}try{return i.apply(null,r)}catch(e){throw Gs(e)}}})}},{name:"min",path:"expression.transform",factory:function(e,r,t,n){var i=t(Vs);return n("min",{"...any":function(r){if(2==r.length&&Ss(r[0])){var t=r[1];e.isNumber(t)?r[1]=t-1:e.isBigNumber(t)&&(r[1]=t.minus(1))}try{return i.apply(null,r)}catch(e){throw Zs(e)}}})}},{name:"range",path:"expression.transform",factory:function(e,r,t,n){var i=t(Ws);return n("range",{"...any":function(e){return"boolean"!=typeof e[e.length-1]&&e.push(!0),i.apply(null,e)}})}},{name:"subset",path:"expression.transform",factory:function(e,r,t,n){var i=t(Xa);return n("subset",{"...any":function(e){try{return i.apply(null,e)}catch(e){throw Js(e)}}})}}],{name:"Help",path:"type",factory:function(e,r,t,n){var a=t(is)();function o(e){if(!(this instanceof o))throw new SyntaxError("Constructor must be called with the new operator");if(!e)throw new Error('Argument "doc" missing');this.doc=e}return o.prototype.type="Help",o.prototype.isHelp=!0,o.prototype.toString=function(){var r=this.doc||{},t="\n";if(r.name&&(t+="Name: "+r.name+"\n\n"),r.category&&(t+="Category: "+r.category+"\n\n"),r.description&&(t+="Description:\n    "+r.description+"\n\n"),r.syntax&&(t+="Syntax:\n    "+r.syntax.join("\n    ")+"\n\n"),r.examples){t+="Examples:\n";for(var n=0;n<r.examples.length;n++){var i,o=r.examples[n];t+="    "+o+"\n";try{i=a.eval(o)}catch(e){i=e}void 0===i||e.isHelp(i)||(t+="        "+T.format(i,{precision:14})+"\n")}t+="\n"}return r.seealso&&r.seealso.length&&(t+="See also: "+r.seealso.join(", ")+"\n"),t},o.prototype.toJSON=function(){var e=i.clone(this.doc);return e.mathjs="Help",e},o.fromJSON=function(e){var r={};for(var t in e)"mathjs"!==t&&(r[t]=e[t]);return new o(r)},o.prototype.valueOf=o.prototype.toString,o}},Yo,ns];var Xs={factory:function(e,r,t,n,i){var a=i.expression.node.FunctionNode,o=i.expression.node.OperatorNode,s=i.expression.node.SymbolNode,u={add:!0,multiply:!0},c={add:!0,multiply:!0};function f(r,t){if(!e.isOperatorNode(r))return!1;var n=r.fn.toString();return t&&t.hasOwnProperty(n)&&t[n].hasOwnProperty("associative")?t[n].associative:c[n]||!1}function l(r){var t,n=[],i=function(r){for(var a=0;a<r.args.length;a++){var o=r.args[a];e.isOperatorNode(o)&&t===o.op?i(o):n.push(o)}};return f(r)?(t=r.op,i(r),n):r.args}function p(r){return e.isOperatorNode(r)?function(e){try{return new o(r.op,r.fn,e)}catch(e){return console.error(e),[]}}:function(e){return new a(new s(r.name),e)}}return{createMakeNodeFunction:p,isCommutative:function(r,t){if(!e.isOperatorNode(r))return!0;var n=r.fn.toString();return t&&t.hasOwnProperty(n)&&t[n].hasOwnProperty("commutative")?t[n].commutative:u[n]||!1},isAssociative:f,flatten:function e(r){if(!r.args||0===r.args.length)return r;r.args=l(r);for(var t=0;t<r.args.length;t++)e(r.args[t])},allChildren:l,unflattenr:function e(r){if(r.args&&0!==r.args.length){for(var t=p(r),n=r.args.length,i=0;i<n;i++)e(r.args[i]);if(n>2&&f(r)){for(var a=r.args.pop();r.args.length>0;)a=t([r.args.pop(),a]);r.args=a.args}}},unflattenl:function e(r){if(r.args&&0!==r.args.length){for(var t=p(r),n=r.args.length,i=0;i<n;i++)e(r.args[i]);if(n>2&&f(r)){for(var a=r.args.shift();r.args.length>0;)a=t([a,r.args.shift()]);r.args=a.args}}}}},math:!0};o.digits;var Qs={math:!0,name:"simplifyConstant",path:"algebra.simplify",factory:function(e,r,t,n,i){var a=t(Xs),o=(t(_r),a.isCommutative),s=a.isAssociative,u=a.allChildren,c=a.createMakeNodeFunction,f=i.expression.node.ConstantNode,l=i.expression.node.OperatorNode,p=i.expression.node.FunctionNode;function m(r,t){try{return g(i[r].apply(null,t))}catch(n){return t=t.map(function(r){return e.isFraction(r)?r.valueOf():r}),g(i[r].apply(null,t))}}var h=n({Fraction:function(e){var r,t=e.s*e.n;return r=t<0?new l("-","unaryMinus",[new f(-t)]):new f(t),1===e.d?r:new l("/","divide",[r,new f(e.d)])},number:function(e){return e<0?v(new f(-e)):new f(e)},BigNumber:function(e){return e<0?v(new f(e.negated().toString(),"number")):new f(e.toString(),"number")},Complex:function(e){throw"Cannot convert Complex number to Node"}});function d(e){if(isFinite(e)){var r=i.fraction(e);if(r.valueOf()===e)return r}return e}var g=n({string:function(e){return"BigNumber"===r.number?i.bignumber(e):"Fraction"===r.number?i.fraction(e):d(parseFloat(e))},Fraction:function(e){return e},BigNumber:function(e){return e},number:function(e){return d(e)},Complex:function(e){return 0!==e.im?e:d(e.re)}});function v(e){return new l("-","unaryMinus",[e])}function y(r,t,n){return t.reduce(function(t,i){if(e.isNode(t)||e.isNode(i))e.isNode(t)?e.isNode(i)||(i=h(i)):t=h(t);else{try{return m(r,[t,i])}catch(e){}t=h(t),i=h(i)}return n([t,i])})}function x(r){switch(r.type){case"SymbolNode":return r;case"ConstantNode":return"number"==typeof r.value?g(r.value):r;case"FunctionNode":if(i[r.name]&&i[r.name].rawArgs)return r;if(-1===["add","multiply"].indexOf(r.name)){if(!(t=r.args.map(x)).some(e.isNode))try{return m(r.name,t)}catch(e){}return t=t.map(function(r){return e.isNode(r)?r:h(r)}),new p(r.name,t)}case"OperatorNode":var t,n,a=r.fn.toString(),f=c(r);if(r.isUnary())t=[x(r.args[0])],n=e.isNode(t[0])?f(t):m(a,t);else if(s(r))if(t=(t=u(r)).map(x),o(a)){for(var l=[],d=[],v=0;v<t.length;v++)e.isNode(t[v])?d.push(t[v]):l.push(t[v]);l.length>1?(n=y(a,l,f),d.unshift(n),n=y(a,d,f)):n=y(a,t,f)}else n=y(a,t,f);else n=y(a,t=r.args.map(x),f);return n;case"ParenthesisNode":return x(r.content);case"AccessorNode":case"ArrayNode":case"AssignmentNode":case"BlockNode":case"FunctionAssignmentNode":case"IndexNode":case"ObjectNode":case"RangeNode":case"UpdateNode":case"ConditionalNode":default:throw"Unimplemented node type in simplifyConstant: "+r.type}}return function(r){var t=x(r);return e.isNode(t)?t:h(t)}}};var Ks={name:"isZero",factory:function(e,r,t,n){var i=n("isZero",{number:function(e){return 0===e},BigNumber:function(e){return e.isZero()},Complex:function(e){return 0===e.re&&0===e.im},Fraction:function(e){return 1===e.d&&0===e.n},Unit:function(e){return i(e.value)},"Array | Matrix":function(e){return A(e,i)}});return i}};var eu={math:!0,name:"simplifyCore",path:"algebra.simplify",factory:function(e,r,t,n,i){var a=t(Sr),o=t(Ks),s=(t(_r),t(Pe)),u=t(sr),c=t(hr),f=t(js),l=t(vr),p=i.expression.node.ConstantNode,m=i.expression.node.OperatorNode,h=i.expression.node.FunctionNode,d=i.expression.node.ParenthesisNode,g=new p(0),v=new p(1);return function r(t){if(e.isOperatorNode(t)&&t.isUnary()){var n=r(t.args[0]);if("+"===t.op)return n;if("-"===t.op){if(e.isOperatorNode(n)){if(n.isUnary()&&"-"===n.op)return n.args[0];if(n.isBinary()&&"subtract"===n.fn)return new m("-","subtract",[n.args[1],n.args[0]])}return new m(t.op,t.fn,[n])}}else if(e.isOperatorNode(t)&&t.isBinary()){n=r(t.args[0]);var i=r(t.args[1]);if("+"===t.op){if(e.isConstantNode(n)){if(o(n.value))return i;if(e.isConstantNode(i))return new p(s(n.value,i.value))}return e.isConstantNode(i)&&o(i.value)?n:e.isOperatorNode(i)&&i.isUnary()&&"-"===i.op?new m("-","subtract",[n,i.args[0]]):new m(t.op,t.fn,i?[n,i]:[n])}if("-"===t.op){if(e.isConstantNode(n)&&i){if(e.isConstantNode(i))return new p(u(n.value,i.value));if(o(n.value))return new m("-","unaryMinus",[i])}if("subtract"===t.fn)return e.isConstantNode(i)&&o(i.value)?n:e.isOperatorNode(i)&&i.isUnary()&&"-"===i.op?r(new m("+","add",[n,i.args[0]])):new m(t.op,t.fn,[n,i])}else{if("*"===t.op){if(e.isConstantNode(n)){if(o(n.value))return g;if(a(n.value,1))return i;if(e.isConstantNode(i))return new p(c(n.value,i.value))}if(e.isConstantNode(i)){if(o(i.value))return g;if(a(i.value,1))return n;if(e.isOperatorNode(n)&&n.isBinary()&&n.op===t.op){var y=n.args[0];if(e.isConstantNode(y)){var x=new p(c(y.value,i.value));return new m(t.op,t.fn,[x,n.args[1]])}}return new m(t.op,t.fn,[i,n])}return new m(t.op,t.fn,[n,i])}if("/"===t.op){if(e.isConstantNode(n)){if(o(n.value))return g;if(e.isConstantNode(i)&&(a(i.value,1)||a(i.value,2)||a(i.value,4)))return new p(f(n.value,i.value))}return new m(t.op,t.fn,[n,i])}if("^"===t.op){if(e.isConstantNode(i)){if(o(i.value))return v;if(a(i.value,1))return n;if(e.isConstantNode(n))return new p(l(n.value,i.value));if(e.isOperatorNode(n)&&n.isBinary()&&"^"===n.op){var w=n.args[1];if(e.isConstantNode(w))return new m(t.op,t.fn,[n.args[0],new p(c(w.value,i.value))])}}return new m(t.op,t.fn,[n,i])}}}else{if(e.isParenthesisNode(t)){var b=r(t.content);return e.isParenthesisNode(b)||e.isSymbolNode(b)||e.isConstantNode(b)?b:new d(b)}if(e.isFunctionNode(t)){var N=t.args.map(r).map(function(r){return e.isParenthesisNode(r)?r.content:r});return new h(r(t.fn),N)}}return t}}};var ru={math:!0,name:"resolve",path:"algebra.simplify",factory:function(e,r,t,n,i){var a=i.expression.node.Node,o=i.expression.node.OperatorNode,s=i.expression.node.FunctionNode,u=i.expression.node.ParenthesisNode;return function r(t,n){if(!n)return t;if(e.isSymbolNode(t)){var c=n[t.name];if(c instanceof a)return r(c,n);if("number"==typeof c)return i.parse(String(c))}else{if(e.isOperatorNode(t)){var f=t.args.map(function(e){return r(e,n)});return new o(t.op,t.fn,f)}if(e.isParenthesisNode(t))return new u(r(t.content,n));if(e.isFunctionNode(t))return f=t.args.map(function(e){return r(e,n)}),new s(t.name,f)}return t}}};var tu={math:!0,name:"simplify",factory:function(e,r,t,n,i){var a=t(Yo),o=t(Sr),s=t(bo),u=t(Wo),c=t(Uo),f=t(ko),l=t(Fo),p=(t(La),t(Qs)),m=t(eu),h=t(ru),d=t(Xs),g=d.isCommutative,v=d.isAssociative,y=d.flatten,x=d.unflattenr,w=d.unflattenl,b=d.createMakeNodeFunction,N=n("simplify",{string:function(e){return N(a(e),N.rules,{})},"string, Object":function(e,r){return N(a(e),N.rules,r)},"string, Array":function(e,r){return N(a(e),r,{})},"string, Array, Object":function(e,r,t){return N(a(e),r,t)},"Node, Object":function(e,r){return N(e,N.rules,r)},Node:function(e){return N(e,N.rules,{})},"Node, Array":function(e,r){return N(e,r,{})},"Node, Array, Object":function(e,r,t){r=function(e){for(var r=[],t=0;t<e.length;t++){var n,i=e[t],o=typeof i;switch(o){case"string":var s=i.split("->");if(2!==s.length)throw SyntaxError("Could not parse rule: "+i);i={l:s[0],r:s[1]};case"object":if(n={l:M(a(i.l)),r:M(a(i.r))},i.context&&(n.evaluate=i.context),i.evaluate&&(n.evaluate=a(i.evaluate)),v(n.l)){var u=b(n.l),c=new l("_p"+A++);n.expanded={},n.expanded.l=u([n.l.clone(),c]),y(n.expanded.l),x(n.expanded.l),n.expanded.r=u([n.r,c])}break;case"function":n=i;break;default:throw TypeError("Unsupported type of rule: "+o)}r.push(n)}return r}(r);for(var n,i={},o=(n=M(n=h(e,t))).toString({parenthesis:"all"});!i[o];){i[o]=!0,A=0;for(var s=0;s<r.length;s++)"function"==typeof r[s]?n=r[s](n):(y(n),n=O(n,r[s])),w(n);o=n.toString({parenthesis:"all"})}return n}});function M(r){return r.transform(function(r,t,n){return e.isParenthesisNode(r)?r.content:r})}N.simplifyCore=m,N.resolve=h;var E={true:!0,false:!0,e:!0,i:!0,Infinity:!0,LN2:!0,LN10:!0,LOG2E:!0,LOG10E:!0,NaN:!0,phi:!0,pi:!0,SQRT1_2:!0,SQRT2:!0,tau:!0};N.rules=[m,{l:"log(e)",r:"1"},{l:"n-n1",r:"n+-n1"},{l:"-(c*v)",r:"(-c) * v"},{l:"-v",r:"(-1) * v"},{l:"n/n1^n2",r:"n*n1^-n2"},{l:"n/n1",r:"n*n1^-1"},{l:"(n ^ n1) ^ n2",r:"n ^ (n1 * n2)"},{l:"n*n",r:"n^2"},{l:"n * n^n1",r:"n^(n1+1)"},{l:"n^n1 * n^n2",r:"n^(n1+n2)"},{l:"n+n",r:"2*n"},{l:"n+-n",r:"0"},{l:"n1*n2 + n2",r:"(n1+1)*n2"},{l:"n1*n3 + n2*n3",r:"(n1+n2)*n3"},{l:"n1 + -1 * (n2 + n3)",r:"n1 + -1 * n2 + -1 * n3"},p,{l:"(-n)*n1",r:"-(n*n1)"},{l:"c+v",r:"v+c",context:{add:{commutative:!1}}},{l:"v*c",r:"c*v",context:{multiply:{commutative:!1}}},{l:"n+-n1",r:"n-n1"},{l:"n*(n1^-1)",r:"n/n1"},{l:"n*n1^-n2",r:"n/n1^n2"},{l:"n1^-1",r:"1/n1"},{l:"n*(n1/n2)",r:"(n*n1)/n2"},{l:"n-(n1+n2)",r:"n-n1-n2"},{l:"1*n",r:"n"}];var A=0,O=n("applyRule",{"Node, Object":function(e,r){var t=e;if(t instanceof c||t instanceof u){if(t.args)for(var n=0;n<t.args.length;n++)t.args[n]=O(t.args[n],r)}else t instanceof f&&t.content&&(t.content=O(t.content,r));var i=r.r,a=T(r.l,t)[0];if(!a&&r.expanded&&(i=r.expanded.r,a=T(r.expanded.l,t)[0]),a){t=i.clone();var o=function(e){return e.isSymbolNode&&a.placeholders.hasOwnProperty(e.name)?a.placeholders[e.name].clone():e.map(o)};t=o(t)}return t}});function S(e,r){var t={placeholders:{}};if(!e.placeholders&&!r.placeholders)return t;if(!e.placeholders)return r;if(!r.placeholders)return e;for(var n in e.placeholders)if(t.placeholders[n]=e.placeholders[n],r.placeholders.hasOwnProperty(n)&&!C(e.placeholders[n],r.placeholders[n]))return null;for(var n in r.placeholders)t.placeholders[n]=r.placeholders[n];return t}function _(e,r){var t,n=[];if(0===e.length||0===r.length)return n;for(var i=0;i<e.length;i++)for(var a=0;a<r.length;a++)(t=S(e[i],r[a]))&&n.push(t);return n}function T(r,t,n){var a=[{placeholders:{}}];if(r instanceof c&&t instanceof c||r instanceof u&&t instanceof u){if(r instanceof c){if(r.op!==t.op||r.fn!==t.fn)return[]}else if(r instanceof u&&r.name!==t.name)return[];if((1!==t.args.length||1!==r.args.length)&&v(t)&&!n){if(t.args.length>=2&&2===r.args.length){var f=function(e,r){var t,n,i=[],a=b(e);if(g(e,r))for(var o=0;o<e.args.length;o++)(n=e.args.slice(0)).splice(o,1),t=1===n.length?n[0]:a(n),i.push(a([e.args[o],t]));else t=1===(n=e.args.slice(1)).length?n[0]:a(n),i.push(a([e.args[0],t]));return i}(t,r.context),p=[];for(d=0;d<f.length;d++){var m=T(r,f[d],!0);p=p.concat(m)}return p}if(r.args.length>2)throw Error("Unexpected non-binary associative function: "+r.toString());return[]}for(var h=[],d=0;d<r.args.length;d++){var y=T(r.args[d],t.args[d]);if(0===y.length)return[];h.push(y)}a=function(e){if(0===e.length)return e;for(var r=e.reduce(_),t=[],n={},i=0;i<r.length;i++){var a=JSON.stringify(r[i]);n[a]||(n[a]=!0,t.push(r[i]))}return t}(h)}else if(r instanceof l){if(0===r.name.length)throw new Error("Symbol in rule has 0 length...!?");if(i.hasOwnProperty(r.name)){if(!E[r.name])throw new Error("Built in constant: "+r.name+" is not supported by simplify.");if(r.name!==t.name)return[]}else if("n"===r.name[0]||"_p"===r.name.substring(0,2))a[0].placeholders[r.name]=t;else if("v"===r.name[0]){if(e.isConstantNode(t))return[];a[0].placeholders[r.name]=t}else{if("c"!==r.name[0])throw new Error("Invalid symbol in rule: "+r.name);if(!(t instanceof s))return[];a[0].placeholders[r.name]=t}}else{if(!(r instanceof s))return[];if(!o(r.value,t.value))return[]}return a}function C(e,r){if(e instanceof s&&r instanceof s){if(!o(e.value,r.value))return!1}else if(e instanceof l&&r instanceof l){if(e.name!==r.name)return!1}else{if(!(e instanceof c&&r instanceof c||e instanceof u&&r instanceof u))return!1;if(e instanceof c){if(e.op!==r.op||e.fn!==r.fn)return!1}else if(e instanceof u&&e.name!==r.name)return!1;if(e.args.length!==r.args.length)return!1;for(var t=0;t<e.args.length;t++)if(!C(e.args[t],r.args[t]))return!1}return!0}return N}};var nu={name:"derivative",factory:function(e,r,t,n){var i=t(Yo),a=t(tu),o=t(Sr),s=t(Ks),u=t(Ta),c=t(bo),f=t(Wo),l=t(Uo),p=t(ko),m=t(Fo),h=n("derivative",{"Node, SymbolNode, Object":function(e,r,t){var n={};g(n,e,r.name);var i=v(e,n);return t.simplify?a(i):i},"Node, SymbolNode":function(e,r){return h(e,r,{simplify:!0})},"string, SymbolNode":function(e,r){return h(i(e),r)},"string, SymbolNode, Object":function(e,r,t){return h(i(e),r,t)},"string, string":function(e,r){return h(i(e),i(r))},"string, string, Object":function(e,r,t){return h(i(e),i(r),t)},"Node, string":function(e,r){return h(e,i(r))},"Node, string, Object":function(e,r,t){return h(e,i(r),t)}});h._simplify=!0,h.toTex=function(e){return d.apply(null,e.args)};var d=n("_derivTex",{"Node, SymbolNode":function(e,r){return d(e.toString(),r.toString(),1)},"Node, SymbolNode, ConstantNode":function(e,r,t){return d(e.toString(),r.name,t.value)},"string, string, number":function(e,r,t){return(1===t?"{d\\over d"+r+"}":"{d^{"+t+"}\\over d"+r+"^{"+t+"}}")+"\\left["+e+"\\right]"}}),g=n("constTag",{"Object, ConstantNode, string":function(e,r){return e[r]=!0},"Object, SymbolNode, string":function(e,r,t){return r.name!==t&&(e[r]=!0)},"Object, ParenthesisNode, string":function(e,r,t){return g(e,r.content,t)},"Object, FunctionAssignmentNode, string":function(e,r,t){return-1===r.params.indexOf(t)?e[r]=!0:g(e,r.expr,t)},"Object, FunctionNode | OperatorNode, string":function(e,r,t){if(r.args.length>0){for(var n=g(e,r.args[0],t),i=1;i<r.args.length;++i)n=g(e,r.args[i],t)&&n;if(n)return e[r]=!0}return!1}}),v=n("_derivative",{"ConstantNode, Object":function(e){return y(0)},"SymbolNode, Object":function(e,r){return void 0!==r[e]?y(0):y(1)},"ParenthesisNode, Object":function(e,r){return new p(v(e.content,r))},"FunctionAssignmentNode, Object":function(e,r){return void 0!==r[e]?y(0):v(e.expr,r)},"FunctionNode, Object":function(e,r){if(1!==e.args.length&&function(e){if("log"!==e.name&&"nthRoot"!==e.name||2!==e.args.length){for(var r=0;r<e.args.length;++r)e.args[r]=y(0);throw e.compile().eval(),new Error("Expected TypeError, but none found")}}(e),void 0!==r[e])return y(0);var t,n,i,a,o=e.args[0],s=!1,u=!1;switch(e.name){case"cbrt":s=!0,n=new l("*","multiply",[y(3),new l("^","pow",[o,new l("/","divide",[y(2),y(3)])])]);break;case"sqrt":case"nthRoot":if(1===e.args.length)s=!0,n=new l("*","multiply",[y(2),new f("sqrt",[o])]);else if(2===e.args.length)return r[t=new l("/","divide",[y(1),e.args[1]])]=r[e.args[1]],v(new l("^","pow",[o,t]),r);break;case"log10":t=y(10);case"log":if(t||1!==e.args.length){if(1===e.args.length&&t||2===e.args.length&&void 0!==r[e.args[1]])n=new l("*","multiply",[o.clone(),new f("log",[t||e.args[1]])]),s=!0;else if(2===e.args.length)return v(new l("/","divide",[new f("log",[o]),new f("log",[e.args[1]])]),r)}else n=o.clone(),s=!0;break;case"exp":n=new f("exp",[o.clone()]);break;case"sin":n=new f("cos",[o.clone()]);break;case"cos":n=new l("-","unaryMinus",[new f("sin",[o.clone()])]);break;case"tan":n=new l("^","pow",[new f("sec",[o.clone()]),y(2)]);break;case"sec":n=new l("*","multiply",[e,new f("tan",[o.clone()])]);break;case"csc":u=!0,n=new l("*","multiply",[e,new f("cot",[o.clone()])]);break;case"cot":u=!0,n=new l("^","pow",[new f("csc",[o.clone()]),y(2)]);break;case"asin":s=!0,n=new f("sqrt",[new l("-","subtract",[y(1),new l("^","pow",[o.clone(),y(2)])])]);break;case"acos":s=!0,u=!0,n=new f("sqrt",[new l("-","subtract",[y(1),new l("^","pow",[o.clone(),y(2)])])]);break;case"atan":s=!0,n=new l("+","add",[new l("^","pow",[o.clone(),y(2)]),y(1)]);break;case"asec":s=!0,n=new l("*","multiply",[new f("abs",[o.clone()]),new f("sqrt",[new l("-","subtract",[new l("^","pow",[o.clone(),y(2)]),y(1)])])]);break;case"acsc":s=!0,u=!0,n=new l("*","multiply",[new f("abs",[o.clone()]),new f("sqrt",[new l("-","subtract",[new l("^","pow",[o.clone(),y(2)]),y(1)])])]);break;case"acot":s=!0,u=!0,n=new l("+","add",[new l("^","pow",[o.clone(),y(2)]),y(1)]);break;case"sinh":n=new f("cosh",[o.clone()]);break;case"cosh":n=new f("sinh",[o.clone()]);break;case"tanh":n=new l("^","pow",[new f("sech",[o.clone()]),y(2)]);break;case"sech":u=!0,n=new l("*","multiply",[e,new f("tanh",[o.clone()])]);break;case"csch":u=!0,n=new l("*","multiply",[e,new f("coth",[o.clone()])]);break;case"coth":u=!0,n=new l("^","pow",[new f("csch",[o.clone()]),y(2)]);break;case"asinh":s=!0,n=new f("sqrt",[new l("+","add",[new l("^","pow",[o.clone(),y(2)]),y(1)])]);break;case"acosh":s=!0,n=new f("sqrt",[new l("-","subtract",[new l("^","pow",[o.clone(),y(2)]),y(1)])]);break;case"atanh":s=!0,n=new l("-","subtract",[y(1),new l("^","pow",[o.clone(),y(2)])]);break;case"asech":s=!0,u=!0,n=new l("*","multiply",[o.clone(),new f("sqrt",[new l("-","subtract",[y(1),new l("^","pow",[o.clone(),y(2)])])])]);break;case"acsch":s=!0,u=!0,n=new l("*","multiply",[new f("abs",[o.clone()]),new f("sqrt",[new l("+","add",[new l("^","pow",[o.clone(),y(2)]),y(1)])])]);break;case"acoth":s=!0,u=!0,n=new l("-","subtract",[y(1),new l("^","pow",[o.clone(),y(2)])]);break;case"abs":n=new l("/","divide",[new f(new m("abs"),[o.clone()]),o.clone()]);break;case"gamma":default:throw new Error('Function "'+e.name+'" is not supported by derivative, or a wrong number of arguments is passed')}s?(i="/",a="divide"):(i="*",a="multiply");var c=v(o,r);return u&&(c=new l("-","unaryMinus",[c])),new l(i,a,[c,n])},"OperatorNode, Object":function(r,t){if(void 0!==t[r])return y(0);if("+"===r.op)return new l(r.op,r.fn,r.args.map(function(e){return v(e,t)}));if("-"===r.op){if(r.isUnary())return new l(r.op,r.fn,[v(r.args[0],t)]);if(r.isBinary())return new l(r.op,r.fn,[v(r.args[0],t),v(r.args[1],t)])}if("*"===r.op){var n=r.args.filter(function(e){return void 0!==t[e]});if(n.length>0){var i=r.args.filter(function(e){return void 0===t[e]}),a=1===i.length?i[0]:new l("*","multiply",i),u=n.concat(v(a,t));return new l("*","multiply",u)}return new l("+","add",r.args.map(function(e){return new l("*","multiply",r.args.map(function(r){return r===e?v(r,t):r.clone()}))}))}if("/"===r.op&&r.isBinary()){var c=r.args[0],p=r.args[1];return void 0!==t[p]?new l("/","divide",[v(c,t),p]):void 0!==t[c]?new l("*","multiply",[new l("-","unaryMinus",[c]),new l("/","divide",[v(p,t),new l("^","pow",[p.clone(),y(2)])])]):new l("/","divide",[new l("-","subtract",[new l("*","multiply",[v(c,t),p.clone()]),new l("*","multiply",[c.clone(),v(p,t)])]),new l("^","pow",[p.clone(),y(2)])])}if("^"===r.op&&r.isBinary()){if(c=r.args[0],p=r.args[1],void 0!==t[c])return e.isConstantNode(c)&&(s(c.value)||o(c.value,1))?y(0):new l("*","multiply",[r,new l("*","multiply",[new f("log",[c.clone()]),v(p.clone(),t)])]);if(void 0!==t[p]){if(e.isConstantNode(p)){if(s(p.value))return y(0);if(o(p.value,1))return v(c,t)}var m=new l("^","pow",[c.clone(),new l("-","subtract",[p,y(1)])]);return new l("*","multiply",[p.clone(),new l("*","multiply",[v(c,t),m])])}return new l("*","multiply",[new l("^","pow",[c.clone(),p.clone()]),new l("+","add",[new l("*","multiply",[v(c,t),new l("/","divide",[p.clone(),c.clone()])]),new l("*","multiply",[v(p,t),new f("log",[c.clone()])])])])}throw new Error('Operator "'+r.op+'" is not supported by derivative, or a wrong number of arguments is passed')}});function y(e,t){return new c(u(e,t||r.number))}return h}};var iu={name:"rationalize",factory:function(e,r,t,n){var i=t(tu),a=t(eu),s=t(Qs),u=d,c=t(rs),f=o,l=t(bo),p=t(Uo),m=t(Fo),h=n("rationalize",{string:function(e){return h(c(e),{},!1)},"string, boolean":function(e,r){return h(c(e),{},r)},"string, Object":function(e,r){return h(c(e),r,!1)},"string, Object, boolean":function(e,r,t){return h(c(e),r,t)},Node:function(e){return h(e,{},!1)},"Node, boolean":function(e,r){return h(e,{},r)},"Node, Object":function(e,r){return h(e,r,!1)},"Node, Object, boolean":function(e,r,t){var n=function(e,r,t){var n=[],a=i(e,r),o="+-*"+((t=!!t)?"/":"");!function e(r){var t=r.type;if("FunctionNode"===t)throw new u("There is an unsolved function call");if("OperatorNode"===t)if("^"===r.op&&r.isBinary()){if("ConstantNode"!==r.args[1].type||!f.isInteger(parseFloat(r.args[1].value)))throw new u("There is a non-integer exponent");e(r.args[0])}else{if(-1===o.indexOf(r.op))throw new u("Operator "+r.op+" invalid in polynomial expression");for(var i=0;i<r.args.length;i++)e(r.args[i])}else if("SymbolNode"===t){var a=r.name,s=n.indexOf(a);-1===s&&n.push(a)}else if("ParenthesisNode"===t)e(r.content);else if("ConstantNode"!==t)throw new u("type "+t+" is not allowed in polynomial expression")}(a);var s={};return s.expression=a,s.variables=n,s}(e,r,!0),o=n.variables.length;if(e=n.expression,o>=1){var c=function(){var e=[a,{l:"n+n",r:"2*n"},{l:"n+-n",r:"0"},s,{l:"n*(n1^-1)",r:"n/n1"},{l:"n*n1^-n2",r:"n/n1^n2"},{l:"n1^-1",r:"1/n1"},{l:"n*(n1/n2)",r:"(n*n1)/n2"},{l:"1*n",r:"n"}],r=[{l:"(-n1)/(-n2)",r:"n1/n2"},{l:"(-n1)*(-n2)",r:"n1*n2"},{l:"n1--n2",r:"n1+n2"},{l:"n1-n2",r:"n1+(-n2)"},{l:"(n1+n2)*n3",r:"(n1*n3 + n2*n3)"},{l:"n1*(n2+n3)",r:"(n1*n2+n1*n3)"},{l:"c1*n + c2*n",r:"(c1+c2)*n"},{l:"-v*-c",r:"c*v"},{l:"-v*c",r:"-c*v"},{l:"v*-c",r:"-c*v"},{l:"v*c",r:"c*v"},{l:"-(-n1*n2)",r:"(n1*n2)"},{l:"-(n1*n2)",r:"(-n1*n2)"},{l:"-(-n1+n2)",r:"(n1-n2)"},{l:"-(n1+n2)",r:"(-n1-n2)"},{l:"(n1^n2)^n3",r:"(n1^(n2*n3))"},{l:"-(-n1/n2)",r:"(n1/n2)"},{l:"-(n1/n2)",r:"(-n1/n2)"}],t=[{l:"(n1/(n2/n3))",r:"((n1*n3)/n2)"},{l:"(n1/n2/n3)",r:"(n1/(n2*n3))"}],n={};return n.firstRules=e.concat(r,t),n.distrDivRules=[{l:"(n1/n2 + n3/n4)",r:"((n1*n4 + n3*n2)/(n2*n4))"},{l:"(n1/n2 + n3)",r:"((n1 + n3*n2)/n2)"},{l:"(n1 + n2/n3)",r:"((n1*n3 + n2)/n3)"}],n.sucDivRules=t,n.firstRulesAgain=e.concat(r),n.finalRules=[a,{l:"n*-n",r:"-n^2"},{l:"n*n",r:"n^2"},s,{l:"n*-n^n1",r:"-n^(n1+1)"},{l:"n*n^n1",r:"n^(n1+1)"},{l:"n^n1*-n^n2",r:"-n^(n1+n2)"},{l:"n^n1*n^n2",r:"n^(n1+n2)"},{l:"n^n1*-n",r:"-n^(n1+1)"},{l:"n^n1*n",r:"n^(n1+1)"},{l:"n^n1/-n",r:"-n^(n1-1)"},{l:"n^n1/n",r:"n^(n1-1)"},{l:"n/-n^n1",r:"-n^(1-n1)"},{l:"n/n^n1",r:"n^(1-n1)"},{l:"n^n1/-n^n2",r:"n^(n1-n2)"},{l:"n^n1/n^n2",r:"n^(n1-n2)"},{l:"n1+(-n2*n3)",r:"n1-n2*n3"},{l:"v*(-c)",r:"-c*v"},{l:"n1+-n2",r:"n1-n2"},{l:"v*c",r:"c*v"},{l:"(n1^n2)^n3",r:"(n1^(n2*n3))"}],n}();e=function e(r,t,n){var i=r.type,a=arguments.length>1;if("OperatorNode"===i&&r.isBinary()){var o=!1;if("^"===r.op&&("ParenthesisNode"===r.args[0].type||"OperatorNode"===r.args[0].type)&&"ConstantNode"===r.args[1].type){var s=parseFloat(r.args[1].value);o=s>=2&&f.isInteger(s)}if(o){if(s>2){var u=r.args[0],c=new p("^","pow",[r.args[0].cloneDeep(),new l(s-1)]);r=new p("*","multiply",[u,c])}else r=new p("*","multiply",[r.args[0],r.args[0].cloneDeep()]);a&&("content"===n?t.content=r:t.args[n]=r)}}if("ParenthesisNode"===i)e(r.content,r,"content");else if("ConstantNode"!==i&&"SymbolNode"!==i)for(var m=0;m<r.args.length;m++)e(r.args[m],r,m);if(!a)return r}(e);var m,h,d=!0,v="",y=!0;for(v=(e=i(e,c.firstRules)).toString();h=y?c.distrDivRules:c.sucDivRules,y=!y,(v=(e=i(e,h)).toString())!==m;)d=!0,m=v;d&&(e=i(e,c.firstRulesAgain)),e=i(e,c.finalRules)}var x=[],w={};return"OperatorNode"===e.type&&e.isBinary()&&"/"===e.op?(1==o&&(e.args[0]=g(e.args[0],x),e.args[1]=g(e.args[1])),t&&(w.numerator=e.args[0],w.denominator=e.args[1])):(1==o&&(e=g(e,x)),t&&(w.numerator=e,w.denominator=null)),t?(w.coefficients=x,w.variables=n.variables,w.expression=e,w):e}});function g(e,r){var t;void 0===r&&(r=[]),r[0]=0;var n={cte:1,oper:"+",fire:""},i=0,a="";!function e(t,n,o){var s=t.type;if("FunctionNode"===s)throw new u("There is an unsolved function call");if("OperatorNode"===s){if(-1==="+-*^".indexOf(t.op))throw new u("Operator "+t.op+" invalid");if(null!==n){if(("unaryMinus"===t.fn||"pow"===t.fn)&&"add"!==n.fn&&"subtract"!==n.fn&&"multiply"!==n.fn)throw new u("Invalid "+t.op+" placing");if(("subtract"===t.fn||"add"===t.fn||"multiply"===t.fn)&&"add"!==n.fn&&"subtract"!==n.fn)throw new u("Invalid "+t.op+" placing");if(("subtract"===t.fn||"add"===t.fn||"unaryMinus"===t.fn)&&0!==o.noFil)throw new u("Invalid "+t.op+" placing")}"^"!==t.op&&"*"!==t.op||(o.fire=t.op);for(var c=0;c<t.args.length;c++)"unaryMinus"===t.fn&&(o.oper="-"),"+"!==t.op&&"subtract"!==t.fn||(o.fire="",o.cte=1,o.oper=0===c?"+":t.op),o.noFil=c,e(t.args[c],t,o)}else if("SymbolNode"===s){if(t.name!==a&&""!==a)throw new u("There is more than one variable");if(a=t.name,null===n)return void(r[1]=1);if("^"===n.op&&0!==o.noFil)throw new u("In power the variable should be the first parameter");if("*"===n.op&&1!==o.noFil)throw new u("In multiply the variable should be the second parameter");""!==o.fire&&"*"!==o.fire||(i<1&&(r[1]=0),r[1]+=o.cte*("+"===o.oper?1:-1),i=Math.max(1,i))}else{if("ConstantNode"!==s)throw new u("Type "+s+" is not allowed");var l=parseFloat(t.value);if(null===n)return void(r[0]=l);if("^"===n.op){if(1!==o.noFil)throw new u("Constant cannot be powered");if(!f.isInteger(l)||l<=0)throw new u("Non-integer exponent is not allowed");for(var c=i+1;c<l;c++)r[c]=0;return l>i&&(r[l]=0),r[l]+=o.cte*("+"===o.oper?1:-1),void(i=Math.max(l,i))}o.cte=l,""===o.fire&&(r[0]+=o.cte*("+"===o.oper?1:-1))}}(e,null,n);var o=!0;for(t=i=r.length-1;t>=0;t--)if(0!==r[t]){var s,c=new l(o?r[t]:Math.abs(r[t])),h=r[t]<0?"-":"+";if(t>0){var d=new m(a);if(t>1){var g=new l(t);d=new p("^","pow",[d,g])}c=-1===r[t]&&o?new p("-","unaryMinus",[d]):1===Math.abs(r[t])?d:new p("*","multiply",[c,d])}s=o?c:"+"===h?new p("+","add",[s,c]):new p("-","subtract",[s,c]),o=!1}return o?new l(0):s}return h}};var au={name:"clone",factory:function(e,r,t,n){var a=n("clone",{any:i.clone});return a.toTex=void 0,a}};var ou={name:"isPositive",factory:function(e,r,t,n){var i=n("isPositive",{number:function(e){return e>0},BigNumber:function(e){return!e.isNeg()&&!e.isZero()&&!e.isNaN()},Fraction:function(e){return e.s>0&&e.n>0},Unit:function(e){return i(e.value)},"Array | Matrix":function(e){return A(e,i)}});return i}},su=o.nearlyEqual;var uu={name:"unequal",factory:function(e,r,t,n){var i=t(Ee),a=t(Re),o=t(Ue),s=t(ke),u=t(Te),c=t(ze),f=L,l=n("unequal",{"any, any":function(e,r){return null===e?null!==r:null===r?null!==e:void 0===e?void 0!==r:void 0===r?void 0!==e:p(e,r)},"SparseMatrix, SparseMatrix":function(e,r){return o(e,r,p)},"SparseMatrix, DenseMatrix":function(e,r){return a(r,e,p,!0)},"DenseMatrix, SparseMatrix":function(e,r){return a(e,r,p,!1)},"DenseMatrix, DenseMatrix":function(e,r){return u(e,r,p)},"Array, Array":function(e,r){return l(i(e),i(r)).valueOf()},"Array, Matrix":function(e,r){return l(i(e),r)},"Matrix, Array":function(e,r){return l(e,i(r))},"SparseMatrix, any":function(e,r){return s(e,r,p,!1)},"DenseMatrix, any":function(e,r){return c(e,r,p,!1)},"any, SparseMatrix":function(e,r){return s(r,e,p,!0)},"any, DenseMatrix":function(e,r){return c(r,e,p,!0)},"Array, any":function(e,r){return c(i(e),r,p,!1).valueOf()},"any, Array":function(e,r){return c(i(r),e,p,!0).valueOf()}}),p=n("_unequal",{"boolean, boolean":function(e,r){return e!==r},"number, number":function(e,t){return!su(e,t,r.epsilon)},"BigNumber, BigNumber":function(e,t){return!le(e,t,r.epsilon)},"Fraction, Fraction":function(e,r){return!e.equals(r)},"Complex, Complex":function(e,r){return!e.equals(r)},"Unit, Unit":function(e,r){if(!e.equalBase(r))throw new Error("Cannot compare units with different base");return l(e.value,r.value)}});return l.toTex={2:"\\left(${args[0]}"+f.operators.unequal+"${args[1]}\\right)"},l}};var cu={name:"sign",factory:function(e,r,t,n){var i=n("sign",{number:o.sign,Complex:function(e){return e.sign()},BigNumber:function(r){return new e.BigNumber(r.cmp(0))},Fraction:function(r){return new e.Fraction(r.s,1)},"Array | Matrix":function(e){return A(e,i,!0)},Unit:function(e){return i(e.value)}});return i.toTex={1:"\\mathrm{${name}}\\left(${args[0]}\\right)"},i}};var fu={name:"sqrt",factory:function(e,r,t,n){var i=n("sqrt",{number:a,Complex:function(e){return e.sqrt()},BigNumber:function(e){return!e.isNegative()||r.predictable?e.sqrt():a(e.toNumber())},"Array | Matrix":function(e){return A(e,i,!0)},Unit:function(e){return e.pow(.5)}});function a(t){return t>=0||r.predictable?Math.sqrt(t):new e.Complex(t,0).sqrt()}return i.toTex={1:"\\sqrt{${args[0]}}"},i}};var lu={name:"conj",factory:function(e,r,t,n){var i=n("conj",{number:function(e){return e},BigNumber:function(e){return e},Complex:function(e){return e.conjugate()},"Array | Matrix":function(e){return A(e,i)}});return i.toTex={1:"\\left(${args[0]}\\right)^*"},i}};var pu={name:"qr",factory:function(e,r,t,n){var i=t(Ee),a=t(Nr),o=t(lr),s=(t(au),t(Ks)),u=(t(ou),t(uu)),c=(t(yr),t(cu)),f=t(fu),l=t(lu),p=t(ir),m=t(Ae),h=t(cr),d=t(ur),g=t(sr),v=n("qr",{DenseMatrix:function(e){return y(e)},SparseMatrix:function(e){return x(e)},Array:function(e){var r=i(e),t=y(r);return{Q:t.Q.valueOf(),R:t.R.valueOf()}}}),y=function(e){var r,t,n,i=e._size[0],v=e._size[1],y=o([i],"dense"),x=y._data,w=e.clone(),b=w._data,N=a([i],"");for(n=0;n<Math.min(v,i);++n){var M=b[n][n],E=p(c(M)),A=l(E),O=0;for(r=n;r<i;r++)O=m(O,d(b[r][n],l(b[r][n])));var S=d(E,f(O));if(!s(S)){var _=g(M,S);for(N[n]=1,r=n+1;r<i;r++)N[r]=h(b[r][n],_);var T,C=p(l(h(_,S)));for(t=n;t<v;t++){for(T=0,r=n;r<i;r++)T=m(T,d(l(N[r]),b[r][t]));for(T=d(T,C),r=n;r<i;r++)b[r][t]=d(g(b[r][t],d(N[r],T)),A)}for(r=0;r<i;r++){for(T=0,t=n;t<i;t++)T=m(T,d(x[r][t],N[t]));for(T=d(T,C),t=n;t<i;++t)x[r][t]=h(g(x[r][t],d(T,l(N[t]))),A)}}}for(r=0;r<i;++r)for(t=0;t<r&&t<v;++t){if(u(0,h(b[r][t],1e5)))throw new Error("math.qr(): unknown error - R is not lower triangular (element ("+r+", "+t+")  = "+b[r][t]+")");b[r][t]=d(b[r][t],0)}return{Q:y,R:w,toString:function(){return"Q: "+this.Q.toString()+"\nR: "+this.R.toString()}}},x=function(e){throw new Error("qr not implemented for sparse matrices yet")};return v}},mu=Q.object;var hu={name:"lup",factory:function(e,r,t,n){var i=t(Ee),a=t(yr),o=t(Ae),s=t(cr),u=t(ur),c=t(sr),f=t(Fe),l=t(me),p=t(ir),m=e.SparseMatrix,h=e.DenseMatrix,d=e.Spa,g=n("lup",{DenseMatrix:function(e){return v(e)},SparseMatrix:function(e){return y(e)},Array:function(e){var r=i(e),t=v(r);return{L:t.L.valueOf(),U:t.U.valueOf(),p:t.p}}}),v=function(e){var r,t,n,i=e._size[0],p=e._size[1],m=Math.min(i,p),d=mu.clone(e._data),g=[],v=[i,m],y=[],x=[m,p],w=[];for(r=0;r<i;r++)w[r]=r;for(t=0;t<p;t++){if(t>0)for(r=0;r<i;r++){var b=Math.min(r,t),N=0;for(n=0;n<b;n++)N=o(N,u(d[r][n],d[n][t]));d[r][t]=c(d[r][t],N)}var M=t,E=0,A=0;for(r=t;r<i;r++){var O=d[r][t],S=a(O);f(S,E)&&(M=r,E=S,A=O)}if(t!==M&&(w[t]=[w[M],w[M]=w[t]][0],h._swapRows(t,M,d)),t<i)for(r=t+1;r<i;r++){var _=d[r][t];l(_,0)||(d[r][t]=s(d[r][t],A))}}for(t=0;t<p;t++)for(r=0;r<i;r++)0===t&&(r<p&&(y[r]=[]),g[r]=[]),r<t?(r<p&&(y[r][t]=d[r][t]),t<i&&(g[r][t]=0)):r!==t?(r<p&&(y[r][t]=0),t<i&&(g[r][t]=d[r][t])):(r<p&&(y[r][t]=d[r][t]),t<i&&(g[r][t]=1));var T=new h({data:g,size:v}),C=new h({data:y,size:x}),z=[];for(r=0,m=w.length;r<m;r++)z[w[r]]=r;return{L:T,U:C,p:z,toString:function(){return"L: "+this.L.toString()+"\nU: "+this.U.toString()+"\nP: "+this.p}}},y=function(e){var r,t,n,i,o,c,h,g=e._size[0],v=e._size[1],y=Math.min(g,v),x=e._values,w=e._index,b=e._ptr,N=[],M=[],E=[],A=[g,y],O=[],S=[],_=[],T=[y,v],C=[],z=[];for(r=0;r<g;r++)C[r]=r,z[r]=r;for(t=0;t<v;t++){var B=new d;t<g&&(E.push(N.length),N.push(1),M.push(t)),_.push(O.length);var P=b[t],I=b[t+1];for(n=P;n<I;n++)r=w[n],B.set(C[r],x[n]);t>0&&B.forEach(0,t-1,function(e,r){m._forEachRow(e,N,M,E,function(t,n){t>e&&B.accumulate(t,p(u(n,r)))})});var R=t,U=B.get(t),k=a(U);B.forEach(t+1,g-1,function(e,r){var t=a(r);f(t,k)&&(R=e,k=t,U=r)}),t!==R&&(m._swapRows(t,R,A[1],N,M,E),m._swapRows(t,R,T[1],O,S,_),B.swap(t,R),o=R,c=z[i=t],h=z[o],C[c]=o,C[h]=i,z[i]=h,z[o]=c),B.forEach(0,g-1,function(e,r){e<=t?(O.push(r),S.push(e)):(r=s(r,U),l(r,0)||(N.push(r),M.push(e)))})}return _.push(O.length),E.push(N.length),{L:new m({values:N,index:M,ptr:E,size:A}),U:new m({values:O,index:S,ptr:_,size:T}),p:C,toString:function(){return"L: "+this.L.toString()+"\nU: "+this.U.toString()+"\nP: "+this.p}}};return g}};var du={name:"cs_flip",path:"sparse",factory:function(){return function(e){return-e-2}}};var gu={name:"cs_fkeep",path:"sparse",factory:function(){return function(e,r,t){for(var n=e._values,i=e._index,a=e._ptr,o=e._size[1],s=0,u=0;u<o;u++){var c=a[u];for(a[u]=s;c<a[u+1];c++)r(i[c],u,n?n[c]:1,t)&&(i[s]=i[c],n&&(n[s]=n[c]),s++)}return a[o]=s,i.splice(s,i.length-s),n&&n.splice(s,n.length-s),s}}};var vu={name:"cs_tdfs",path:"sparse",factory:function(){return function(e,r,t,n,i,a,o){var s=0;for(t[o]=e;s>=0;){var u=t[o+s],c=t[n+u];-1==c?(s--,a[r++]=u):(t[n+u]=t[i+c],t[o+ ++s]=c)}return r}}},yu=i.clone,xu=T.format;var wu={name:"transpose",factory:function(e,r,t,n){var i=L,a=t(Ee),o=e.DenseMatrix,s=e.SparseMatrix,u=n("transpose",{Array:function(e){return u(a(e)).valueOf()},Matrix:function(e){var r,t=e.size();switch(t.length){case 1:r=e.clone();break;case 2:var n=t[0],i=t[1];if(0===i)throw new RangeError("Cannot transpose a 2D matrix with no columns (size: "+xu(t)+")");switch(e.storage()){case"dense":r=c(e,n,i);break;case"sparse":r=f(e,n,i)}break;default:throw new RangeError("Matrix must be a vector or two dimensional (size: "+xu(this._size)+")")}return r},any:function(e){return yu(e)}}),c=function(e,r,t){for(var n,i=e._data,a=[],s=0;s<t;s++){n=a[s]=[];for(var u=0;u<r;u++)n[u]=yu(i[u][s])}return new o({data:a,size:[t,r],datatype:e._datatype})},f=function(e,r,t){for(var n,i,a,o=e._values,u=e._index,c=e._ptr,f=o?[]:void 0,l=[],p=[],m=[],h=0;h<r;h++)m[h]=0;for(n=0,i=u.length;n<i;n++)m[u[n]]++;for(var d=0,g=0;g<r;g++)p.push(d),d+=m[g],m[g]=p[g];for(p.push(d),a=0;a<t;a++)for(var v=c[a],y=c[a+1],x=v;x<y;x++){var w=m[u[x]]++;l[w]=a,o&&(f[w]=yu(o[x]))}return new s({values:f,index:l,ptr:p,size:[t,r],datatype:e._datatype})};return u.toTex={1:"\\left(${args[0]}\\right)"+i.operators.transpose},u}};var bu={name:"cs_amd",path:"sparse",factory:function(e,r,t){var n=t(du),i=t(gu),a=t(vu),o=t(Pe),s=t(hr),u=t(wu),c=function(e,r,t,n,i){var a=u(r);if(1===e&&n===t)return o(r,a);if(2==e){for(var c=a._index,f=a._ptr,l=0,p=0;p<t;p++){var m=f[p];if(f[p]=l,!(f[p+1]-m>i))for(var h=f[p+1];m<h;m++)c[l++]=c[m]}return f[t]=l,r=u(a),s(a,r)}return s(a,r)},f=function(e,r,t,n,i,a,o,s,u,c,f,l){for(var m=0;m<e;m++)t[n+m]=r[m+1]-r[m];t[n+e]=0;for(var h=0;h<=e;h++)t[i+h]=-1,a[h]=-1,t[o+h]=-1,t[s+h]=-1,t[u+h]=1,t[c+h]=1,t[f+h]=0,t[l+h]=t[n+h];var d=p(0,0,t,c,e);return t[f+e]=-2,r[e]=-1,t[c+e]=0,d},l=function(e,r,t,i,a,o,s,u,c,f,l){for(var p=0,m=0;m<e;m++){var h=t[i+m];if(0===h)t[a+m]=-2,p++,r[m]=-1,t[o+m]=0;else if(h>s)t[u+m]=0,t[a+m]=-1,p++,r[m]=n(e),t[u+e]++;else{var d=t[c+h];-1!=d&&(f[d]=m),t[l+m]=t[c+h],t[c+h]=m}}return p},p=function(e,r,t,n,i){if(e<2||e+r<0){for(var a=0;a<i;a++)0!==t[n+a]&&(t[n+a]=1);e=2}return e},m=function(e,r){return e!=r};return function(e,r){if(!r||e<=0||e>3)return null;var t=r._size,o=t[0],s=t[1],u=0,h=Math.max(16,10*Math.sqrt(s));h=Math.min(s-2,h);var d=c(e,r,o,s,h);i(d,m,null);for(var g,v,y,x,w,b,N,M,E,A,O,S,_,T,C,z,B=d._index,P=d._ptr,I=P[s],R=[],U=[],k=s+1,D=2*(s+1),q=3*(s+1),L=4*(s+1),F=5*(s+1),j=6*(s+1),H=7*(s+1),$=R,G=f(s,P,U,0,q,$,D,H,k,j,L,F),V=l(s,P,U,F,L,j,h,k,q,$,D),Z=0;V<s;){for(y=-1;Z<s&&-1==(y=U[q+Z]);Z++);-1!=U[D+y]&&($[U[D+y]]=-1),U[q+Z]=U[D+y];var W=U[L+y],J=U[k+y];V+=J;var Y=0;U[k+y]=-J;var X=P[y],Q=0===W?X:I,K=Q;for(x=1;x<=W+1;x++){for(x>W?(b=y,N=X,M=U[0+y]-W):(N=P[b=B[X++]],M=U[0+b]),w=1;w<=M;w++)(E=U[k+(g=B[N++])])<=0||(Y+=E,U[k+g]=-E,B[K++]=g,-1!=U[D+g]&&($[U[D+g]]=$[g]),-1!=$[g]?U[D+$[g]]=U[D+g]:U[q+U[F+g]]=U[D+g]);b!=y&&(P[b]=n(y),U[j+b]=0)}for(0!==W&&(I=K),U[F+y]=Y,P[y]=Q,U[0+y]=K-Q,U[L+y]=-2,G=p(G,u,U,j,s),A=Q;A<K;A++)if(!((O=U[L+(g=B[A])])<=0)){var ee=G-(E=-U[k+g]);for(X=P[g],S=P[g]+O-1;X<=S;X++)U[j+(b=B[X])]>=G?U[j+b]-=E:0!==U[j+b]&&(U[j+b]=U[F+b]+ee)}for(A=Q;A<K;A++){for(_=(S=P[g=B[A]])+U[L+g]-1,T=S,C=0,z=0,X=S;X<=_;X++)if(0!==U[j+(b=B[X])]){var re=U[j+b]-G;re>0?(z+=re,B[T++]=b,C+=b):(P[b]=n(y),U[j+b]=0)}U[L+g]=T-S+1;var te=T,ne=S+U[0+g];for(X=_+1;X<ne;X++){var ie=U[k+(v=B[X])];ie<=0||(z+=ie,B[T++]=v,C+=v)}0===z?(P[g]=n(y),Y-=E=-U[k+g],J+=E,V+=E,U[k+g]=0,U[L+g]=-1):(U[F+g]=Math.min(U[F+g],z),B[T]=B[te],B[te]=B[S],B[S]=y,U[0+g]=T-S+1,C=(C<0?-C:C)%s,U[D+g]=U[H+C],U[H+C]=g,$[g]=C)}for(U[F+y]=Y,u=Math.max(u,Y),G=p(G+u,u,U,j,s),A=Q;A<K;A++)if(!(U[k+(g=B[A])]>=0))for(g=U[H+(C=$[g])],U[H+C]=-1;-1!=g&&-1!=U[D+g];g=U[D+g],G++){for(M=U[0+g],O=U[L+g],X=P[g]+1;X<=P[g]+M-1;X++)U[j+B[X]]=G;var ae=g;for(v=U[D+g];-1!=v;){var oe=U[0+v]===M&&U[L+v]===O;for(X=P[v]+1;oe&&X<=P[v]+M-1;X++)U[j+B[X]]!=G&&(oe=0);oe?(P[v]=n(g),U[k+g]+=U[k+v],U[k+v]=0,U[L+v]=-1,v=U[D+v],U[D+ae]=v):(ae=v,v=U[D+v])}}for(X=Q,A=Q;A<K;A++)(E=-U[k+(g=B[A])])<=0||(U[k+g]=E,z=U[F+g]+Y-E,-1!=U[q+(z=Math.min(z,s-V-E))]&&($[U[q+z]]=g),U[D+g]=U[q+z],$[g]=-1,U[q+z]=g,Z=Math.min(Z,z),U[F+g]=z,B[X++]=g);U[k+y]=J,0==(U[0+y]=X-Q)&&(P[y]=-1,U[j+y]=0),0!==W&&(I=X)}for(g=0;g<s;g++)P[g]=n(P[g]);for(v=0;v<=s;v++)U[q+v]=-1;for(v=s;v>=0;v--)U[k+v]>0||(U[D+v]=U[q+P[v]],U[q+P[v]]=v);for(b=s;b>=0;b--)U[k+b]<=0||-1!=P[b]&&(U[D+b]=U[q+P[b]],U[q+P[b]]=b);for(y=0,g=0;g<=s;g++)-1==P[g]&&(y=a(g,y,U,q,D,R,j));return R.splice(R.length-1,1),R}}};var Nu={name:"cs_permute",path:"sparse",factory:function(e){var r=e.SparseMatrix;return function(e,t,n,i){for(var a=e._values,o=e._index,s=e._ptr,u=e._size,c=e._datatype,f=u[0],l=u[1],p=i&&e._values?[]:null,m=[],h=[],d=0,g=0;g<l;g++){h[g]=d;for(var v=n?n[g]:g,y=s[v],x=s[v+1],w=y;w<x;w++){var b=t?t[o[w]]:o[w];m[d]=b,p&&(p[d]=a[w]),d++}}return h[l]=d,new r({values:p,index:m,ptr:h,size:[f,l],datatype:c})}}};var Mu={name:"cs_etree",path:"sparse",factory:function(){return function(e,r){if(!e)return null;var t,n,i=e._index,a=e._ptr,o=e._size,s=o[0],u=o[1],c=[],f=[],l=u;if(r)for(t=0;t<s;t++)f[l+t]=-1;for(var p=0;p<u;p++){c[p]=-1,f[0+p]=-1;for(var m=a[p],h=a[p+1],d=m;d<h;d++){var g=i[d];for(t=r?f[l+g]:g;-1!=t&&t<p;t=n)n=f[0+t],f[0+t]=p,-1==n&&(c[t]=p);r&&(f[l+g]=p)}}return c}}};var Eu={name:"cs_post",path:"sparse",factory:function(e,r,t){var n=t(vu);return function(e,r){if(!e)return null;var t,i=0,a=[],o=[],s=r,u=2*r;for(t=0;t<r;t++)o[0+t]=-1;for(t=r-1;t>=0;t--)-1!=e[t]&&(o[s+t]=o[0+e[t]],o[0+e[t]]=t);for(t=0;t<r;t++)-1==e[t]&&(i=n(t,i,o,0,s,a,u));return a}}};var Au={name:"cs_leaf",path:"sparse",factory:function(){return function(e,r,t,n,i,a,o){var s,u,c,f,l=0;if(e<=r||t[n+r]<=t[i+e])return-1;if(t[i+e]=t[n+r],c=t[a+e],t[a+e]=r,-1===c)l=1,f=e;else{for(l=2,f=c;f!=t[o+f];f=t[o+f]);for(s=c;s!=f;s=u)u=t[o+s],t[o+s]=f}return{jleaf:l,q:f}}}};var Ou={name:"cs_counts",path:"sparse",factory:function(e,r,t){var n=t(wu),i=t(Au);return function(e,r,t,a){if(!e||!r||!t)return null;var o,s,u,c,f,l,p,m=e._size,h=m[0],d=m[1],g=4*d+(a?d+h+1:0),v=[],y=d,x=2*d,w=3*d,b=4*d,N=5*d+1;for(u=0;u<g;u++)v[u]=-1;var M=[],E=n(e),A=E._index,O=E._ptr;for(u=0;u<d;u++)for(M[s=t[u]]=-1==v[w+s]?1:0;-1!=s&&-1==v[w+s];s=r[s])v[w+s]=u;if(a){for(u=0;u<d;u++)v[t[u]]=u;for(o=0;o<h;o++){for(u=d,l=O[o],p=O[o+1],f=l;f<p;f++)u=Math.min(u,v[A[f]]);v[N+o]=v[b+u],v[b+u]=o}}for(o=0;o<d;o++)v[0+o]=o;for(u=0;u<d;u++){for(-1!=r[s=t[u]]&&M[r[s]]--,c=a?v[b+u]:s;-1!=c;c=a?v[N+c]:-1)for(f=O[c];f<O[c+1];f++){o=A[f];var S=i(o,s,v,w,y,x,0);S.jleaf>=1&&M[s]++,2==S.jleaf&&M[S.q]--}-1!=r[s]&&(v[0+s]=r[s])}for(s=0;s<d;s++)-1!=r[s]&&(M[r[s]]+=M[s]);return M}}};var Su={name:"cs_sqr",path:"sparse",factory:function(e,r,t){var n=t(bu),i=t(Nu),a=t(Mu),o=t(Eu),s=t(Ou),u=function(e,r){var t=e._ptr,n=e._index,i=e._size,a=i[0],o=i[1];r.pinv=[],r.leftmost=[];var s,u,c,f,l,p=r.parent,m=r.pinv,h=r.leftmost,d=[],g=a,v=a+o,y=a+2*o;for(u=0;u<o;u++)d[g+u]=-1,d[v+u]=-1,d[y+u]=0;for(s=0;s<a;s++)h[s]=-1;for(u=o-1;u>=0;u--)for(f=t[u],l=t[u+1],c=f;c<l;c++)h[n[c]]=u;for(s=a-1;s>=0;s--)m[s]=-1,-1!=(u=h[s])&&(0==d[y+u]++&&(d[v+u]=s),d[0+s]=d[g+u],d[g+u]=s);for(r.lnz=0,r.m2=a,u=0;u<o;u++)if(s=d[g+u],r.lnz++,s<0&&(s=r.m2++),m[s]=u,!(--y[u]<=0)){r.lnz+=d[y+u];var x=p[u];-1!=x&&(0===d[y+x]&&(d[v+x]=d[v+u]),d[0+d[v+u]]=d[g+x],d[g+x]=d[0+s],d[y+x]+=d[y+u])}for(s=0;s<a;s++)m[s]<0&&(m[s]=u++);return!0};return function(e,r,t){var c,f=r._ptr,l=r._size[1],p={};if(p.q=n(e,r),e&&!p.q)return null;if(t){var m=e?i(r,null,p.q,0):r;p.parent=a(m,1);var h=o(p.parent,l);if(p.cp=s(m,p.parent,h,1),m&&p.parent&&p.cp&&u(m,p))for(p.unz=0,c=0;c<l;c++)p.unz+=p.cp[c]}else p.unz=4*f[l]+l,p.lnz=p.unz;return p}}},_u=o.nearlyEqual;var Tu={name:"largerEq",factory:function(e,r,t,n){var i=t(Ee),a=t(Re),o=t(Ue),s=t(ke),u=t(Te),c=t(ze),f=L,l=n("largerEq",{"boolean, boolean":function(e,r){return e>=r},"number, number":function(e,t){return e>=t||_u(e,t,r.epsilon)},"BigNumber, BigNumber":function(e,t){return e.gte(t)||le(e,t,r.epsilon)},"Fraction, Fraction":function(e,r){return-1!==e.compare(r)},"Complex, Complex":function(){throw new TypeError("No ordering relation is defined for complex numbers")},"Unit, Unit":function(e,r){if(!e.equalBase(r))throw new Error("Cannot compare units with different base");return l(e.value,r.value)},"SparseMatrix, SparseMatrix":function(e,r){return o(e,r,l)},"SparseMatrix, DenseMatrix":function(e,r){return a(r,e,l,!0)},"DenseMatrix, SparseMatrix":function(e,r){return a(e,r,l,!1)},"DenseMatrix, DenseMatrix":function(e,r){return u(e,r,l)},"Array, Array":function(e,r){return l(i(e),i(r)).valueOf()},"Array, Matrix":function(e,r){return l(i(e),r)},"Matrix, Array":function(e,r){return l(e,i(r))},"SparseMatrix, any":function(e,r){return s(e,r,l,!1)},"DenseMatrix, any":function(e,r){return c(e,r,l,!1)},"any, SparseMatrix":function(e,r){return s(r,e,l,!0)},"any, DenseMatrix":function(e,r){return c(r,e,l,!0)},"Array, any":function(e,r){return c(i(e),r,l,!1).valueOf()},"any, Array":function(e,r){return c(i(r),e,l,!0).valueOf()}});return l.toTex={2:"\\left(${args[0]}"+f.operators.largerEq+"${args[1]}\\right)"},l}};var Cu={name:"cs_marked",path:"sparse",factory:function(){return function(e,r){return e[r]<0}}};var zu={name:"cs_mark",path:"sparse",factory:function(e,r,t){var n=t(du);return function(e,r){e[r]=n(e[r])}}};var Bu={name:"cs_unflip",path:"sparse",factory:function(e,r,t){var n=t(du);return function(e){return e<0?n(e):e}}};var Pu={name:"cs_dfs",path:"sparse",factory:function(e,r,t){var n=t(Cu),i=t(zu),a=t(Bu);return function(e,r,t,o,s){var u,c,f,l=r._index,p=r._ptr,m=r._size[1],h=0;for(o[0]=e;h>=0;){e=o[h];var d=s?s[e]:e;n(p,e)||(i(p,e),o[m+h]=d<0?0:a(p[d]));var g=1;for(c=o[m+h],f=d<0?0:a(p[d+1]);c<f;c++)if(u=l[c],!n(p,u)){o[m+h]=c,o[++h]=u,g=0;break}g&&(h--,o[--t]=e)}return t}}};var Iu={name:"cs_reach",path:"sparse",factory:function(e,r,t){var n=t(Pu),i=t(Cu),a=t(zu);return function(e,r,t,o,s){var u,c,f,l=e._ptr,p=e._size,m=r._index,h=r._ptr,d=p[1],g=d;for(c=h[t],f=h[t+1],u=c;u<f;u++){var v=m[u];i(l,v)||(g=n(v,e,g,o,s))}for(u=g;u<d;u++)a(l,o[u]);return g}}};var Ru={name:"cs_spsolve",path:"sparse",factory:function(e,r,t){var n=t(cr),i=t(hr),a=t(sr),o=t(Iu);return function(e,r,t,s,u,c,f){var l,p,m,h,d=e._values,g=e._index,v=e._ptr,y=e._size[1],x=r._values,w=r._index,b=r._ptr,N=o(e,r,t,s,c);for(l=N;l<y;l++)u[s[l]]=0;for(p=b[t],m=b[t+1],l=p;l<m;l++)u[w[l]]=x[l];for(var M=N;M<y;M++){var E=s[M],A=c?c[E]:E;if(!(A<0))for(p=v[A],m=v[A+1],u[E]=n(u[E],d[f?p:m-1]),l=f?p+1:p,h=f?m:m-1;l<h;l++){var O=g[l];u[O]=a(u[O],i(d[l],u[E]))}}return N}}};var Uu={name:"cs_lu",path:"sparse",factory:function(e,r,t){var n=t(yr),i=t(cr),a=t(hr),o=t(Fe),s=t(Tu),u=t(Ru),c=e.SparseMatrix;return function(e,r,t){if(!e)return null;var f,l=e._size[1],p=100,m=100;r&&(f=r.q,p=r.lnz||p,m=r.unz||m);var h,d,g=[],v=[],y=[],x=new c({values:g,index:v,ptr:y,size:[l,l]}),w=[],b=[],N=[],M=new c({values:w,index:b,ptr:N,size:[l,l]}),E=[],A=[],O=[];for(h=0;h<l;h++)A[h]=0,E[h]=-1,y[h+1]=0;p=0,m=0;for(var S=0;S<l;S++){y[S]=p,N[S]=m;var _=f?f[S]:S,T=u(x,e,_,O,A,E,1),C=-1,z=-1;for(d=T;d<l;d++)if(E[h=O[d]]<0){var B=n(A[h]);o(B,z)&&(z=B,C=h)}else b[m]=E[h],w[m++]=A[h];if(-1==C||z<=0)return null;E[_]<0&&s(n(A[_]),a(z,t))&&(C=_);var P=A[C];for(b[m]=S,w[m++]=P,E[C]=S,v[p]=C,g[p++]=1,d=T;d<l;d++)E[h=O[d]]<0&&(v[p]=h,g[p++]=i(A[h],P)),A[h]=0}for(y[l]=p,N[l]=m,d=0;d<p;d++)v[d]=E[v[d]];return g.splice(p,g.length-p),v.splice(p,v.length-p),w.splice(m,w.length-m),b.splice(m,b.length-m),{L:x,U:M,pinv:E}}}},ku=Q.number.isInteger;var Du={name:"slu",factory:function(e,r,t,n){var i=t(Su),a=t(Uu);return n("slu",{"SparseMatrix, number, number":function(e,r,t){if(!ku(r)||r<0||r>3)throw new Error("Symbolic Ordering and Analysis order must be an integer number in the interval [0, 3]");if(t<0||t>1)throw new Error("Partial pivoting threshold must be a number from 0 to 1");var n=i(r,e,!1),o=a(e,n,t);return{L:o.L,U:o.U,p:o.pinv,q:n.q,toString:function(){return"L: "+this.L.toString()+"\nU: "+this.U.toString()+"\np: "+this.p.toString()+(this.q?"\nq: "+this.q.toString():"")+"\n"}}}})}},qu=Q.string,Lu=Q.array,Fu=Array.isArray;var ju={factory:function(e){var r=e.DenseMatrix;return function(t,n,i){var a=t.size();if(2!==a.length)throw new RangeError("Matrix must be two dimensional (size: "+qu.format(a)+")");var o,s,u,c=a[0];if(c!==a[1])throw new RangeError("Matrix must be square (size: "+qu.format(a)+")");if(e.isMatrix(n)){var f=n.size();if(1===f.length){if(f[0]!==c)throw new RangeError("Dimension mismatch. Matrix columns must match vector length.");for(o=[],u=n._data,s=0;s<c;s++)o[s]=[u[s]];return new r({data:o,size:[c,1],datatype:n._datatype})}if(2===f.length){if(f[0]!==c||1!==f[1])throw new RangeError("Dimension mismatch. Matrix columns must match vector length.");if(e.isDenseMatrix(n)){if(i){for(o=[],u=n._data,s=0;s<c;s++)o[s]=[u[s][0]];return new r({data:o,size:[c,1],datatype:n._datatype})}return n}for(o=[],s=0;s<c;s++)o[s]=[0];for(var l=n._values,p=n._index,m=n._ptr,h=m[1],d=m[0];d<h;d++)o[s=p[d]][0]=l[d];return new r({data:o,size:[c,1],datatype:n._datatype})}throw new RangeError("Dimension mismatch. Matrix columns must match vector length.")}if(Fu(n)){var g=Lu.size(n);if(1===g.length){if(g[0]!==c)throw new RangeError("Dimension mismatch. Matrix columns must match vector length.");for(o=[],s=0;s<c;s++)o[s]=[n[s]];return new r({data:o,size:[c,1]})}if(2===g.length){if(g[0]!==c||1!==g[1])throw new RangeError("Dimension mismatch. Matrix columns must match vector length.");for(o=[],s=0;s<c;s++)o[s]=[n[s][0]];return new r({data:o,size:[c,1]})}throw new RangeError("Dimension mismatch. Matrix columns must match vector length.")}}}};var Hu={name:"lsolve",factory:function(e,r,t,n){var i=t(Ee),a=t(cr),o=t(ur),s=t(sr),u=t(me),c=t(ju),f=e.DenseMatrix,l=n("lsolve",{"SparseMatrix, Array | Matrix":function(e,r){return m(e,r)},"DenseMatrix, Array | Matrix":function(e,r){return p(e,r)},"Array, Array | Matrix":function(e,r){var t=i(e);return p(t,r).valueOf()}}),p=function(e,r){for(var t=(r=c(e,r,!0))._data,n=e._size[0],i=e._size[1],l=[],p=e._data,m=0;m<i;m++){var h,d=t[m][0]||0;if(u(d,0))h=0;else{var g=p[m][m];if(u(g,0))throw new Error("Linear system cannot be solved since matrix is singular");h=a(d,g);for(var v=m+1;v<n;v++)t[v]=[s(t[v][0]||0,o(h,p[v][m]))]}l[m]=[h]}return new f({data:l,size:[n,1]})},m=function(e,r){for(var t,n,i=(r=c(e,r,!0))._data,l=e._size[0],p=e._size[1],m=e._values,h=e._index,d=e._ptr,g=[],v=0;v<p;v++){var y=i[v][0]||0;if(u(y,0))g[v]=[0];else{var x=0,w=[],b=[],N=d[v+1];for(n=d[v];n<N;n++)(t=h[n])===v?x=m[n]:t>v&&(w.push(m[n]),b.push(t));if(u(x,0))throw new Error("Linear system cannot be solved since matrix is singular");var M=a(y,x);for(n=0,N=b.length;n<N;n++)i[t=b[n]]=[s(i[t][0]||0,o(M,w[n]))];g[v]=[M]}}return new f({data:g,size:[l,1]})};return l}};var $u={name:"cs_ipvec",path:"sparse",factory:function(){return function(e,r,t){t=r.length;var n,i=[];if(e)for(n=0;n<t;n++)i[e[n]]=r[n];else for(n=0;n<t;n++)i[n]=r[n];return i}}};var Gu={name:"usolve",factory:function(e,r,t,n){var i=t(Ee),a=t(cr),o=t(ur),s=t(sr),u=t(me),c=t(ju),f=e.DenseMatrix,l=n("usolve",{"SparseMatrix, Array | Matrix":function(e,r){return m(e,r)},"DenseMatrix, Array | Matrix":function(e,r){return p(e,r)},"Array, Array | Matrix":function(e,r){var t=i(e);return p(t,r).valueOf()}}),p=function(e,r){for(var t=(r=c(e,r,!0))._data,n=e._size[0],i=e._size[1],l=[],p=e._data,m=i-1;m>=0;m--){var h,d=t[m][0]||0;if(u(d,0))h=0;else{var g=p[m][m];if(u(g,0))throw new Error("Linear system cannot be solved since matrix is singular");h=a(d,g);for(var v=m-1;v>=0;v--)t[v]=[s(t[v][0]||0,o(h,p[v][m]))]}l[m]=[h]}return new f({data:l,size:[n,1]})},m=function(e,r){for(var t,n,i=(r=c(e,r,!0))._data,l=e._size[0],p=e._size[1],m=e._values,h=e._index,d=e._ptr,g=[],v=p-1;v>=0;v--){var y=i[v][0]||0;if(u(y,0))g[v]=[0];else{var x=0,w=[],b=[],N=d[v],M=d[v+1];for(n=M-1;n>=N;n--)(t=h[n])===v?x=m[n]:t<v&&(w.push(m[n]),b.push(t));if(u(x,0))throw new Error("Linear system cannot be solved since matrix is singular");var E=a(y,x);for(n=0,M=b.length;n<M;n++)i[t=b[n]]=[s(i[t][0],o(E,w[n]))];g[v]=[E]}}return new f({data:g,size:[l,1]})};return l}},Vu=Array.isArray;var Zu=[nu,tu,iu,pu,hu,Du,Hu,{name:"lusolve",factory:function(e,r,t,n){var i=t(Ee),a=t(hu),o=t(Du),s=t($u),u=t(ju),c=t(Gu),f=t(Hu),l=n("lusolve",{"Array, Array | Matrix":function(e,r){e=i(e);var t=a(e);return m(t.L,t.U,t.p,null,r).valueOf()},"DenseMatrix, Array | Matrix":function(e,r){var t=a(e);return m(t.L,t.U,t.p,null,r)},"SparseMatrix, Array | Matrix":function(e,r){var t=a(e);return m(t.L,t.U,t.p,null,r)},"SparseMatrix, Array | Matrix, number, number":function(e,r,t,n){var i=o(e,t,n);return m(i.L,i.U,i.p,i.q,r)},"Object, Array | Matrix":function(e,r){return m(e.L,e.U,e.p,e.q,r)}}),p=function(r){if(e.isMatrix(r))return r;if(Vu(r))return i(r);throw new TypeError("Invalid Matrix LU decomposition")},m=function(e,r,t,n,i){e=p(e),r=p(r),i=u(e,i,!1),t&&(i._data=s(t,i._data));var a=f(e,i),o=c(r,a);return n&&(o._data=s(n,o._data)),o};return l}},Gu];var Wu={name:"isNegative",factory:function(e,r,t,n){var i=n("isNegative",{number:function(e){return e<0},BigNumber:function(e){return e.isNeg()&&!e.isZero()&&!e.isNaN()},Fraction:function(e){return e.s<0},Unit:function(e){return i(e.value)},"Array | Matrix":function(e){return A(e,i)}});return i}};var Ju=Math.cbrt||function(e){if(0===e)return e;var r,t=e<0;return t&&(e=-e),r=isFinite(e)?(e/((r=Math.exp(Math.log(e)/3))*r)+2*r)/3:e,t?-r:r},Yu={name:"cbrt",factory:function(e,r,t,n){var i=t(ir),a=t(Wu),o=t(Ee),s=n("cbrt",{number:Ju,Complex:u,"Complex, boolean":u,BigNumber:function(e){return e.cbrt()},Unit:function(r){if(r.value&&e.isComplex(r.value)){var t=r.clone();return t.value=1,(t=t.pow(1/3)).value=u(r.value),t}var n,o=a(r.value);o&&(r.value=i(r.value)),n=e.isBigNumber(r.value)?new e.BigNumber(1).div(3):e.isFraction(r.value)?new e.Fraction(1,3):1/3;var t=r.pow(n);return o&&(t.value=i(t.value)),t},"Array | Matrix":function(e){return A(e,s,!0)}});function u(t,n){var i=t.arg()/3,a=t.abs(),s=new e.Complex(Ju(a),0).mul(new e.Complex(0,i).exp());if(n){var u=[s,new e.Complex(Ju(a),0).mul(new e.Complex(0,i+2*Math.PI/3).exp()),new e.Complex(Ju(a),0).mul(new e.Complex(0,i-2*Math.PI/3).exp())];return"Array"===r.matrix?u:o(u)}return s}return s.toTex={1:"\\sqrt[3]{${args[0]}}"},s}};var Xu={name:"ceil",factory:function(e,r,t,n){var i=n("ceil",{number:Math.ceil,Complex:function(e){return e.ceil()},BigNumber:function(e){return e.ceil()},Fraction:function(e){return e.ceil()},"Array | Matrix":function(e){return A(e,i,!0)}});return i.toTex={1:"\\left\\lceil${args[0]}\\right\\rceil"},i}};var Qu={name:"cube",factory:function(e,r,t,n){var i=n("cube",{number:function(e){return e*e*e},Complex:function(e){return e.mul(e).mul(e)},BigNumber:function(e){return e.times(e).times(e)},Fraction:function(e){return e.pow(3)},"Array | Matrix":function(e){return A(e,i,!0)},Unit:function(e){return e.pow(3)}});return i.toTex={1:"\\left(${args[0]}\\right)^3"},i}};var Ku={name:"algorithm02",factory:function(e,r,t,n){var i=t(me),a=e.SparseMatrix;return function(e,r,t,o){var s=e._data,u=e._size,c=e._datatype,f=r._values,l=r._index,p=r._ptr,m=r._size,h=r._datatype;if(u.length!==m.length)throw new V(u.length,m.length);if(u[0]!==m[0]||u[1]!==m[1])throw new RangeError("Dimension mismatch. Matrix A ("+u+") must match Matrix B ("+m+")");if(!f)throw new Error("Cannot perform operation on Dense Matrix and Pattern Sparse Matrix");var d,g=u[0],v=u[1],y=i,x=0,w=t;"string"==typeof c&&c===h&&(d=c,y=n.find(i,[d,d]),x=n.convert(0,d),w=n.find(t,[d,d]));for(var b=[],N=[],M=[],E=0;E<v;E++){M[E]=N.length;for(var A=p[E],O=p[E+1],S=A;S<O;S++){var _=l[S],T=o?w(f[S],s[_][E]):w(s[_][E],f[S]);y(T,x)||(N.push(_),b.push(T))}}return M[v]=N.length,new a({values:b,index:N,ptr:M,size:[g,v],datatype:d})}}};var ec={name:"dotDivide",factory:function(e,r,t,n){var i=t(Ee),a=t(cr),o=L,s=t(Ku),u=t(Re),c=t(Ue),f=t(pr),l=t(ke),p=t(Te),m=t(ze),h=n("dotDivide",{"any, any":a,"SparseMatrix, SparseMatrix":function(e,r){return c(e,r,a,!1)},"SparseMatrix, DenseMatrix":function(e,r){return s(r,e,a,!0)},"DenseMatrix, SparseMatrix":function(e,r){return u(e,r,a,!1)},"DenseMatrix, DenseMatrix":function(e,r){return p(e,r,a)},"Array, Array":function(e,r){return h(i(e),i(r)).valueOf()},"Array, Matrix":function(e,r){return h(i(e),r)},"Matrix, Array":function(e,r){return h(e,i(r))},"SparseMatrix, any":function(e,r){return f(e,r,a,!1)},"DenseMatrix, any":function(e,r){return m(e,r,a,!1)},"any, SparseMatrix":function(e,r){return l(r,e,a,!0)},"any, DenseMatrix":function(e,r){return m(r,e,a,!0)},"Array, any":function(e,r){return m(i(e),r,a,!1).valueOf()},"any, Array":function(e,r){return m(i(r),e,a,!0).valueOf()}});return h.toTex={2:"\\left(${args[0]}"+o.operators.dotDivide+"${args[1]}\\right)"},h}};var rc={name:"algorithm09",factory:function(e,r,t,n){var i=t(me),a=e.SparseMatrix;return function(e,r,t){var o=e._values,s=e._index,u=e._ptr,c=e._size,f=e._datatype,l=r._values,p=r._index,m=r._ptr,h=r._size,d=r._datatype;if(c.length!==h.length)throw new V(c.length,h.length);if(c[0]!==h[0]||c[1]!==h[1])throw new RangeError("Dimension mismatch. Matrix A ("+c+") must match Matrix B ("+h+")");var g,v=c[0],y=c[1],x=i,w=0,b=t;"string"==typeof f&&f===d&&(g=f,x=n.find(i,[g,g]),w=n.convert(0,g),b=n.find(t,[g,g]));var N,M,E,A,O,S=o&&l?[]:void 0,_=[],T=[],C=new a({values:S,index:_,ptr:T,size:[v,y],datatype:g}),z=S?[]:void 0,B=[];for(M=0;M<y;M++){T[M]=_.length;var P=M+1;if(z)for(A=m[M],O=m[M+1],E=A;E<O;E++)B[N=p[E]]=P,z[N]=l[E];for(A=u[M],O=u[M+1],E=A;E<O;E++)if(N=s[E],z){var I=B[N]===P?z[N]:w,R=b(o[E],I);x(R,w)||(_.push(N),S.push(R))}else _.push(N)}return T[y]=_.length,C}}};var tc={name:"dotMultiply",factory:function(e,r,t,n){var i=t(Ee),a=t(ur),o=L,s=t(Ku),u=t(rc),c=t(pr),f=t(Te),l=t(ze),p=n("dotMultiply",{"any, any":a,"SparseMatrix, SparseMatrix":function(e,r){return u(e,r,a,!1)},"SparseMatrix, DenseMatrix":function(e,r){return s(r,e,a,!0)},"DenseMatrix, SparseMatrix":function(e,r){return s(e,r,a,!1)},"DenseMatrix, DenseMatrix":function(e,r){return f(e,r,a)},"Array, Array":function(e,r){return p(i(e),i(r)).valueOf()},"Array, Matrix":function(e,r){return p(i(e),r)},"Matrix, Array":function(e,r){return p(e,i(r))},"SparseMatrix, any":function(e,r){return c(e,r,a,!1)},"DenseMatrix, any":function(e,r){return l(e,r,a,!1)},"any, SparseMatrix":function(e,r){return c(r,e,a,!0)},"any, DenseMatrix":function(e,r){return l(r,e,a,!0)},"Array, any":function(e,r){return l(i(e),r,a,!1).valueOf()},"any, Array":function(e,r){return l(i(r),e,a,!0).valueOf()}});return p.toTex={2:"\\left(${args[0]}"+o.operators.dotMultiply+"${args[1]}\\right)"},p}};var nc={name:"dotPow",factory:function(e,r,t,n){var i=t(Ee),a=t(vr),o=L,s=t(Re),u=t(Ue),c=t(pr),f=t(ke),l=t(Te),p=t(ze),m=n("dotPow",{"any, any":a,"SparseMatrix, SparseMatrix":function(e,r){return u(e,r,a,!1)},"SparseMatrix, DenseMatrix":function(e,r){return s(r,e,a,!0)},"DenseMatrix, SparseMatrix":function(e,r){return s(e,r,a,!1)},"DenseMatrix, DenseMatrix":function(e,r){return l(e,r,a)},"Array, Array":function(e,r){return m(i(e),i(r)).valueOf()},"Array, Matrix":function(e,r){return m(i(e),r)},"Matrix, Array":function(e,r){return m(e,i(r))},"SparseMatrix, any":function(e,r){return c(e,r,m,!1)},"DenseMatrix, any":function(e,r){return p(e,r,m,!1)},"any, SparseMatrix":function(e,r){return f(r,e,m,!0)},"any, DenseMatrix":function(e,r){return p(r,e,m,!0)},"Array, any":function(e,r){return p(i(e),r,m,!1).valueOf()},"any, Array":function(e,r){return p(i(r),e,m,!0).valueOf()}});return m.toTex={2:"\\left(${args[0]}"+o.operators.dotPow+"${args[1]}\\right)"},m}};var ic={name:"exp",factory:function(e,r,t,n){var i=n("exp",{number:Math.exp,Complex:function(e){return e.exp()},BigNumber:function(e){return e.exp()},"Array | Matrix":function(e){return A(e,i)}});return i.toTex={1:"\\exp\\left(${args[0]}\\right)"},i}};var ac={name:"expm1",factory:function(e,r,t,n){var i=L,a=n("expm1",{number:Math.expm1||function(e){return e>=2e-4||e<=-2e-4?Math.exp(e)-1:e+e*e/2+e*e*e/6},Complex:function(r){var t=Math.exp(r.re);return new e.Complex(t*Math.cos(r.im)-1,t*Math.sin(r.im))},BigNumber:function(e){return e.exp().minus(1)},"Array | Matrix":function(e){return A(e,a)}});return a.toTex="\\left(e"+i.operators.pow+"{${args[0]}}-1\\right)",a}};var oc={name:"floor",factory:function(e,r,t,n){var i=n("floor",{number:Math.floor,Complex:function(e){return e.floor()},BigNumber:function(e){return e.floor()},Fraction:function(e){return e.floor()},"Array | Matrix":function(e){return A(e,i,!0)}});return i.toTex={1:"\\left\\lfloor${args[0]}\\right\\rfloor"},i}},sc=o.isInteger;function uc(e,r){if(!sc(e)||!sc(r))throw new Error("Parameters in function gcd must be integer numbers");for(var t;0!=r;)t=e%r,e=r,r=t;return e<0?-e:e}var cc={name:"gcd",factory:function(e,r,t,n){var i=t(Ee),a=t(Oe),o=t(Se),s=t(_e),u=t(Te),c=t(ze),f=n("gcd",{"number, number":uc,"BigNumber, BigNumber":function(r,t){if(!r.isInt()||!t.isInt())throw new Error("Parameters in function gcd must be integer numbers");for(var n=new e.BigNumber(0);!t.isZero();){var i=r.mod(t);r=t,t=i}return r.lt(n)?r.neg():r},"Fraction, Fraction":function(e,r){return e.gcd(r)},"SparseMatrix, SparseMatrix":function(e,r){return o(e,r,f)},"SparseMatrix, DenseMatrix":function(e,r){return a(r,e,f,!0)},"DenseMatrix, SparseMatrix":function(e,r){return a(e,r,f,!1)},"DenseMatrix, DenseMatrix":function(e,r){return u(e,r,f)},"Array, Array":function(e,r){return f(i(e),i(r)).valueOf()},"Array, Matrix":function(e,r){return f(i(e),r)},"Matrix, Array":function(e,r){return f(e,i(r))},"SparseMatrix, number | BigNumber":function(e,r){return s(e,r,f,!1)},"DenseMatrix, number | BigNumber":function(e,r){return c(e,r,f,!1)},"number | BigNumber, SparseMatrix":function(e,r){return s(r,e,f,!0)},"number | BigNumber, DenseMatrix":function(e,r){return c(r,e,f,!0)},"Array, number | BigNumber":function(e,r){return c(i(e),r,f,!1).valueOf()},"number | BigNumber, Array":function(e,r){return c(i(r),e,f,!0).valueOf()},"Array | Matrix | number | BigNumber, Array | Matrix | number | BigNumber, ...Array | Matrix | number | BigNumber":function(e,r,t){for(var n=f(e,r),i=0;i<t.length;i++)n=f(n,t[i]);return n}});return f.toTex="\\gcd\\left(${args}\\right)",f}},fc=J.flatten;var lc={name:"hypot",factory:function(e,r,t,n){var i=t(yr),a=t(Ae),o=t(cr),s=t(ur),u=t(fu),c=t(qe),f=t(ou),l=n("hypot",{"... number | BigNumber":function(e){for(var r=0,t=0,n=0;n<e.length;n++){var l=i(e[n]);c(t,l)?(r=s(r,s(o(t,l),o(t,l))),r=a(r,1),t=l):r=a(r,f(l)?s(o(l,t),o(l,t)):l)}return s(t,u(r))},Array:function(e){return l.apply(l,fc(e))},Matrix:function(e){return l.apply(l,fc(e.toArray()))}});return l.toTex="\\hypot\\left(${args}\\right)",l}},pc=function(e,r,t,n,i,a,o,s,u,c,f){var l,p,m,h,d=e._values,g=e._index,v=e._ptr,y=o._index;if(n)for(p=v[r],m=v[r+1],l=p;l<m;l++)t[h=g[l]]!==a?(t[h]=a,y.push(h),c?(n[h]=u?s(d[l],f):s(f,d[l]),i[h]=a):n[h]=d[l]):(n[h]=u?s(d[l],n[h]):s(n[h],d[l]),i[h]=a);else for(p=v[r],m=v[r+1],l=p;l<m;l++)t[h=g[l]]!==a?(t[h]=a,y.push(h)):i[h]=a};var mc={name:"algorithm06",factory:function(e,r,t,n){var i=t(me),a=e.SparseMatrix;return function(e,r,t){var o=e._values,s=e._size,u=e._datatype,c=r._values,f=r._size,l=r._datatype;if(s.length!==f.length)throw new V(s.length,f.length);if(s[0]!==f[0]||s[1]!==f[1])throw new RangeError("Dimension mismatch. Matrix A ("+s+") must match Matrix B ("+f+")");var p,m=s[0],h=s[1],d=i,g=0,v=t;"string"==typeof u&&u===l&&(p=u,d=n.find(i,[p,p]),g=n.convert(0,p),v=n.find(t,[p,p]));for(var y=o&&c?[]:void 0,x=[],w=[],b=new a({values:y,index:x,ptr:w,size:[m,h],datatype:p}),N=y?[]:void 0,M=[],E=[],A=0;A<h;A++){w[A]=x.length;var O=A+1;if(pc(e,A,M,N,E,O,b,v),pc(r,A,M,N,E,O,b,v),N)for(var S=w[A];S<x.length;){var _=x[S];if(E[_]===O){var T=N[_];d(T,g)?x.splice(S,1):(y.push(T),S++)}else x.splice(S,1)}else for(var C=w[A];C<x.length;)E[x[C]]!==O?x.splice(C,1):C++}return w[h]=x.length,b}}},hc=o.isInteger;function dc(e,r){if(!hc(e)||!hc(r))throw new Error("Parameters in function lcm must be integer numbers");if(0==e||0==r)return 0;for(var t,n=e*r;0!=r;)r=e%(t=r),e=t;return Math.abs(n/e)}var gc={name:"lcm",factory:function(e,r,t,n){var i=t(Ee),a=t(Ku),o=t(mc),s=t(pr),u=t(Te),c=t(ze),f=n("lcm",{"number, number":dc,"BigNumber, BigNumber":function(r,t){if(!r.isInt()||!t.isInt())throw new Error("Parameters in function lcm must be integer numbers");if(r.isZero()||t.isZero())return new e.BigNumber(0);for(var n=r.times(t);!t.isZero();){var i=t;t=r.mod(i),r=i}return n.div(r).abs()},"Fraction, Fraction":function(e,r){return e.lcm(r)},"SparseMatrix, SparseMatrix":function(e,r){return o(e,r,f)},"SparseMatrix, DenseMatrix":function(e,r){return a(r,e,f,!0)},"DenseMatrix, SparseMatrix":function(e,r){return a(e,r,f,!1)},"DenseMatrix, DenseMatrix":function(e,r){return u(e,r,f)},"Array, Array":function(e,r){return f(i(e),i(r)).valueOf()},"Array, Matrix":function(e,r){return f(i(e),r)},"Matrix, Array":function(e,r){return f(e,i(r))},"SparseMatrix, number | BigNumber":function(e,r){return s(e,r,f,!1)},"DenseMatrix, number | BigNumber":function(e,r){return c(e,r,f,!1)},"number | BigNumber, SparseMatrix":function(e,r){return s(r,e,f,!0)},"number | BigNumber, DenseMatrix":function(e,r){return c(r,e,f,!0)},"Array, number | BigNumber":function(e,r){return c(i(e),r,f,!1).valueOf()},"number | BigNumber, Array":function(e,r){return c(i(r),e,f,!0).valueOf()},"Array | Matrix | number | BigNumber, Array | Matrix | number | BigNumber, ...Array | Matrix | number | BigNumber":function(e,r,t){for(var n=f(e,r),i=0;i<t.length;i++)n=f(n,t[i]);return n}});return f.toTex=void 0,f}};var vc={name:"log",factory:function(e,r,t,n){var i=t(cr),a=n("log",{number:function(t){return t>=0||r.predictable?Math.log(t):new e.Complex(t,0).log()},Complex:function(e){return e.log()},BigNumber:function(t){return!t.isNegative()||r.predictable?t.ln():new e.Complex(t.toNumber(),0).log()},"Array | Matrix":function(e){return A(e,a)},"any, any":function(e,r){return i(a(e),a(r))}});return a.toTex={1:"\\ln\\left(${args[0]}\\right)",2:"\\log_{${args[1]}}\\left(${args[0]}\\right)"},a}};var yc=Math.log10||function(e){return Math.log(e)/Math.LN10},xc={name:"log10",factory:function(e,r,t,n){var i=n("log10",{number:function(t){return t>=0||r.predictable?yc(t):new e.Complex(t,0).log().div(Math.LN10)},Complex:function(r){return new e.Complex(r).log().div(Math.LN10)},BigNumber:function(t){return!t.isNegative()||r.predictable?t.log():new e.Complex(t.toNumber(),0).log().div(Math.LN10)},"Array | Matrix":function(e){return A(e,i)}});return i.toTex={1:"\\log_{10}\\left(${args[0]}\\right)"},i}};var wc={name:"log1p",factory:function(e,r,t,n){var i=t(cr),a=t(vc),o=n("log1p",{number:function(t){return t>=-1||r.predictable?Math.log1p?Math.log1p(t):Math.log(t+1):s(new e.Complex(t,0))},Complex:s,BigNumber:function(t){var n=t.plus(1);return!n.isNegative()||r.predictable?n.ln():s(new e.Complex(t.toNumber(),0))},"Array | Matrix":function(e){return A(e,o)},"any, any":function(e,r){return i(o(e),a(r))}});function s(r){var t=r.re+1;return new e.Complex(Math.log(Math.sqrt(t*t+r.im*r.im)),Math.atan2(r.im,t))}return o.toTex={1:"\\ln\\left(${args[0]}+1\\right)",2:"\\log_{${args[1]}}\\left(${args[0]}+1\\right)"},o}};var bc={name:"log2",factory:function(e,r,t,n){var i=n("log2",{number:function(t){return t>=0||r.predictable?Math.log2?Math.log2(t):Math.log(t)/Math.LN2:a(new e.Complex(t,0))},Complex:a,BigNumber:function(t){return!t.isNegative()||r.predictable?t.log(2):a(new e.Complex(t.toNumber(),0))},"Array | Matrix":function(e){return A(e,i)}});function a(r){var t=Math.sqrt(r.re*r.re+r.im*r.im);return new e.Complex(Math.log2?Math.log2(t):Math.log(t)/Math.LN2,Math.atan2(r.im,r.re)/Math.LN2)}return i.toTex="\\log_{2}\\left(${args[0]}\\right)",i}};var Nc={name:"mod",factory:function(e,r,t,n){var i=t(Ee),a=L,o=t(Ku),s=t(Re),u=t(ar),c=t(pr),f=t(ke),l=t(Te),p=t(ze),m=n("mod",{"number, number":function(e,r){if(r>0)return e-r*Math.floor(e/r);if(0===r)return e;throw new Error("Cannot calculate mod for a negative divisor")},"BigNumber, BigNumber":function(e,r){return r.isZero()?e:e.mod(r)},"Fraction, Fraction":function(e,r){return e.mod(r)},"SparseMatrix, SparseMatrix":function(e,r){return u(e,r,m,!1)},"SparseMatrix, DenseMatrix":function(e,r){return o(r,e,m,!0)},"DenseMatrix, SparseMatrix":function(e,r){return s(e,r,m,!1)},"DenseMatrix, DenseMatrix":function(e,r){return l(e,r,m)},"Array, Array":function(e,r){return m(i(e),i(r)).valueOf()},"Array, Matrix":function(e,r){return m(i(e),r)},"Matrix, Array":function(e,r){return m(e,i(r))},"SparseMatrix, any":function(e,r){return c(e,r,m,!1)},"DenseMatrix, any":function(e,r){return p(e,r,m,!1)},"any, SparseMatrix":function(e,r){return f(r,e,m,!0)},"any, DenseMatrix":function(e,r){return p(r,e,m,!0)},"Array, any":function(e,r){return p(i(e),r,m,!1).valueOf()},"any, Array":function(e,r){return p(i(r),e,m,!0).valueOf()}});return m.toTex={2:"\\left(${args[0]}"+a.operators.mod+"${args[1]}\\right)"},m}},Mc=i.clone,Ec=T.format;var Ac={name:"trace",factory:function(e,r,t,n){var i=t(Ee),a=t(Pe),o=n("trace",{Array:function(e){return s(i(e))},SparseMatrix:function(e){var r=e._values,t=e._index,n=e._ptr,i=e._size,o=i[0],s=i[1];if(o===s){var u=0;if(r.length>0)for(var c=0;c<s;c++)for(var f=n[c],l=n[c+1],p=f;p<l;p++){var m=t[p];if(m===c){u=a(u,r[p]);break}if(m>c)break}return u}throw new RangeError("Matrix must be square (size: "+Ec(i)+")")},DenseMatrix:s,any:Mc});function s(e){var r=e._size,t=e._data;switch(r.length){case 1:if(1===r[0])return Mc(t[0]);throw new RangeError("Matrix must be square (size: "+Ec(r)+")");case 2:var n=r[0];if(n===r[1]){for(var i=0,o=0;o<n;o++)i=a(i,t[o][o]);return i}throw new RangeError("Matrix must be square (size: "+Ec(r)+")");default:throw new RangeError("Matrix must be two dimensional (size: "+Ec(r)+")")}}return o.toTex={1:"\\mathrm{tr}\\left(${args[0]}\\right)"},o}};var Oc={name:"norm",factory:function(e,r,t,n){var i=t(yr),a=t(Pe),o=t(vr),s=t(lu),u=t(fu),c=t(hr),f=t(me),l=t(Fe),p=t(qe),m=t(Ee),h=(t(Ac),t(wu),n("norm",{number:Math.abs,Complex:function(e){return e.abs()},BigNumber:function(e){return e.abs()},boolean:function(e){return Math.abs(e)},Array:function(e){return d(m(e),2)},Matrix:function(e){return d(e,2)},"number | Complex | BigNumber | boolean, number | BigNumber | string":function(e){return h(e)},"Array, number | BigNumber | string":function(e,r){return d(m(e),r)},"Matrix, number | BigNumber | string":function(e,r){return d(e,r)}}));function d(e,r){var t=e.size();if(1==t.length){if(r===Number.POSITIVE_INFINITY||"inf"===r){var n=0;return e.forEach(function(e){var r=i(e);l(r,n)&&(n=r)},!0),n}var m;if(r===Number.NEGATIVE_INFINITY||"-inf"===r)return e.forEach(function(e){var r=i(e);m&&!p(r,m)||(m=r)},!0),m||0;if("fro"===r)return d(e,2);if("number"==typeof r&&!isNaN(r)){if(!f(r,0)){var h=0;return e.forEach(function(e){h=a(o(i(e),r),h)},!0),o(h,1/r)}return Number.POSITIVE_INFINITY}throw new Error("Unsupported parameter value")}if(2==t.length){if(1===r){var g=[],v=0;return e.forEach(function(e,r){var t=r[1],n=a(g[t]||0,i(e));l(n,v)&&(v=n),g[t]=n},!0),v}if(r===Number.POSITIVE_INFINITY||"inf"===r){var y=[],x=0;return e.forEach(function(e,r){var t=r[0],n=a(y[t]||0,i(e));l(n,x)&&(x=n),y[t]=n},!0),x}if("fro"===r){var w=0;return e.forEach(function(e,r){w=a(w,c(e,s(e)))}),u(w)}if(2===r)throw new Error("Unsupported parameter value, missing implementation of matrix singular value decomposition");throw new Error("Unsupported parameter value")}}return h.toTex={1:"\\left\\|${args[0]}\\right\\|",2:void 0},h}};function Sc(e,r){var t=r<0;if(t&&(r=-r),0===r)throw new Error("Root must be non-zero");if(e<0&&Math.abs(r)%2!=1)throw new Error("Root must be odd when a is negative.");if(0==e)return t?1/0:0;if(!isFinite(e))return t?0:e;var n=Math.pow(Math.abs(e),1/r);return n=e<0?-n:n,t?1/n:n}function _c(e,r){if(r<0)throw new Error("Root must be greater than zero");if(0===r)throw new Error("Root must be non-zero");if(r%1!=0)throw new Error("Root must be an integer");for(var t=e.arg(),n=e.abs(),i=[],a=Math.pow(n,1/r),o=0;o<r;o++)i.push({r:a,phi:(t+2*Math.PI*o)/r});return i}var Tc={name:"nthRoot",factory:function(e,r,t,n){var i=t(Ee),a=t(Oe),o=t(Ku),s=t(mc),u=t(pr),c=t(Te),f=t(ze),l=n("nthRoot",{number:function(e){return Sc(e,2)},"number, number":Sc,BigNumber:function(r){return p(r,new e.BigNumber(2))},Complex:function(e){return _c(e,2)},"Complex, number":_c,"BigNumber, BigNumber":p,"Array | Matrix":function(e){return l(e,2)},"SparseMatrix, SparseMatrix":function(e,r){if(1===r.density())return s(e,r,l);throw new Error("Root must be non-zero")},"SparseMatrix, DenseMatrix":function(e,r){return o(r,e,l,!0)},"DenseMatrix, SparseMatrix":function(e,r){if(1===r.density())return a(e,r,l,!1);throw new Error("Root must be non-zero")},"DenseMatrix, DenseMatrix":function(e,r){return c(e,r,l)},"Array, Array":function(e,r){return l(i(e),i(r)).valueOf()},"Array, Matrix":function(e,r){return l(i(e),r)},"Matrix, Array":function(e,r){return l(e,i(r))},"SparseMatrix, number | BigNumber":function(e,r){return u(e,r,l,!1)},"DenseMatrix, number | BigNumber":function(e,r){return f(e,r,l,!1)},"number | BigNumber, SparseMatrix":function(e,r){if(1===r.density())return u(r,e,l,!0);throw new Error("Root must be non-zero")},"number | BigNumber, DenseMatrix":function(e,r){return f(r,e,l,!0)},"Array, number | BigNumber":function(e,r){return l(i(e),r).valueOf()},"number | BigNumber, Array":function(e,r){return l(e,i(r)).valueOf()}});return l.toTex={2:"\\sqrt[${args[1]}]{${args[0]}}"},l;function p(r,t){var n=e.BigNumber.precision,i=e.BigNumber.clone({precision:n+2}),a=new e.BigNumber(0),o=new i(1),s=t.isNegative();if(s&&(t=t.neg()),t.isZero())throw new Error("Root must be non-zero");if(r.isNegative()&&!t.abs().mod(2).equals(1))throw new Error("Root must be odd when a is negative.");if(r.isZero())return s?new i(1/0):0;if(!r.isFinite())return s?a:r;var u=r.abs().pow(o.div(t));return u=r.isNeg()?u.neg():u,new e.BigNumber((s?o.div(u):u).toPrecision(n))}}};var Cc={name:"square",factory:function(e,r,t,n){var i=n("square",{number:function(e){return e*e},Complex:function(e){return e.mul(e)},BigNumber:function(e){return e.times(e)},Fraction:function(e){return e.mul(e)},"Array | Matrix":function(e){return A(e,i,!0)},Unit:function(e){return e.pow(2)}});return i.toTex={1:"\\left(${args[0]}\\right)^2"},i}};var zc={name:"unaryPlus",factory:function(e,r,t,n){var i=L,a=n("unaryPlus",{number:function(e){return e},Complex:function(e){return e},BigNumber:function(e){return e},Fraction:function(e){return e},Unit:function(e){return e.clone()},"Array | Matrix":function(e){return A(e,a,!0)},"boolean | string":function(t){return"BigNumber"==r.number?new e.BigNumber(+t):+t}});return a.toTex={1:i.operators.unaryPlus+"\\left(${args[0]}\\right)"},a}},Bc=o.isInteger;var Pc=[yr,Pe,Ae,Yu,Xu,Qu,js,ec,tc,nc,ic,ac,xr,oc,cc,lc,gc,vc,xc,wc,bc,Nc,hr,Oc,Tc,vr,Or,cu,fu,Cc,sr,ir,zc,{name:"xgcd",factory:function(e,r,t,n){var i=t(Ee),a=n("xgcd",{"number, number":function(e,t){var n,a,o,s,u=0,c=1,f=1,l=0;if(!Bc(e)||!Bc(t))throw new Error("Parameters in function xgcd must be integer numbers");for(;t;)a=Math.floor(e/t),o=e-a*t,n=u,u=c-a*u,c=n,n=f,f=l-a*f,l=n,e=t,t=o;return s=e<0?[-e,-c,-l]:[e,e?c:0,l],"Array"===r.matrix?s:i(s)},"BigNumber, BigNumber":function(t,n){var a,o,s,u,c=new e.BigNumber(0),f=new e.BigNumber(1),l=c,p=f,m=f,h=c;if(!t.isInt()||!n.isInt())throw new Error("Parameters in function xgcd must be integer numbers");for(;!n.isZero();)o=t.div(n).floor(),s=t.mod(n),a=l,l=p.minus(o.times(l)),p=a,a=m,m=h.minus(o.times(m)),h=a,t=n,n=s;return u=t.lt(c)?[t.neg(),p.neg(),h.neg()]:[t,t.isZero()?0:p,h],"Array"===r.matrix?u:i(u)}});return a.toTex=void 0,a}}],Ic=function(e){if(e.isFinite()&&!e.isInteger())throw new Error("Integer expected in function bitNot");var r=e.constructor,t=r.precision;return r.config({precision:1e9}),(e=e.plus(new r(1))).s=-e.s||null,r.config({precision:t}),e},Rc=function(e,r,t){var n,i,a,o,s,u=e.constructor,c=+(e.s<0),f=+(r.s<0);if(c){n=Uc(Ic(e));for(var l=0;l<n.length;++l)n[l]^=1}else n=Uc(e);if(f){i=Uc(Ic(r));for(l=0;l<i.length;++l)i[l]^=1}else i=Uc(r);n.length<=i.length?(a=n,o=i,s=c):(a=i,o=n,s=f);var p=a.length,m=o.length,h=1^t(c,f),d=new u(1^h),g=new u(1),v=new u(2),y=u.precision;for(u.config({precision:1e9});p>0;)t(a[--p],o[--m])==h&&(d=d.plus(g)),g=g.times(v);for(;m>0;)t(s,o[--m])==h&&(d=d.plus(g)),g=g.times(v);return u.config({precision:y}),0==h&&(d.s=-d.s),d};function Uc(e){for(var r=e.d,t=r[0]+"",n=1;n<r.length;++n){for(var i=r[n]+"",a=7-i.length;a--;)i="0"+i;t+=i}for(l=t.length-1;"0"==t.charAt(l);--l);var o=e.e,s=t.slice(0,l+1||1),u=s.length;if(o>0)if(++o>u)for(o-=u;o--;s+="0");else o<u&&(s=s.slice(0,o)+"."+s.slice(o));var c=[0];for(n=0;n<s.length;){for(var f=c.length;f--;c[f]*=10);c[0]+=s.charAt(n++)<<0;for(var l=0;l<c.length;++l)c[l]>1&&(null==c[l+1]&&(c[l+1]=0),c[l+1]+=c[l]>>1,c[l]&=1)}return c.reverse()}var kc=function(e,r){if(e.isFinite()&&!e.isInteger()||r.isFinite()&&!r.isInteger())throw new Error("Integers expected in function bitAnd");var t=e.constructor;if(e.isNaN()||r.isNaN())return new t(NaN);if(e.isZero()||r.eq(-1)||e.eq(r))return e;if(r.isZero()||e.eq(-1))return r;if(!e.isFinite()||!r.isFinite()){if(!e.isFinite()&&!r.isFinite())return e.isNegative()==r.isNegative()?e:new t(0);if(!e.isFinite())return r.isNegative()?e:e.isNegative()?new t(0):r;if(!r.isFinite())return e.isNegative()?r:r.isNegative()?new t(0):e}return Rc(e,r,function(e,r){return e&r})},Dc=o.isInteger;var qc={name:"bitAnd",factory:function(e,r,t,n){var i=L,a=t(Ee),o=t(Ku),s=t(mc),u=t(pr),c=t(Te),f=t(ze),l=n("bitAnd",{"number, number":function(e,r){if(!Dc(e)||!Dc(r))throw new Error("Integers expected in function bitAnd");return e&r},"BigNumber, BigNumber":kc,"SparseMatrix, SparseMatrix":function(e,r){return s(e,r,l,!1)},"SparseMatrix, DenseMatrix":function(e,r){return o(r,e,l,!0)},"DenseMatrix, SparseMatrix":function(e,r){return o(e,r,l,!1)},"DenseMatrix, DenseMatrix":function(e,r){return c(e,r,l)},"Array, Array":function(e,r){return l(a(e),a(r)).valueOf()},"Array, Matrix":function(e,r){return l(a(e),r)},"Matrix, Array":function(e,r){return l(e,a(r))},"SparseMatrix, any":function(e,r){return u(e,r,l,!1)},"DenseMatrix, any":function(e,r){return f(e,r,l,!1)},"any, SparseMatrix":function(e,r){return u(r,e,l,!0)},"any, DenseMatrix":function(e,r){return f(r,e,l,!0)},"Array, any":function(e,r){return f(a(e),r,l,!1).valueOf()},"any, Array":function(e,r){return f(a(r),e,l,!0).valueOf()}});return l.toTex={2:"\\left(${args[0]}"+i.operators.bitAnd+"${args[1]}\\right)"},l}},Lc=o.isInteger;var Fc={name:"bitNot",factory:function(e,r,t,n){var i=L,a=n("bitNot",{number:function(e){if(!Lc(e))throw new Error("Integer expected in function bitNot");return~e},BigNumber:Ic,"Array | Matrix":function(e){return A(e,a)}});return a.toTex={1:i.operators.bitNot+"\\left(${args[0]}\\right)"},a}},jc=function(e,r){if(e.isFinite()&&!e.isInteger()||r.isFinite()&&!r.isInteger())throw new Error("Integers expected in function bitOr");var t=e.constructor;if(e.isNaN()||r.isNaN())return new t(NaN);var n=new t(-1);return e.isZero()||r.eq(n)||e.eq(r)?r:r.isZero()||e.eq(n)?e:e.isFinite()&&r.isFinite()?Rc(e,r,function(e,r){return e|r}):!e.isFinite()&&!e.isNegative()&&r.isNegative()||e.isNegative()&&!r.isNegative()&&!r.isFinite()?n:e.isNegative()&&r.isNegative()?e.isFinite()?e:r:e.isFinite()?r:e},Hc=o.isInteger;var $c={name:"bitOr",factory:function(e,r,t,n){var i=L,a=t(Ee),o=t(Oe),s=t(Se),u=t(_e),c=t(Te),f=t(ze),l=n("bitOr",{"number, number":function(e,r){if(!Hc(e)||!Hc(r))throw new Error("Integers expected in function bitOr");return e|r},"BigNumber, BigNumber":jc,"SparseMatrix, SparseMatrix":function(e,r){return s(e,r,l)},"SparseMatrix, DenseMatrix":function(e,r){return o(r,e,l,!0)},"DenseMatrix, SparseMatrix":function(e,r){return o(e,r,l,!1)},"DenseMatrix, DenseMatrix":function(e,r){return c(e,r,l)},"Array, Array":function(e,r){return l(a(e),a(r)).valueOf()},"Array, Matrix":function(e,r){return l(a(e),r)},"Matrix, Array":function(e,r){return l(e,a(r))},"SparseMatrix, any":function(e,r){return u(e,r,l,!1)},"DenseMatrix, any":function(e,r){return f(e,r,l,!1)},"any, SparseMatrix":function(e,r){return u(r,e,l,!0)},"any, DenseMatrix":function(e,r){return f(r,e,l,!0)},"Array, any":function(e,r){return f(a(e),r,l,!1).valueOf()},"any, Array":function(e,r){return f(a(r),e,l,!0).valueOf()}});return l.toTex={2:"\\left(${args[0]}"+i.operators.bitOr+"${args[1]}\\right)"},l}},Gc=function(e,r){if(e.isFinite()&&!e.isInteger()||r.isFinite()&&!r.isInteger())throw new Error("Integers expected in function bitXor");var t=e.constructor;if(e.isNaN()||r.isNaN())return new t(NaN);if(e.isZero())return r;if(r.isZero())return e;if(e.eq(r))return new t(0);var n=new t(-1);return e.eq(n)?Ic(r):r.eq(n)?Ic(e):e.isFinite()&&r.isFinite()?Rc(e,r,function(e,r){return e^r}):e.isFinite()||r.isFinite()?new t(e.isNegative()==r.isNegative()?1/0:-1/0):n},Vc=o.isInteger;var Zc={name:"bitXor",factory:function(e,r,t,n){var i=L,a=t(Ee),o=t(Re),s=t(Ue),u=t(ke),c=t(Te),f=t(ze),l=n("bitXor",{"number, number":function(e,r){if(!Vc(e)||!Vc(r))throw new Error("Integers expected in function bitXor");return e^r},"BigNumber, BigNumber":Gc,"SparseMatrix, SparseMatrix":function(e,r){return s(e,r,l)},"SparseMatrix, DenseMatrix":function(e,r){return o(r,e,l,!0)},"DenseMatrix, SparseMatrix":function(e,r){return o(e,r,l,!1)},"DenseMatrix, DenseMatrix":function(e,r){return c(e,r,l)},"Array, Array":function(e,r){return l(a(e),a(r)).valueOf()},"Array, Matrix":function(e,r){return l(a(e),r)},"Matrix, Array":function(e,r){return l(e,a(r))},"SparseMatrix, any":function(e,r){return u(e,r,l,!1)},"DenseMatrix, any":function(e,r){return f(e,r,l,!1)},"any, SparseMatrix":function(e,r){return u(r,e,l,!0)},"any, DenseMatrix":function(e,r){return f(r,e,l,!0)},"Array, any":function(e,r){return f(a(e),r,l,!1).valueOf()},"any, Array":function(e,r){return f(a(r),e,l,!0).valueOf()}});return l.toTex={2:"\\left(${args[0]}"+i.operators.bitXor+"${args[1]}\\right)"},l}},Wc=function(e,r){if(e.isFinite()&&!e.isInteger()||r.isFinite()&&!r.isInteger())throw new Error("Integers expected in function leftShift");var t=e.constructor;return e.isNaN()||r.isNaN()||r.isNegative()&&!r.isZero()?new t(NaN):e.isZero()||r.isZero()?e:e.isFinite()||r.isFinite()?r.lt(55)?e.times(Math.pow(2,r.toNumber())+""):e.times(new t(2).pow(r)):new t(NaN)};var Jc={name:"algorithm08",factory:function(e,r,t,n){var i=t(me),a=e.SparseMatrix;return function(e,r,t){var o=e._values,s=e._index,u=e._ptr,c=e._size,f=e._datatype,l=r._values,p=r._index,m=r._ptr,h=r._size,d=r._datatype;if(c.length!==h.length)throw new V(c.length,h.length);if(c[0]!==h[0]||c[1]!==h[1])throw new RangeError("Dimension mismatch. Matrix A ("+c+") must match Matrix B ("+h+")");if(!o||!l)throw new Error("Cannot perform operation on Pattern Sparse Matrices");var g,v=c[0],y=c[1],x=i,w=0,b=t;"string"==typeof f&&f===d&&(g=f,x=n.find(i,[g,g]),w=n.convert(0,g),b=n.find(t,[g,g]));for(var N,M,E,A,O=[],S=[],_=[],T=new a({values:O,index:S,ptr:_,size:[v,y],datatype:g}),C=[],z=[],B=0;B<y;B++){_[B]=S.length;var P=B+1;for(M=u[B],E=u[B+1],N=M;N<E;N++)z[A=s[N]]=P,C[A]=o[N],S.push(A);for(M=m[B],E=m[B+1],N=M;N<E;N++)z[A=p[N]]===P&&(C[A]=b(C[A],l[N]));for(N=_[B];N<S.length;){var I=C[A=S[N]];x(I,w)?S.splice(N,1):(O.push(I),N++)}}return _[y]=S.length,T}}},Yc=o.isInteger;var Xc={name:"leftShift",factory:function(e,r,t,n){var i=L,a=t(Ee),o=t(me),s=t(Nr),u=t(Oe),c=t(Ku),f=t(Jc),l=t(_e),p=t(pr),m=t(Te),h=t(ze),d=n("leftShift",{"number, number":function(e,r){if(!Yc(e)||!Yc(r))throw new Error("Integers expected in function leftShift");return e<<r},"BigNumber, BigNumber":Wc,"SparseMatrix, SparseMatrix":function(e,r){return f(e,r,d,!1)},"SparseMatrix, DenseMatrix":function(e,r){return c(r,e,d,!0)},"DenseMatrix, SparseMatrix":function(e,r){return u(e,r,d,!1)},"DenseMatrix, DenseMatrix":function(e,r){return m(e,r,d)},"Array, Array":function(e,r){return d(a(e),a(r)).valueOf()},"Array, Matrix":function(e,r){return d(a(e),r)},"Matrix, Array":function(e,r){return d(e,a(r))},"SparseMatrix, number | BigNumber":function(e,r){return o(r,0)?e.clone():p(e,r,d,!1)},"DenseMatrix, number | BigNumber":function(e,r){return o(r,0)?e.clone():h(e,r,d,!1)},"number | BigNumber, SparseMatrix":function(e,r){return o(e,0)?s(r.size(),r.storage()):l(r,e,d,!0)},"number | BigNumber, DenseMatrix":function(e,r){return o(e,0)?s(r.size(),r.storage()):h(r,e,d,!0)},"Array, number | BigNumber":function(e,r){return d(a(e),r).valueOf()},"number | BigNumber, Array":function(e,r){return d(e,a(r)).valueOf()}});return d.toTex={2:"\\left(${args[0]}"+i.operators.leftShift+"${args[1]}\\right)"},d}},Qc=function(e,r){if(e.isFinite()&&!e.isInteger()||r.isFinite()&&!r.isInteger())throw new Error("Integers expected in function rightArithShift");var t=e.constructor;return e.isNaN()||r.isNaN()||r.isNegative()&&!r.isZero()?new t(NaN):e.isZero()||r.isZero()?e:r.isFinite()?r.lt(55)?e.div(Math.pow(2,r.toNumber())+"").floor():e.div(new t(2).pow(r)).floor():e.isNegative()?new t(-1):e.isFinite()?new t(0):new t(NaN)},Kc=o.isInteger;var ef={name:"rightArithShift",factory:function(e,r,t,n){var i=L,a=t(Ee),o=t(me),s=t(Nr),u=t(Oe),c=t(Ku),f=t(Jc),l=t(_e),p=t(pr),m=t(Te),h=t(ze),d=n("rightArithShift",{"number, number":function(e,r){if(!Kc(e)||!Kc(r))throw new Error("Integers expected in function rightArithShift");return e>>r},"BigNumber, BigNumber":Qc,"SparseMatrix, SparseMatrix":function(e,r){return f(e,r,d,!1)},"SparseMatrix, DenseMatrix":function(e,r){return c(r,e,d,!0)},"DenseMatrix, SparseMatrix":function(e,r){return u(e,r,d,!1)},"DenseMatrix, DenseMatrix":function(e,r){return m(e,r,d)},"Array, Array":function(e,r){return d(a(e),a(r)).valueOf()},"Array, Matrix":function(e,r){return d(a(e),r)},"Matrix, Array":function(e,r){return d(e,a(r))},"SparseMatrix, number | BigNumber":function(e,r){return o(r,0)?e.clone():p(e,r,d,!1)},"DenseMatrix, number | BigNumber":function(e,r){return o(r,0)?e.clone():h(e,r,d,!1)},"number | BigNumber, SparseMatrix":function(e,r){return o(e,0)?s(r.size(),r.storage()):l(r,e,d,!0)},"number | BigNumber, DenseMatrix":function(e,r){return o(e,0)?s(r.size(),r.storage()):h(r,e,d,!0)},"Array, number | BigNumber":function(e,r){return d(a(e),r).valueOf()},"number | BigNumber, Array":function(e,r){return d(e,a(r)).valueOf()}});return d.toTex={2:"\\left(${args[0]}"+i.operators.rightArithShift+"${args[1]}\\right)"},d}},rf=o.isInteger;var tf=[qc,Fc,$c,Zc,Xc,ef,{name:"rightLogShift",factory:function(e,r,t,n){var i=L,a=t(Ee),o=t(me),s=t(Nr),u=t(Oe),c=t(Ku),f=t(Jc),l=t(_e),p=t(pr),m=t(Te),h=t(ze),d=n("rightLogShift",{"number, number":function(e,r){if(!rf(e)||!rf(r))throw new Error("Integers expected in function rightLogShift");return e>>>r},"SparseMatrix, SparseMatrix":function(e,r){return f(e,r,d,!1)},"SparseMatrix, DenseMatrix":function(e,r){return c(r,e,d,!0)},"DenseMatrix, SparseMatrix":function(e,r){return u(e,r,d,!1)},"DenseMatrix, DenseMatrix":function(e,r){return m(e,r,d)},"Array, Array":function(e,r){return d(a(e),a(r)).valueOf()},"Array, Matrix":function(e,r){return d(a(e),r)},"Matrix, Array":function(e,r){return d(e,a(r))},"SparseMatrix, number | BigNumber":function(e,r){return o(r,0)?e.clone():p(e,r,d,!1)},"DenseMatrix, number | BigNumber":function(e,r){return o(r,0)?e.clone():h(e,r,d,!1)},"number | BigNumber, SparseMatrix":function(e,r){return o(e,0)?s(r.size(),r.storage()):l(r,e,d,!0)},"number | BigNumber, DenseMatrix":function(e,r){return o(e,0)?s(r.size(),r.storage()):h(r,e,d,!0)},"Array, number | BigNumber":function(e,r){return d(a(e),r).valueOf()},"number | BigNumber, Array":function(e,r){return d(e,a(r)).valueOf()}});return d.toTex={2:"\\left(${args[0]}"+i.operators.rightLogShift+"${args[1]}\\right)"},d}}],nf=o.isInteger;var af=4.7421875,of=[.9999999999999971,57.15623566586292,-59.59796035547549,14.136097974741746,-.4919138160976202,3399464998481189e-20,4652362892704858e-20,-9837447530487956e-20,.0001580887032249125,-.00021026444172410488,.00021743961811521265,-.0001643181065367639,8441822398385275e-20,-26190838401581408e-21,36899182659531625e-22],sf={name:"gamma",factory:function(e,r,t,n){var i=t(hr),a=t(vr),o=n("gamma",{number:function(e){var r,t;if(nf(e)){if(e<=0)return isFinite(e)?1/0:NaN;if(e>171)return 1/0;for(var n=e-2,i=e-1;n>1;)i*=n,n--;return 0==i&&(i=1),i}if(e<.5)return Math.PI/(Math.sin(Math.PI*e)*o(1-e));if(e>=171.35)return 1/0;if(e>85){var a=e*e,s=a*e,u=s*e,c=u*e;return Math.sqrt(2*Math.PI/e)*Math.pow(e/Math.E,e)*(1+1/(12*e)+1/(288*a)-139/(51840*s)-571/(2488320*u)+163879/(209018880*c)+5246819/(75246796800*c*e))}--e,t=of[0];for(var f=1;f<of.length;++f)t+=of[f]/(e+f);return r=e+af+.5,Math.sqrt(2*Math.PI)*Math.pow(r,e+.5)*Math.exp(-r)*t},Complex:function(r){var t,n;if(0==r.im)return o(r.re);r=new e.Complex(r.re-1,r.im),n=new e.Complex(of[0],0);for(var s=1;s<of.length;++s){var u=r.re+s,c=u*u+r.im*r.im;0!=c?(n.re+=of[s]*u/c,n.im+=-of[s]*r.im/c):n.re=of[s]<0?-1/0:1/0}t=new e.Complex(r.re+af+.5,r.im);var f=Math.sqrt(2*Math.PI);r.re+=.5;var l=a(t,r);0==l.im?l.re*=f:0==l.re?l.im*=f:(l.re*=f,l.im*=f);var p=Math.exp(-t.re);return t.re=p*Math.cos(-t.im),t.im=p*Math.sin(-t.im),i(i(l,t),n)},BigNumber:function(t){if(t.isInteger())return t.isNegative()||t.isZero()?new e.BigNumber(1/0):function(t){if(t.isZero())return new e.BigNumber(1);for(var n=r.precision+(0|Math.log(t.toNumber())),i=new(e.BigNumber.clone({precision:n}))(t),a=t.toNumber()-1;a>1;)i=i.times(a),a--;return new e.BigNumber(i.toPrecision(e.BigNumber.precision))}(t.minus(1));if(!t.isFinite())return new e.BigNumber(t.isNegative()?NaN:1/0);throw new Error("Integer BigNumber expected")},"Array | Matrix":function(e){return A(e,o)}});return o.toTex={1:"\\Gamma\\left(${args[0]}\\right)"},o}};var uf={name:"factorial",factory:function(e,r,t,n){var i=t(sf),a=L,o=n("factorial",{number:function(e){if(e<0)throw new Error("Value must be non-negative");return i(e+1)},BigNumber:function(e){if(e.isNegative())throw new Error("Value must be non-negative");return i(e.plus(1))},"Array | Matrix":function(e){return A(e,o)}});return o.toTex={1:"\\left(${args[0]}\\right)"+a.operators.factorial},o}},cf=o.isInteger;function ff(e){return e.isInteger()&&e.gte(0)}var lf={name:"combinations",factory:function(e,r,t,n){var i=n("combinations",{"number, number":function(e,r){var t,n,i;if(!cf(e)||e<0)throw new TypeError("Positive integer value expected in function combinations");if(!cf(r)||r<0)throw new TypeError("Positive integer value expected in function combinations");if(r>e)throw new TypeError("k must be less than or equal to n");for(t=Math.max(r,e-r),n=1,i=1;i<=e-t;i++)n=n*(t+i)/i;return n},"BigNumber, BigNumber":function(r,t){var n,i,a,o,s=new e.BigNumber(1);if(!ff(r)||!ff(t))throw new TypeError("Positive integer value expected in function combinations");if(t.gt(r))throw new TypeError("k must be less than n in function combinations");for(n=r.minus(t),t.lt(n)&&(n=t),i=s,a=s,o=r.minus(n);a.lte(o);a=a.plus(1))i=i.times(n.plus(a)).dividedBy(a);return i}});return i.toTex={2:"\\binom{${args[0]}}{${args[1]}}"},i}};var pf={name:"isInteger",factory:function(e,r,t,n){var i=n("isInteger",{number:o.isInteger,BigNumber:function(e){return e.isInt()},Fraction:function(e){return 1===e.d&&isFinite(e.n)},"Array | Matrix":function(e){return A(e,i)}});return i}};var mf={name:"stirlingS2",factory:function(e,r,t,n){var i=t(Pe),a=t(sr),o=t(hr),s=t(js),u=t(vr),c=t(uf),f=t(lf),l=t(Wu),p=t(pf),m=t(Fe),h=n("stirlingS2",{"number | BigNumber, number | BigNumber":function(e,r){if(!p(e)||l(e)||!p(r)||l(r))throw new TypeError("Non-negative integer value expected in function stirlingS2");if(m(r,e))throw new TypeError("k must be less than or equal to n in function stirlingS2");for(var t=c(r),n=0,h=0;h<=r;h++){var d=u(-1,a(r,h)),g=f(r,h),v=u(h,e);n=i(n,o(o(g,v),d))}return s(n,t)}});return h.toTex={2:"\\mathrm{S}\\left(${args}\\right)"},h}};var hf=[{name:"bellNumbers",factory:function(e,r,t,n){var i=t(Pe),a=t(mf),o=t(Wu),s=t(pf),u=n("bellNumbers",{"number | BigNumber":function(e){if(!s(e)||o(e))throw new TypeError("Non-negative integer value expected in function bellNumbers");for(var r=0,t=0;t<=e;t++)r=i(r,a(e,t));return r}});return u.toTex={1:"\\mathrm{B}_{${args[0]}}"},u}},{name:"composition",factory:function(e,r,t,n){var i=t(lf),a=t(Ae),o=t(ou),s=t(pf),u=t(Fe),c=n("composition",{"number | BigNumber, number | BigNumber":function(e,r){if(!(s(e)&&o(e)&&s(r)&&o(r)))throw new TypeError("Positive integer value expected in function composition");if(u(r,e))throw new TypeError("k must be less than or equal to n in function composition");return i(a(e,-1),a(r,-1))}});return c.toTex=void 0,c}},mf,{name:"catalan",factory:function(e,r,t,n){var i=t(Pe),a=t(js),o=t(hr),s=t(lf),u=t(Wu),c=t(pf),f=n("catalan",{"number | BigNumber":function(e){if(!c(e)||u(e))throw new TypeError("Non-negative integer value expected in function catalan");return a(s(o(e,2),e),i(e,1))}});return f.toTex={1:"\\mathrm{C}_{${args[0]}}"},f}}];var df=[{name:"arg",factory:function(e,r,t,n){var i=n("arg",{number:function(e){return Math.atan2(0,e)},BigNumber:function(r){return e.BigNumber.atan2(0,r)},Complex:function(e){return e.arg()},"Array | Matrix":function(e){return A(e,i)}});return i.toTex={1:"\\arg\\left(${args[0]}\\right)"},i}},lu,{name:"im",factory:function(e,r,t,n){var i=n("im",{number:function(e){return 0},BigNumber:function(r){return new e.BigNumber(0)},Complex:function(e){return e.im},"Array | Matrix":function(e){return A(e,i)}});return i.toTex={1:"\\Im\\left\\lbrace${args[0]}\\right\\rbrace"},i}},{name:"re",factory:function(e,r,t,n){var i=n("re",{number:function(e){return e},BigNumber:function(e){return e},Complex:function(e){return e.re},"Array | Matrix":function(e){return A(e,i)}});return i.toTex={1:"\\Re\\left\\lbrace${args[0]}\\right\\rbrace"},i}}];var gf=[{name:"intersect",factory:function(e,r,t,n){var i=t(yr),a=t(Pe),o=t(Ae),s=t(Ee),u=t(hr),c=t(ur),f=t(cr),l=t(sr),p=t(qe),m=t(me),h=n("intersect",{"Array, Array, Array":function(e,r,t){if(!v(e))throw new TypeError("Array with 3 numbers or BigNumbers expected for first argument");if(!v(r))throw new TypeError("Array with 3 numbers or BigNumbers expected for second argument");if(!function(e){return 4===e.length&&d(e[0])&&d(e[1])&&d(e[2])&&d(e[3])}(t))throw new TypeError("Array with 4 numbers expected as third argument");return function(e,r,t,n,i,a,s,u,p,m){var h=c(e,s),d=c(n,s),g=c(r,u),v=c(i,u),y=c(t,p),x=c(a,p),w=f(l(l(l(m,h),g),y),l(l(l(o(o(d,v),x),h),g),y)),b=o(e,c(w,l(n,e))),N=o(r,c(w,l(i,r))),M=o(t,c(w,l(a,t)));return[b,N,M]}(e[0],e[1],e[2],r[0],r[1],r[2],t[0],t[1],t[2],t[3])},"Array, Array, Array, Array":function(e,t,n,s){if(2===e.length){if(!g(e))throw new TypeError("Array with 2 numbers or BigNumbers expected for first argument");if(!g(t))throw new TypeError("Array with 2 numbers or BigNumbers expected for second argument");if(!g(n))throw new TypeError("Array with 2 numbers or BigNumbers expected for third argument");if(!g(s))throw new TypeError("Array with 2 numbers or BigNumbers expected for fourth argument");return function(e,t,n,s){var m=e,h=n,d=l(m,t),g=l(h,s),v=l(c(d[0],g[1]),c(g[0],d[1]));if(p(i(v),r.epsilon))return null;var y=c(g[0],m[1]),x=c(g[1],m[0]),w=c(g[0],h[1]),b=c(g[1],h[0]),N=f(o(l(l(y,x),w),b),v);return a(u(d,N),m)}(e,t,n,s)}if(3===e.length){if(!v(e))throw new TypeError("Array with 3 numbers or BigNumbers expected for first argument");if(!v(t))throw new TypeError("Array with 3 numbers or BigNumbers expected for second argument");if(!v(n))throw new TypeError("Array with 3 numbers or BigNumbers expected for third argument");if(!v(s))throw new TypeError("Array with 3 numbers or BigNumbers expected for fourth argument");return h=e[0],d=e[1],x=e[2],w=t[0],b=t[1],N=t[2],M=n[0],E=n[1],A=n[2],O=s[0],S=s[1],_=s[2],T=y(h,M,O,M,d,E,S,E,x,A,_,A),C=y(O,M,w,h,S,E,b,d,_,A,N,x),z=y(h,M,w,h,d,E,b,d,x,A,N,x),B=y(O,M,O,M,S,E,S,E,_,A,_,A),P=y(w,h,w,h,b,d,b,d,N,x,N,x),I=f(l(c(T,C),c(z,B)),l(c(P,B),c(C,C))),R=f(o(T,c(I,C)),B),U=o(h,c(I,l(w,h))),k=o(d,c(I,l(b,d))),D=o(x,c(I,l(N,x))),q=o(M,c(R,l(O,M))),L=o(E,c(R,l(S,E))),F=o(A,c(R,l(_,A))),m(U,q)&&m(k,L)&&m(D,F)?[U,k,D]:null}throw new TypeError("Arrays with two or thee dimensional points expected");var h,d,x,w,b,N,M,E,A,O,S,_,T,C,z,B,P,I,R,U,k,D,q,L,F},"Matrix, Matrix, Matrix":function(e,r,t){return s(h(e.valueOf(),r.valueOf(),t.valueOf()))},"Matrix, Matrix, Matrix, Matrix":function(e,r,t,n){return s(h(e.valueOf(),r.valueOf(),t.valueOf(),n.valueOf()))}});function d(r){return"number"==typeof r||e.isBigNumber(r)}function g(e){return 2===e.length&&d(e[0])&&d(e[1])}function v(e){return 3===e.length&&d(e[0])&&d(e[1])&&d(e[2])}function y(e,r,t,n,i,a,s,u,f,p,m,h){var d=c(l(e,r),l(t,n)),g=c(l(i,a),l(s,u)),v=c(l(f,p),l(m,h));return o(o(d,g),v)}return h}},{name:"distance",factory:function(e,r,t,n){t(Ee);var i=t(Ae),a=t(sr),o=t(ur),s=t(cr),u=t(ir),c=t(fu),f=t(yr);function l(r){return"number"==typeof r||e.isBigNumber(r)}function p(e){return e.constructor!==Array&&(e=d(e)),l(e[0])&&l(e[1])}function m(e){return e.constructor!==Array&&(e=d(e)),l(e[0])&&l(e[1])&&l(e[2])}function h(e){return e.constructor!==Array&&(e=d(e)),l(e[0])&&l(e[1])&&l(e[2])&&l(e[3])&&l(e[4])&&l(e[5])}function d(e){for(var r=Object.keys(e),t=[],n=0;n<r.length;n++)t.push(e[r[n]]);return t}function g(e,r,t,n,a){var u=f(i(i(o(t,e),o(n,r)),a)),l=c(i(o(t,t),o(n,n)));return s(u,l)}function v(e,r,t,n,u,f,l,p,m){var h=[a(o(a(u,r),m),o(a(f,t),p)),a(o(a(f,t),l),o(a(n,e),m)),a(o(a(n,e),p),o(a(u,r),l))];h=c(i(i(o(h[0],h[0]),o(h[1],h[1])),o(h[2],h[2])));var d=c(i(i(o(l,l),o(p,p)),o(m,m)));return s(h,d)}function y(e,r,t,n){var s=a(n,r),u=a(t,e),f=i(o(s,s),o(u,u));return c(f)}function x(e,r,t,n,s,u){var f=a(u,t),l=a(s,r),p=a(n,e),m=i(i(o(f,f),o(l,l)),o(p,p));return c(m)}return n("distance",{"Array, Array, Array":function(e,r,t){if(2==e.length&&2==r.length&&2==t.length){if(!p(e))throw new TypeError("Array with 2 numbers or BigNumbers expected for first argument");if(!p(r))throw new TypeError("Array with 2 numbers or BigNumbers expected for second argument");if(!p(t))throw new TypeError("Array with 2 numbers or BigNumbers expected for third argument");var n=s(a(t[1],t[0]),a(r[1],r[0])),i=o(o(n,n),r[0]),c=u(o(n,r[0])),f=e[1];return g(e[0],e[1],i,c,f)}throw new TypeError("Invalid Arguments: Try again")},"Object, Object, Object":function(e,r,t){if(2==Object.keys(e).length&&2==Object.keys(r).length&&2==Object.keys(t).length){if(!p(e))throw new TypeError("Values of pointX and pointY should be numbers or BigNumbers");if(!p(r))throw new TypeError("Values of lineOnePtX and lineOnePtY should be numbers or BigNumbers");if(!p(t))throw new TypeError("Values of lineTwoPtX and lineTwoPtY should be numbers or BigNumbers");if(e.hasOwnProperty("pointX")&&e.hasOwnProperty("pointY")&&r.hasOwnProperty("lineOnePtX")&&r.hasOwnProperty("lineOnePtY")&&t.hasOwnProperty("lineTwoPtX")&&t.hasOwnProperty("lineTwoPtY")){var n=s(a(t.lineTwoPtY,t.lineTwoPtX),a(r.lineOnePtY,r.lineOnePtX)),i=o(o(n,n),r.lineOnePtX),c=u(o(n,r.lineOnePtX)),f=e.pointX;return g(e.pointX,e.pointY,i,c,f)}throw new TypeError("Key names do not match")}throw new TypeError("Invalid Arguments: Try again")},"Array, Array":function(e,r){if(2==e.length&&3==r.length){if(!p(e))throw new TypeError("Array with 2 numbers or BigNumbers expected for first argument");if(!m(r))throw new TypeError("Array with 3 numbers or BigNumbers expected for second argument");return g(e[0],e[1],r[0],r[1],r[2])}if(3==e.length&&6==r.length){if(!m(e))throw new TypeError("Array with 3 numbers or BigNumbers expected for first argument");if(!h(r))throw new TypeError("Array with 6 numbers or BigNumbers expected for second argument");return v(e[0],e[1],e[2],r[0],r[1],r[2],r[3],r[4],r[5])}if(2==e.length&&2==r.length){if(!p(e))throw new TypeError("Array with 2 numbers or BigNumbers expected for first argument");if(!p(r))throw new TypeError("Array with 2 numbers or BigNumbers expected for second argument");return y(e[0],e[1],r[0],r[1])}if(3==e.length&&3==r.length){if(!m(e))throw new TypeError("Array with 3 numbers or BigNumbers expected for first argument");if(!m(r))throw new TypeError("Array with 3 numbers or BigNumbers expected for second argument");return x(e[0],e[1],e[2],r[0],r[1],r[2])}throw new TypeError("Invalid Arguments: Try again")},"Object, Object":function(e,r){if(2==Object.keys(e).length&&3==Object.keys(r).length){if(!p(e))throw new TypeError("Values of pointX and pointY should be numbers or BigNumbers");if(!m(r))throw new TypeError("Values of xCoeffLine, yCoeffLine and constant should be numbers or BigNumbers");if(e.hasOwnProperty("pointX")&&e.hasOwnProperty("pointY")&&r.hasOwnProperty("xCoeffLine")&&r.hasOwnProperty("yCoeffLine")&&r.hasOwnProperty("constant"))return g(e.pointX,e.pointY,r.xCoeffLine,r.yCoeffLine,r.constant);throw new TypeError("Key names do not match")}if(3==Object.keys(e).length&&6==Object.keys(r).length){if(!m(e))throw new TypeError("Values of pointX, pointY and pointZ should be numbers or BigNumbers");if(!h(r))throw new TypeError("Values of x0, y0, z0, a, b and c should be numbers or BigNumbers");if(e.hasOwnProperty("pointX")&&e.hasOwnProperty("pointY")&&r.hasOwnProperty("x0")&&r.hasOwnProperty("y0")&&r.hasOwnProperty("z0")&&r.hasOwnProperty("a")&&r.hasOwnProperty("b")&&r.hasOwnProperty("c"))return v(e.pointX,e.pointY,e.pointZ,r.x0,r.y0,r.z0,r.a,r.b,r.c);throw new TypeError("Key names do not match")}if(2==Object.keys(e).length&&2==Object.keys(r).length){if(!p(e))throw new TypeError("Values of pointOneX and pointOneY should be numbers or BigNumbers");if(!p(r))throw new TypeError("Values of pointTwoX and pointTwoY should be numbers or BigNumbers");if(e.hasOwnProperty("pointOneX")&&e.hasOwnProperty("pointOneY")&&r.hasOwnProperty("pointTwoX")&&r.hasOwnProperty("pointTwoY"))return y(e.pointOneX,e.pointOneY,r.pointTwoX,r.pointTwoY);throw new TypeError("Key names do not match")}if(3==Object.keys(e).length&&3==Object.keys(r).length){if(!m(e))throw new TypeError("Values of pointOneX, pointOneY and pointOneZ should be numbers or BigNumbers");if(!m(r))throw new TypeError("Values of pointTwoX, pointTwoY and pointTwoZ should be numbers or BigNumbers");if(e.hasOwnProperty("pointOneX")&&e.hasOwnProperty("pointOneY")&&e.hasOwnProperty("pointOneZ")&&r.hasOwnProperty("pointTwoX")&&r.hasOwnProperty("pointTwoY")&&r.hasOwnProperty("pointTwoZ"))return x(e.pointOneX,e.pointOneY,e.pointOneZ,r.pointTwoX,r.pointTwoY,r.pointTwoZ);throw new TypeError("Key names do not match")}throw new TypeError("Invalid Arguments: Try again")},Array:function(e){if(!function(e){if(2==e[0].length&&l(e[0][0])&&l(e[0][1])){for(var r in e)if(2!=e[r].length||!l(e[r][0])||!l(e[r][1]))return!1}else{if(!(3==e[0].length&&l(e[0][0])&&l(e[0][1])&&l(e[0][2])))return!1;for(var r in e)if(3!=e[r].length||!l(e[r][0])||!l(e[r][1])||!l(e[r][2]))return!1}return!0}(e))throw new TypeError("Incorrect array format entered for pairwise distance calculation");return function(e){for(var r=[],t=0;t<e.length-1;t++)for(var n=t+1;n<e.length;n++)2==e[0].length?r.push(y(e[t][0],e[t][1],e[n][0],e[n][1])):3==e[0].length&&r.push(x(e[t][0],e[t][1],e[t][2],e[n][0],e[n][1],e[n][2]));return r}(e)}})}}];var vf={name:"not",factory:function(e,r,t,n){var i=L,a=n("not",{number:function(e){return!e},Complex:function(e){return 0===e.re&&0===e.im},BigNumber:function(e){return e.isZero()||e.isNaN()},Unit:function(e){return null===e.value||a(e.value)},"Array | Matrix":function(e){return A(e,a)}});return a.toTex={1:i.operators.not+"\\left(${args[0]}\\right)"},a}};var yf=[{name:"and",factory:function(e,r,t,n){var i=L,a=t(Ee),o=t(Nr),s=t(vf),u=(t(Ks),t(Ku)),c=t(mc),f=t(pr),l=t(Te),p=t(ze),m=n("and",{"number, number":function(e,r){return!(!e||!r)},"Complex, Complex":function(e,r){return!(0===e.re&&0===e.im||0===r.re&&0===r.im)},"BigNumber, BigNumber":function(e,r){return!(e.isZero()||r.isZero()||e.isNaN()||r.isNaN())},"Unit, Unit":function(e,r){return m(e.value||0,r.value||0)},"SparseMatrix, SparseMatrix":function(e,r){return c(e,r,m,!1)},"SparseMatrix, DenseMatrix":function(e,r){return u(r,e,m,!0)},"DenseMatrix, SparseMatrix":function(e,r){return u(e,r,m,!1)},"DenseMatrix, DenseMatrix":function(e,r){return l(e,r,m)},"Array, Array":function(e,r){return m(a(e),a(r)).valueOf()},"Array, Matrix":function(e,r){return m(a(e),r)},"Matrix, Array":function(e,r){return m(e,a(r))},"SparseMatrix, any":function(e,r){return s(r)?o(e.size(),e.storage()):f(e,r,m,!1)},"DenseMatrix, any":function(e,r){return s(r)?o(e.size(),e.storage()):p(e,r,m,!1)},"any, SparseMatrix":function(e,r){return s(e)?o(e.size(),e.storage()):f(r,e,m,!0)},"any, DenseMatrix":function(e,r){return s(e)?o(e.size(),e.storage()):p(r,e,m,!0)},"Array, any":function(e,r){return m(a(e),r).valueOf()},"any, Array":function(e,r){return m(e,a(r)).valueOf()}});return m.toTex={2:"\\left(${args[0]}"+i.operators.and+"${args[1]}\\right)"},m}},vf,{name:"or",factory:function(e,r,t,n){var i=L,a=t(Ee),o=t(Re),s=t(ar),u=t(ke),c=t(Te),f=t(ze),l=n("or",{"number, number":function(e,r){return!(!e&&!r)},"Complex, Complex":function(e,r){return 0!==e.re||0!==e.im||0!==r.re||0!==r.im},"BigNumber, BigNumber":function(e,r){return!e.isZero()&&!e.isNaN()||!r.isZero()&&!r.isNaN()},"Unit, Unit":function(e,r){return l(e.value||0,r.value||0)},"SparseMatrix, SparseMatrix":function(e,r){return s(e,r,l)},"SparseMatrix, DenseMatrix":function(e,r){return o(r,e,l,!0)},"DenseMatrix, SparseMatrix":function(e,r){return o(e,r,l,!1)},"DenseMatrix, DenseMatrix":function(e,r){return c(e,r,l)},"Array, Array":function(e,r){return l(a(e),a(r)).valueOf()},"Array, Matrix":function(e,r){return l(a(e),r)},"Matrix, Array":function(e,r){return l(e,a(r))},"SparseMatrix, any":function(e,r){return u(e,r,l,!1)},"DenseMatrix, any":function(e,r){return f(e,r,l,!1)},"any, SparseMatrix":function(e,r){return u(r,e,l,!0)},"any, DenseMatrix":function(e,r){return f(r,e,l,!0)},"Array, any":function(e,r){return f(a(e),r,l,!1).valueOf()},"any, Array":function(e,r){return f(a(r),e,l,!0).valueOf()}});return l.toTex={2:"\\left(${args[0]}"+i.operators.or+"${args[1]}\\right)"},l}},{name:"xor",factory:function(e,r,t,n){var i=L,a=t(Ee),o=t(Re),s=t(Ue),u=t(ke),c=t(Te),f=t(ze),l=n("xor",{"number, number":function(e,r){return!!e!=!!r},"Complex, Complex":function(e,r){return(0!==e.re||0!==e.im)!=(0!==r.re||0!==r.im)},"BigNumber, BigNumber":function(e,r){return(!e.isZero()&&!e.isNaN())!=(!r.isZero()&&!r.isNaN())},"Unit, Unit":function(e,r){return l(e.value||0,r.value||0)},"SparseMatrix, SparseMatrix":function(e,r){return s(e,r,l)},"SparseMatrix, DenseMatrix":function(e,r){return o(r,e,l,!0)},"DenseMatrix, SparseMatrix":function(e,r){return o(e,r,l,!1)},"DenseMatrix, DenseMatrix":function(e,r){return c(e,r,l)},"Array, Array":function(e,r){return l(a(e),a(r)).valueOf()},"Array, Matrix":function(e,r){return l(a(e),r)},"Matrix, Array":function(e,r){return l(e,a(r))},"SparseMatrix, any":function(e,r){return u(e,r,l,!1)},"DenseMatrix, any":function(e,r){return f(e,r,l,!1)},"any, SparseMatrix":function(e,r){return u(r,e,l,!0)},"any, DenseMatrix":function(e,r){return f(r,e,l,!0)},"Array, any":function(e,r){return f(a(e),r,l,!1).valueOf()},"any, Array":function(e,r){return f(a(r),e,l,!0).valueOf()}});return l.toTex={2:"\\left(${args[0]}"+i.operators.xor+"${args[1]}\\right)"},l}}];var xf={name:"cross",factory:function(e,r,t,n){var i=t(Ee),a=t(sr),o=t(hr),s=n("cross",{"Matrix, Matrix":function(e,r){return i(u(e.toArray(),r.toArray()))},"Matrix, Array":function(e,r){return i(u(e.toArray(),r))},"Array, Matrix":function(e,r){return i(u(e,r.toArray()))},"Array, Array":u});return s.toTex={2:"\\left(${args[0]}\\right)\\times\\left(${args[1]}\\right)"},s;function u(e,r){var t=Math.max(J.size(e).length,J.size(r).length);e=J.squeeze(e),r=J.squeeze(r);var n=J.size(e),i=J.size(r);if(1!=n.length||1!=i.length||3!=n[0]||3!=i[0])throw new RangeError("Vectors with length 3 expected (Size A = ["+n.join(", ")+"], B = ["+i.join(", ")+"])");var s=[a(o(e[1],r[2]),o(e[2],r[1])),a(o(e[2],r[0]),o(e[0],r[2])),a(o(e[0],r[1]),o(e[1],r[0]))];return t>1?[s]:s}}},wf=(i.clone,o.isInteger);var bf={name:"diag",factory:function(e,r,t,n){var i=t(Ee),a=n("diag",{Array:function(e){return o(e,0,J.size(e),null)},"Array, number":function(e,r){return o(e,r,J.size(e),null)},"Array, BigNumber":function(e,r){return o(e,r.toNumber(),J.size(e),null)},"Array, string":function(e,r){return o(e,0,J.size(e),r)},"Array, number, string":function(e,r,t){return o(e,r,J.size(e),t)},"Array, BigNumber, string":function(e,r,t){return o(e,r.toNumber(),J.size(e),t)},Matrix:function(e){return o(e,0,e.size(),e.storage())},"Matrix, number":function(e,r){return o(e,r,e.size(),e.storage())},"Matrix, BigNumber":function(e,r){return o(e,r.toNumber(),e.size(),e.storage())},"Matrix, string":function(e,r){return o(e,0,e.size(),r)},"Matrix, number, string":function(e,r,t){return o(e,r,e.size(),t)},"Matrix, BigNumber, string":function(e,r,t){return o(e,r.toNumber(),e.size(),t)}});return a.toTex=void 0,a;function o(r,t,n,a){if(!wf(t))throw new TypeError("Second parameter in function diag must be an integer");var o=t>0?t:0,s=t<0?-t:0;switch(n.length){case 1:return function(r,t,n,i,a,o){var s=[i+a,i+o],u=e.Matrix.storage(n||"dense").diagonal(s,r,t);return null!==n?u:u.valueOf()}(r,t,a,n[0],s,o);case 2:return function(r,t,n,a,o,s){if(e.isMatrix(r)){var u=r.diagonal(t);return null!==n?n!==u.storage()?i(u,n):u:u.valueOf()}for(var c=Math.min(a[0]-o,a[1]-s),f=[],l=0;l<c;l++)f[l]=r[l+o][l+s];return null!==n?i(f):f}(r,t,a,n,s,o)}throw new RangeError("Matrix for function diag must be 2 dimensional")}}},Nf=J.size;var Mf={name:"dot",factory:function(e,r,t,n){var i=t(Pe),a=t(hr),o=n("dot",{"Matrix, Matrix":function(e,r){return s(e.toArray(),r.toArray())},"Matrix, Array":function(e,r){return s(e.toArray(),r)},"Array, Matrix":function(e,r){return s(e,r.toArray())},"Array, Array":s});return o.toTex={2:"\\left(${args[0]}\\cdot${args[1]}\\right)"},o;function s(e,r){var t=Nf(e),n=Nf(r),o=t[0];if(1!==t.length||1!==n.length)throw new RangeError("Vector expected");if(t[0]!=n[0])throw new RangeError("Vectors must have equal length ("+t[0]+" != "+n[0]+")");if(0==o)throw new RangeError("Cannot calculate the dot product of empty vectors");for(var s=0,u=0;u<o;u++)s=i(s,a(e[u],r[u]));return s}}},Ef=J.filter,Af=J.filterRegExp,Of=X.maxArgumentCount;function Sf(e,r){var t=Of(r);return Ef(e,function(e,n,i){return 1===t?r(e):2===t?r(e,[n]):r(e,[n],i)})}var _f={name:"filter",factory:function(e,r,t,n){var i=t(Ee),a=n("filter",{"Array, function":Sf,"Matrix, function":function(e,r){return i(Sf(e.toArray(),r))},"Array, RegExp":Af,"Matrix, RegExp":function(e,r){return i(Af(e.toArray(),r))}});return a.toTex=void 0,a}},Tf=i.clone,Cf=J.flatten;var zf={name:"flatten",factory:function(e,r,t,n){var i=t(Ee),a=n("flatten",{Array:function(e){return Cf(Tf(e))},Matrix:function(e){var r=Cf(Tf(e.toArray()));return i(r)}});return a.toTex=void 0,a}},Bf=X.maxArgumentCount,Pf=J.forEach;function If(e,r){var t=Bf(r),n=function(i,a){Array.isArray(i)?Pf(i,function(e,r){n(e,a.concat(r))}):1===t?r(i):2===t?r(i,a):r(i,a,e)};n(e,[])}var Rf={name:"forEach",factory:function(e,r,t,n){var i=n("forEach",{"Array, function":If,"Matrix, function":function(e,r){return e.forEach(r)}});return i.toTex=void 0,i}},Uf=J.size;var kf={name:"kron",factory:function(e,r,t,n){var i=t(Ee),a=t(ur);return n("kron",{"Matrix, Matrix":function(e,r){return i(o(e.toArray(),r.toArray()))},"Matrix, Array":function(e,r){return i(o(e.toArray(),r))},"Array, Matrix":function(e,r){return i(o(e,r.toArray()))},"Array, Array":o});function o(e,r){if(1===Uf(e).length&&(e=[e]),1===Uf(r).length&&(r=[r]),Uf(e).length>2||Uf(r).length>2)throw new RangeError("Vectors with dimensions greater then 2 are not supported expected (Size x = "+JSON.stringify(e.length)+", y = "+JSON.stringify(r.length)+")");var t=[],n=[];return e.map(function(e){return r.map(function(r){return e.map(function(e){return r.map(function(r){return n.push(a(e,r))})},t.push(n=[]))})},t=[])&&t}}},Df=X.maxArgumentCount;function qf(e,r){var t=Df(r),n=function(i,a){return Array.isArray(i)?i.map(function(e,r){return n(e,a.concat(r))}):1===t?r(i):2===t?r(i,a):r(i,a,e)};return n(e,[])}var Lf={name:"map",factory:function(e,r,t,n){var i=n("map",{"Array, function":qf,"Matrix, function":function(e,r){return e.map(r)}});return i.toTex=void 0,i}},Ff=o.isInteger,jf=J.resize;var Hf={name:"ones",factory:function(e,r,t,n){var i=t(Ee),a=n("ones",{"":function(){return"Array"===r.matrix?o([]):o([],"default")},"...number | BigNumber | string":function(e){return"string"==typeof e[e.length-1]?o(e,e.pop()):"Array"===r.matrix?o(e):o(e,"default")},Array:o,Matrix:function(e){var r=e.storage();return o(e.valueOf(),r)},"Array | Matrix, string":function(e,r){return o(e.valueOf(),r)}});return a.toTex=void 0,a;function o(r,t){var n=function(r){var t=!1;return r.forEach(function(r,n,i){e.isBigNumber(r)&&(t=!0,i[n]=r.toNumber())}),t}(r)?new e.BigNumber(1):1;if(function(e){e.forEach(function(e){if("number"!=typeof e||!Ff(e)||e<0)throw new Error("Parameters in function ones must be positive integers")})}(r),t){var a=i(t);return r.length>0?a.resize(r,n):a}var o=[];return r.length>0?jf(o,r,n):o}}},$f=o.nearlyEqual;var Gf={name:"compare",factory:function(e,r,t,n){var i=t(Ee),a=t(Re),o=t(ar),s=t(ke),u=t(Te),c=t(ze),f=n("compare",{"boolean, boolean":function(e,r){return e===r?0:e>r?1:-1},"number, number":function(e,t){return e===t||$f(e,t,r.epsilon)?0:e>t?1:-1},"BigNumber, BigNumber":function(t,n){return t.eq(n)||le(t,n,r.epsilon)?new e.BigNumber(0):new e.BigNumber(t.cmp(n))},"Fraction, Fraction":function(r,t){return new e.Fraction(r.compare(t))},"Complex, Complex":function(){throw new TypeError("No ordering relation is defined for complex numbers")},"Unit, Unit":function(e,r){if(!e.equalBase(r))throw new Error("Cannot compare units with different base");return f(e.value,r.value)},"SparseMatrix, SparseMatrix":function(e,r){return o(e,r,f)},"SparseMatrix, DenseMatrix":function(e,r){return a(r,e,f,!0)},"DenseMatrix, SparseMatrix":function(e,r){return a(e,r,f,!1)},"DenseMatrix, DenseMatrix":function(e,r){return u(e,r,f)},"Array, Array":function(e,r){return f(i(e),i(r)).valueOf()},"Array, Matrix":function(e,r){return f(i(e),r)},"Matrix, Array":function(e,r){return f(e,i(r))},"SparseMatrix, any":function(e,r){return s(e,r,f,!1)},"DenseMatrix, any":function(e,r){return c(e,r,f,!1)},"any, SparseMatrix":function(e,r){return s(r,e,f,!0)},"any, DenseMatrix":function(e,r){return c(r,e,f,!0)},"Array, any":function(e,r){return c(i(e),r,f,!1).valueOf()},"any, Array":function(e,r){return c(i(r),e,f,!0).valueOf()}});return f.toTex=void 0,f}},Vf=o.isInteger;var Zf={name:"partitionSelect",factory:function(e,r,t,n){var i=t(Gf);function a(e,r){return-i(e,r)}return n("partitionSelect",{"Array | Matrix, number":function(e,r){return o(e,r,i)},"Array | Matrix, number, string":function(e,r,t){if("asc"===t)return o(e,r,i);if("desc"===t)return o(e,r,a);throw new Error('Compare string must be "asc" or "desc"')},"Array | Matrix, number, function":o});function o(r,t,n){if(!Vf(t)||t<0)throw new Error("k must be a non-negative integer");if(e.isMatrix(r)){if(r.size().length>1)throw new Error("Only one dimensional matrices supported");return s(r.valueOf(),t,n)}if(Array.isArray(r))return s(r,t,n)}function s(e,r,t){if(r>=e.length)throw new Error("k out of bounds");for(var n=0,i=e.length-1;n<i;){for(var a=n,o=i,s=e[Math.floor(Math.random()*(i-n+1))+n];a<o;)if(t(e[a],s)>=0){var u=e[o];e[o]=e[a],e[a]=u,--o}else++a;t(e[a],s)>0&&--a,r<=a?i=a:n=a+1}return e[r]}}},Wf=o.isInteger;var Jf={name:"reshape",factory:function(e,r,t,n){var i=t(Ee),a=n("reshape",{"Matrix, Array":function(e,r){return e.reshape?e.reshape(r):i(J.reshape(e.valueOf(),r))},"Array, Array":function(e,r){return r.forEach(function(e){if(!Wf(e))throw new TypeError("Invalid size for dimension: "+e)}),J.reshape(e,r)}});return a.toTex=void 0,a}},Yf=o.isInteger,Xf=T.format,Qf=i.clone;var Kf={name:"resize",factory:function(e,r,t,n){var i=t(Ee),a=function(t,n,a){if(2!=arguments.length&&3!=arguments.length)throw new d("resize",arguments.length,2,3);if(e.isMatrix(n)&&(n=n.valueOf()),e.isBigNumber(n[0])&&(n=n.map(function(r){return e.isBigNumber(r)?r.toNumber():r})),e.isMatrix(t))return t.resize(n,a,!0);if("string"==typeof t)return function(e,r,t){if(void 0!==t){if("string"!=typeof t||1!==t.length)throw new TypeError("Single character expected as defaultValue")}else t=" ";if(1!==r.length)throw new V(r.length,1);var n=r[0];if("number"!=typeof n||!Yf(n))throw new TypeError("Invalid size, must contain positive integers (size: "+Xf(r)+")");if(e.length>n)return e.substring(0,n);if(e.length<n){for(var i=e,a=0,o=n-e.length;a<o;a++)i+=t;return i}return e}(t,n,a);var o=!Array.isArray(t)&&"Array"!==r.matrix;if(0==n.length){for(;Array.isArray(t);)t=t[0];return Qf(t)}Array.isArray(t)||(t=[t]),t=Qf(t);var s=J.resize(t,n,a);return o?i(s):s};return a.toTex=void 0,a}};var el={name:"size",factory:function(e,r,t,n){var i=t(Ee),a=n("size",{Matrix:function(e){return i(e.size())},Array:J.size,string:function(e){return"Array"===r.matrix?[e.length]:i([e.length])},"number | Complex | BigNumber | Unit | boolean | null":function(e){return"Array"===r.matrix?[]:i([])}});return a.toTex=void 0,a}},rl=function e(r,t){var n,i,a=/(^([+\-]?(?:0|[1-9]\d*)(?:\.\d*)?(?:[eE][+\-]?\d+)?)?$|^0x[0-9a-f]+$|\d+)/gi,o=/(^[ ]*|[ ]*$)/g,s=/(^([\w ]+,?[\w ]+)?[\w ]+,?[\w ]+\d+:\d+(:\d+)?[\w ]?|^\d{1,4}[\/\-]\d{1,4}[\/\-]\d{1,4}|^\w+, \w+ \d+, \d{4})/,u=/^0x[0-9a-f]+$/i,c=/^0/,f=function(r){return e.insensitive&&(""+r).toLowerCase()||""+r},l=f(r).replace(o,"")||"",p=f(t).replace(o,"")||"",m=l.replace(a,"\0$1\0").replace(/\0$/,"").replace(/^\0/,"").split("\0"),h=p.replace(a,"\0$1\0").replace(/\0$/,"").replace(/^\0/,"").split("\0"),d=parseInt(l.match(u),16)||1!==m.length&&l.match(s)&&Date.parse(l),g=parseInt(p.match(u),16)||d&&p.match(s)&&Date.parse(p)||null;if(g){if(d<g)return-1;if(d>g)return 1}for(var v=0,y=Math.max(m.length,h.length);v<y;v++){if(n=!(m[v]||"").match(c)&&parseFloat(m[v])||m[v]||0,i=!(h[v]||"").match(c)&&parseFloat(h[v])||h[v]||0,isNaN(n)!==isNaN(i))return isNaN(n)?1:-1;if(typeof n!=typeof i&&(n+="",i+=""),n<i)return-1;if(n>i)return 1}return 0};var tl={name:"compareNatural",factory:function(e,r,t,n){var i=t(Cr),a=t(Gf),o=a.signatures["boolean,boolean"],s=n("compareNatural",{"any, any":function(r,t){var n,c=i(r),f=i(t);if(!("number"!==c&&"BigNumber"!==c&&"Fraction"!==c||"number"!==f&&"BigNumber"!==f&&"Fraction"!==f))return"0"!==(n=a(r,t)).toString()?n>0?1:-1:rl(c,f);if("Array"===c||"Matrix"===c||"Array"===f||"Matrix"===f)return 0!==(n=function r(t,n){return e.isSparseMatrix(t)&&e.isSparseMatrix(n)?u(t.toJSON().values,n.toJSON().values):e.isSparseMatrix(t)?r(t.toArray(),n):e.isSparseMatrix(n)?r(t,n.toArray()):e.isDenseMatrix(t)?r(t.toJSON().data,n):e.isDenseMatrix(n)?r(t,n.toJSON().data):Array.isArray(t)?Array.isArray(n)?u(t,n):r(t,[n]):r([t],n)}(r,t))?n:rl(c,f);if(c!==f)return rl(c,f);if("Complex"===c)return function(e,r){return e.re>r.re?1:e.re<r.re?-1:e.im>r.im?1:e.im<r.im?-1:0}(r,t);if("Unit"===c)return r.equalBase(t)?s(r.value,t.value):u(r.formatUnits(),t.formatUnits());if("boolean"===c)return o(r,t);if("string"===c)return rl(r,t);if("Object"===c)return function(e,r){var t=Object.keys(e),n=Object.keys(r);t.sort(rl),n.sort(rl);var i=u(t,n);if(0!==i)return i;for(var a=0;a<t.length;a++){var o=s(e[t[a]],r[n[a]]);if(0!==o)return o}return 0}(r,t);if("null"===c)return 0;if("undefined"===c)return 0;throw new TypeError('Unsupported type of value "'+c+'"')}});function u(e,r){for(var t=0,n=Math.min(e.length,r.length);t<n;t++){var i=s(e[t],r[t]);if(0!==i)return i}return e.length>r.length?1:e.length<r.length?-1:0}return s.toTex=void 0,s}},nl=J.size;var il=[fs,xf,qs,bf,Mf,lr,_f,zf,Rf,Ls,kf,Lf,Hf,Zf,Ws,Jf,Kf,el,{name:"sort",factory:function(e,r,t,n){var i=t(Ee),a=t(Gf),o=function(e,r){return-a(e,r)},s=t(tl),u=n("sort",{Array:function(e){return f(e),e.sort(a)},Matrix:function(e){return l(e),i(e.toArray().sort(a),e.storage())},"Array, function":function(e,r){return f(e),e.sort(r)},"Matrix, function":function(e,r){return l(e),i(e.toArray().sort(r),e.storage())},"Array, string":function(e,r){return f(e),e.sort(c(r))},"Matrix, string":function(e,r){return l(e),i(e.toArray().sort(c(r)),e.storage())}});function c(e){if("asc"===e)return a;if("desc"===e)return o;if("natural"===e)return s;throw new Error('String "asc", "desc", or "natural" expected')}function f(e){if(1!==nl(e).length)throw new Error("One dimensional array expected")}function l(e){if(1!==e.size().length)throw new Error("One dimensional matrix expected")}return u.toTex=void 0,u}},{name:"sqrtm",factory:function(e,r,t,n){t(Ee);var i=t(yr),a=t(Pe),o=(t(js),t(hr)),s=t(fu),u=t(sr),c=t(Ls),f=t(el),l=t(Is),p=t(lr),m=n("sqrtm",{"Array | Matrix":function(r){var t=e.isMatrix(r)?r.size():J.size(r);switch(t.length){case 1:if(1==t[0])return s(r);throw new RangeError("Matrix must be square (size: "+T.format(t)+")");case 2:if(t[0]==t[1])return g(r);throw new RangeError("Matrix must be square (size: "+T.format(t)+")")}}}),h=1e3,d=1e-6;function g(e){var r,t=0,n=e,s=p(f(e));do{var m=n;if(n=o(.5,a(m,c(s))),s=o(.5,a(s,c(m))),(r=l(i(u(n,m))))>d&&++t>h)throw new Error("computing square root of matrix: iterative method could not converge")}while(r>d);return n}return m.toTex={1:"{${args[0]}}"+L.operators.pow+"{\\frac{1}{2}}"},m}},{name:"squeeze",factory:function(e,r,t,n){var a=t(Ee),o=n("squeeze",{Array:function(e){return J.squeeze(i.clone(e))},Matrix:function(e){var r=J.squeeze(e.toArray());return Array.isArray(r)?a(r):r},any:function(e){return i.clone(e)}});return o.toTex=void 0,o}},Xa,Ac,wu,Nr];var al={name:"sum",factory:function(e,r,t,n){var i=t(Ae),a=t(Ps),o=n("sum",{"Array | Matrix":function(e){return s(e)},"Array | Matrix, number | BigNumber":function(){throw new Error("sum(A, dim) is not yet supported")},"...":function(e){return s(e)}});return o.toTex=void 0,o;function s(t){var n=void 0;if(_s(t,function(e){try{n=void 0===n?e:i(n,e)}catch(r){throw a(r,"sum",e)}}),void 0===n)switch(r.number){case"number":return 0;case"BigNumber":return new e.BigNumber(0);case"Fraction":return new e.Fraction(0);default:return 0}return n}}};var ol={name:"kldivergence",factory:function(e,r,t,n){var i=t(Ee),a=t(js),o=t(al),s=t(hr),u=t(ec),c=t(vc),f=t(_r);function l(e,r){var t=r.size().length,n=e.size().length;if(t>1)throw new Error("first object must be one dimensional");if(n>1)throw new Error("second object must be one dimensional");if(t!==n)throw new Error("Length of two vectors must be equal");if(0===o(e))throw new Error("Sum of elements in first object must be non zero");if(0===o(r))throw new Error("Sum of elements in second object must be non zero");var i=a(e,o(e)),l=a(r,o(r)),p=o(s(i,c(u(i,l))));return f(p)?p:Number.NaN}return n("kldivergence",{"Array, Array":function(e,r){return l(i(e),i(r))},"Matrix, Array":function(e,r){return l(e,i(r))},"Array, Matrix":function(e,r){return l(i(e),r)},"Matrix, Matrix":function(e,r){return l(e,r)}})}};var sl={name:"multinomial",factory:function(e,r,t,n){var i=t(Pe),a=t(hr),o=t(js),s=t(uf),u=t(pf),c=t(ou);return n("multinomial",{"Array | Matrix":function(e){var r=0,t=1;return _s(e,function(e){if(!u(e)||!c(e))throw new TypeError("Positive integer value expected in function multinomial");r=i(r,e),t=a(t,s(e))}),o(s(r),t)}})}},ul=o.isInteger;function cl(e){return e.isInteger()&&e.gte(0)}var fl={name:"permutations",factory:function(e,r,t,n){var i=n("permutations",{"number | BigNumber":t(uf),"number, number":function(e,r){var t,n;if(!ul(e)||e<0)throw new TypeError("Positive integer value expected in function permutations");if(!ul(r)||r<0)throw new TypeError("Positive integer value expected in function permutations");if(r>e)throw new TypeError("second argument k must be less than or equal to first argument n");for(t=1,n=e-r+1;n<=e;n++)t*=n;return t},"BigNumber, BigNumber":function(r,t){var n,i;if(!cl(r)||!cl(t))throw new TypeError("Positive integer value expected in function permutations");if(t.gt(r))throw new TypeError("second argument k must be less than or equal to first argument n");for(n=new e.BigNumber(1),i=r.minus(t).plus(1);i.lte(r);i=i.plus(1))n=n.times(i);return n}});return i.toTex=void 0,i}},ll=r(function(r){var t=256,n=[],i=void 0===e?window:e,a=Math.pow(t,6),o=Math.pow(2,52),s=2*o,u=t-1,c=Math.random;function f(e,r){for(var t,n=e+"",i=0;i<n.length;)r[u&i]=u&(t^=19*r[u&i])+n.charCodeAt(i++);return l(r)}function l(e){return String.fromCharCode.apply(0,e)}r.exports=function(e,c){if(c&&!0===c.global)return c.global=!1,Math.random=r.exports(e,c),c.global=!0,Math.random;var p=[],m=(f(function e(r,t){var n,i=[],a=(typeof r)[0];if(t&&"o"==a)for(n in r)try{i.push(e(r[n],t-1))}catch(e){}return i.length?i:"s"==a?r:r+"\0"}(c&&c.entropy||!1?[e,l(n)]:0 in arguments?e:function(e){try{return i.crypto.getRandomValues(e=new Uint8Array(t)),l(e)}catch(e){return[+new Date,i,i.navigator&&i.navigator.plugins,i.screen,l(n)]}}(),3),p),new function(e){var r,n=e.length,i=this,a=0,o=i.i=i.j=0,s=i.S=[];n||(e=[n++]);for(;a<t;)s[a]=a++;for(a=0;a<t;a++)s[a]=s[o=u&o+e[a%n]+(r=s[a])],s[o]=r;(i.g=function(e){for(var r,n=0,a=i.i,o=i.j,s=i.S;e--;)r=s[a=u&a+1],n=n*t+s[u&(s[a]=s[o=u&o+r])+(s[o]=r)];return i.i=a,i.j=o,n})(t)}(p));return f(l(m.S),n),function(){for(var e=m.g(6),r=a,n=0;e<o;)e=(e+n)*t,r*=t,n=m.g(1);for(;e>=s;)e/=2,r/=2,n>>>=1;return(e+n)/r}},r.exports.resetGlobal=function(){Math.random=c},f(Math.random(),n)}),pl=(ll.resetGlobal,ll());var ml={factory:function(e,r,t,n,i){var a;function o(e){a=null===e?pl:ll(String(e))}return o(r.randomSeed),i.on("config",function(e,r,t){void 0!==t.randomSeed&&o(e.randomSeed)}),function(){return a()}},math:!0},hl=o.isNumber;var dl={name:"distribution",factory:function(e,r,t,n,i){var a=t(Ee),o=J,s=t(ml);function u(r){if(!c.hasOwnProperty(r))throw new Error("Unknown distribution "+r);var t=Array.prototype.slice.call(arguments,1);return function(r){var t={random:function(r,t,n){var i,o,s;if(arguments.length>3)throw new d("random",arguments.length,0,3);if(1===arguments.length?Ss(r)?i=r:s=r:2===arguments.length?Ss(r)?(i=r,s=t):(o=r,s=t):(i=r,o=t,s=n),void 0!==o&&!hl(o)||void 0!==s&&!hl(s))throw new TypeError("Invalid argument in function random");if(void 0===s&&(s=1),void 0===o&&(o=0),void 0!==i){var c=f(i.valueOf(),o,s,u);return e.isMatrix(i)?a(c):c}return u(o,s)},randomInt:n({"number | Array":function(r){if(Ss(r)){var t=r,n=1,i=f(t.valueOf(),0,n,c);return e.isMatrix(t)?a(i):i}return c(0,n=r)},"number | Array, number":function(r,t){if(Ss(r)){var n=r,i=t,o=0,s=f(n.valueOf(),o,i,c);return e.isMatrix(n)?a(s):s}return c(o=r,i=t)},"Array, number, number":function(e,r,t){var n=f(e.valueOf(),r,t,c);return e&&!0===e.isMatrix?a(n):n}}),pickRandom:n({Array:function(e){return i(e)},"Array, number | Array":function(e,r){var t,n;if(Array.isArray(r))n=r;else{if(!hl(r))throw new TypeError("Invalid argument in function pickRandom");t=r}return i(e,t,n)},"Array, number | Array, Array | number":function(e,r,t){var n,a;if(Array.isArray(r)?(a=r,n=t):(a=t,n=r),!Array.isArray(a)||!hl(n))throw new TypeError("Invalid argument in function pickRandom");return i(e,n,a)}})},i=function(r,t,n){var i=void 0===t;if(i&&(t=1),e.isMatrix(r))r=r.valueOf();else if(!Array.isArray(r))throw new TypeError("Unsupported type of value in function pickRandom");if(o.size(r).length>1)throw new Error("Only one dimensional vectors supported");if(void 0!==n){if(n.length!=r.length)throw new Error("Weights must have the same length as possibles");for(var a=0,u=0,c=n.length;u<c;u++){if(!hl(n[u])||n[u]<0)throw new Error("Weights must be an array of positive numbers");a+=n[u]}}var f=r.length;if(0==f)return[];if(t>=f)return t>1?r:r[0];for(var l,p=[];p.length<t;){if(void 0===n)l=r[Math.floor(s()*f)];else{var m=s()*a;for(u=0,c=r.length;u<c;u++)if((m-=n[u])<0){l=r[u];break}}-1==p.indexOf(l)&&p.push(l)}return i?p[0]:p},u=function(e,t){return e+r()*(t-e)},c=function(e,t){return Math.floor(e+r()*(t-e))},f=function(e,r,t,n){var i=[];if((e=e.slice(0)).length>1)for(var a=0,o=e.shift();a<o;a++)i.push(f(e,r,t,n));else for(a=0,o=e.shift();a<o;a++)i.push(n(r,t));return i};return t}(c[r].apply(this,t))}var c={uniform:function(){return s},normal:function(){return function(){for(var e,r,t=-1;t<0||t>1;)e=s(),r=s(),t=1/6*Math.pow(-2*Math.log(e),.5)*Math.cos(2*Math.PI*r)+.5;return t}}};return u.toTex=void 0,u}};var gl=[lf,uf,sf,ol,sl,fl,{name:"pickRandom",factory:function(e,r,t,n){var i=t(dl)("uniform").pickRandom;return i.toTex=void 0,i}},{name:"random",factory:function(e,r,t,n){var i=t(dl)("uniform").random;return i.toTex=void 0,i}},{name:"randomInt",factory:function(e,r,t,n){var i=t(dl)("uniform").randomInt;return i.toTex=void 0,i}}];var vl={name:"deepEqual",factory:function(e,r,t,n){var i=t(Sr),a=n("deepEqual",{"any, any":function(e,r){return function e(r,t){if(Array.isArray(r)){if(Array.isArray(t)){var n=r.length;if(n!==t.length)return!1;for(var a=0;a<n;a++)if(!e(r[a],t[a]))return!1;return!0}return!1}return!Array.isArray(t)&&i(r,t)}(e.valueOf(),r.valueOf())}});return a.toTex=void 0,a}},yl=o.nearlyEqual;var xl=[Gf,tl,vl,Sr,Fe,Tu,qe,{name:"smallerEq",factory:function(e,r,t,n){var i=t(Ee),a=t(Re),o=t(Ue),s=t(ke),u=t(Te),c=t(ze),f=L,l=n("smallerEq",{"boolean, boolean":function(e,r){return e<=r},"number, number":function(e,t){return e<=t||yl(e,t,r.epsilon)},"BigNumber, BigNumber":function(e,t){return e.lte(t)||le(e,t,r.epsilon)},"Fraction, Fraction":function(e,r){return 1!==e.compare(r)},"Complex, Complex":function(){throw new TypeError("No ordering relation is defined for complex numbers")},"Unit, Unit":function(e,r){if(!e.equalBase(r))throw new Error("Cannot compare units with different base");return l(e.value,r.value)},"SparseMatrix, SparseMatrix":function(e,r){return o(e,r,l)},"SparseMatrix, DenseMatrix":function(e,r){return a(r,e,l,!0)},"DenseMatrix, SparseMatrix":function(e,r){return a(e,r,l,!1)},"DenseMatrix, DenseMatrix":function(e,r){return u(e,r,l)},"Array, Array":function(e,r){return l(i(e),i(r)).valueOf()},"Array, Matrix":function(e,r){return l(i(e),r)},"Matrix, Array":function(e,r){return l(e,i(r))},"SparseMatrix, any":function(e,r){return s(e,r,l,!1)},"DenseMatrix, any":function(e,r){return c(e,r,l,!1)},"any, SparseMatrix":function(e,r){return s(r,e,l,!0)},"any, DenseMatrix":function(e,r){return c(r,e,l,!0)},"Array, any":function(e,r){return c(i(e),r,l,!1).valueOf()},"any, Array":function(e,r){return c(i(r),e,l,!0).valueOf()}});return l.toTex={2:"\\left(${args[0]}"+f.operators.smallerEq+"${args[1]}\\right)"},l}},uu],wl=J.flatten;var bl={name:"setCartesian",factory:function(e,r,t,n){var i=t(Ye),a=t(fe),o=t(el),s=t(Xa),u=t(tl);return n("setCartesian",{"Array | Matrix, Array | Matrix":function(e,r){if(0===s(o(e),new i(0))||0===s(o(r),new i(0)))var t=[];else for(var n=wl(Array.isArray(e)?e:e.toArray()).sort(u),c=wl(Array.isArray(r)?r:r.toArray()).sort(u),f=(t=[],0);f<n.length;f++)for(var l=0;l<c.length;l++)t.push([n[f],c[l]]);return Array.isArray(e)&&Array.isArray(r)?t:new a(t)}})}},Nl=J.flatten,Ml=J.identify,El=J.generalize;var Al={name:"setDifference",factory:function(e,r,t,n){var i=t(Ye),a=t(fe),o=t(el),s=t(Xa),u=t(tl);return n("setDifference",{"Array | Matrix, Array | Matrix":function(e,r){if(0===s(o(e),new i(0)))var t=[];else{if(0===s(o(r),new i(0)))return Nl(e.toArray());for(var n,c=Ml(Nl(Array.isArray(e)?e:e.toArray()).sort(u)),f=Ml(Nl(Array.isArray(r)?r:r.toArray()).sort(u)),l=(t=[],0);l<c.length;l++){n=!1;for(var p=0;p<f.length;p++)if(0===u(c[l].value,f[p].value)&&c[l].identifier===f[p].identifier){n=!0;break}n||t.push(c[l])}}return Array.isArray(e)&&Array.isArray(r)?El(t):new a(El(t))}})}},Ol=J.flatten;var Sl={name:"setDistinct",factory:function(e,r,t,n){var i=t(Ye),a=t(fe),o=t(el),s=t(Xa),u=t(tl);return n("setDistinct",{"Array | Matrix":function(e){if(0===s(o(e),new i(0)))var r=[];else{var t=Ol(Array.isArray(e)?e:e.toArray()).sort(u);(r=[]).push(t[0]);for(var n=1;n<t.length;n++)0!==u(t[n],t[n-1])&&r.push(t[n])}return Array.isArray(e)?r:new a(r)}})}},_l=J.flatten,Tl=J.identify,Cl=J.generalize;var zl={name:"setIntersect",factory:function(e,r,t,n){var i=t(Ye),a=t(fe),o=t(el),s=t(Xa),u=t(tl);return n("setIntersect",{"Array | Matrix, Array | Matrix":function(e,r){if(0===s(o(e),new i(0))||0===s(o(r),new i(0)))var t=[];else for(var n=Tl(_l(Array.isArray(e)?e:e.toArray()).sort(u)),c=Tl(_l(Array.isArray(r)?r:r.toArray()).sort(u)),f=(t=[],0);f<n.length;f++)for(var l=0;l<c.length;l++)if(0===u(n[f].value,c[l].value)&&n[f].identifier===c[l].identifier){t.push(n[f]);break}return Array.isArray(e)&&Array.isArray(r)?Cl(t):new a(Cl(t))}})}},Bl=J.flatten,Pl=J.identify;var Il={name:"setIsSubset",factory:function(e,r,t,n){var i=t(Ye),a=t(el),o=t(Xa),s=t(tl);return n("setIsSubset",{"Array | Matrix, Array | Matrix":function(e,r){if(0===o(a(e),new i(0)))return!0;if(0===o(a(r),new i(0)))return!1;for(var t,n=Pl(Bl(Array.isArray(e)?e:e.toArray()).sort(s)),u=Pl(Bl(Array.isArray(r)?r:r.toArray()).sort(s)),c=0;c<n.length;c++){t=!1;for(var f=0;f<u.length;f++)if(0===s(n[c].value,u[f].value)&&n[c].identifier===u[f].identifier){t=!0;break}if(!1===t)return!1}return!0}})}},Rl=J.flatten;var Ul={name:"setMultiplicity",factory:function(e,r,t,n){var i=t(tl),a=t(Ye),o=t(el),s=t(Xa);return n("setMultiplicity",{"number | BigNumber | Fraction | Complex, Array | Matrix":function(e,r){if(0===s(o(r),new a(0)))return 0;for(var t=Rl(Array.isArray(r)?r:r.toArray()),n=0,u=0;u<t.length;u++)0===i(t[u],e)&&n++;return n}})}},kl=J.flatten;var Dl={name:"setPowerset",factory:function(e,r,t,n){var i=t(Ye),a=t(el),o=t(Xa),s=t(tl);return n("setPowerset",{"Array | Matrix":function(e){if(0===o(a(e),new i(0)))return[];for(var r=kl(Array.isArray(e)?e:e.toArray()).sort(s),t=[],n=0;n.toString(2).length<=r.length;)t.push(u(r,n.toString(2).split("").reverse())),n++;return function(e){for(var r=[],t=e.length-1;t>0;t--)for(var n=0;n<t;n++)e[n].length>e[n+1].length&&(r=e[n],e[n]=e[n+1],e[n+1]=r);return e}(t)}});function u(e,r){for(var t=[],n=0;n<r.length;n++)"1"===r[n]&&t.push(e[n]);return t}}},ql=J.flatten;var Ll={name:"setSize",factory:function(e,r,t,n){var i=t(tl);return n("setSize",{"Array | Matrix":function(e){return Array.isArray(e)?ql(e).length:ql(e.toArray()).length},"Array | Matrix, boolean":function(e,r){if(!1===r||0===e.length)return Array.isArray(e)?ql(e).length:ql(e.toArray()).length;for(var t=ql(Array.isArray(e)?e:e.toArray()).sort(i),n=1,a=1;a<t.length;a++)0!==i(t[a],t[a-1])&&n++;return n}})}},Fl=J.flatten;var jl={name:"setSymDifference",factory:function(e,r,t,n){var i=t(Ye),a=t(fs),o=t(el),s=t(Xa),u=t(Al);return n("setSymDifference",{"Array | Matrix, Array | Matrix":function(e,r){if(0===s(o(e),new i(0)))return Fl(r);if(0===s(o(r),new i(0)))return Fl(e);var t=Fl(e),n=Fl(r);return a(u(t,n),u(n,t))}})}},Hl=J.flatten;var $l=[bl,Al,Sl,zl,Il,Ul,Dl,Ll,jl,{name:"setUnion",factory:function(e,r,t,n){var i=t(Ye),a=t(fs),o=t(el),s=t(Xa),u=t(zl),c=t(jl);return n("setUnion",{"Array | Matrix, Array | Matrix":function(e,r){if(0===s(o(e),new i(0)))return Hl(r);if(0===s(o(r),new i(0)))return Hl(e);var t=Hl(e),n=Hl(r);return a(c(t,n),u(t,n))}})}}],Gl=o.sign;var Vl=.46875,Zl=.5641895835477563,Wl=[[3.1611237438705655,113.86415415105016,377.485237685302,3209.3775891384694,.18577770618460315],[.5641884969886701,8.883149794388377,66.11919063714163,298.6351381974001,881.952221241769,1712.0476126340707,2051.0783778260716,1230.3393547979972,2.1531153547440383e-8],[.30532663496123236,.36034489994980445,.12578172611122926,.016083785148742275,.0006587491615298378,.016315387137302097]],Jl=[[23.601290952344122,244.02463793444417,1282.6165260773723,2844.236833439171],[15.744926110709835,117.6939508913125,537.1811018620099,1621.3895745666903,3290.7992357334597,4362.619090143247,3439.3676741437216,1230.3393548037495],[2.568520192289822,1.8729528499234604,.5279051029514285,.06051834131244132,.0023352049762686918]],Yl=Math.pow(2,53),Xl=[{name:"erf",factory:function(e,r,t,n){var i=n("erf",{number:function(e){var r=Math.abs(e);return r>=Yl?Gl(e):r<=Vl?Gl(e)*function(e){var r,t=e*e,n=Wl[0][4]*t,i=t;for(r=0;r<3;r+=1)n=(n+Wl[0][r])*t,i=(i+Jl[0][r])*t;return e*(n+Wl[0][3])/(i+Jl[0][3])}(r):r<=4?Gl(e)*(1-function(e){var r,t=Wl[1][8]*e,n=e;for(r=0;r<7;r+=1)t=(t+Wl[1][r])*e,n=(n+Jl[1][r])*e;var i=(t+Wl[1][7])/(n+Jl[1][7]),a=parseInt(16*e)/16,o=(e-a)*(e+a);return Math.exp(-a*a)*Math.exp(-o)*i}(r)):Gl(e)*(1-function(e){var r,t=1/(e*e),n=Wl[2][5]*t,i=t;for(r=0;r<4;r+=1)n=(n+Wl[2][r])*t,i=(i+Jl[2][r])*t;var a=t*(n+Wl[2][4])/(i+Jl[2][4]);a=(Zl-a)/e,t=parseInt(16*e)/16;var o=(e-t)*(e+t);return Math.exp(-t*t)*Math.exp(-o)*a}(r))},BigNumber:function(r){return new e.BigNumber(i(r.toNumber()))},"Array | Matrix":function(e){return A(e,i)}});return i.toTex={1:"erf\\left(${args[0]}\\right)"},i}}],Ql=J.flatten;var Kl={name:"median",factory:function(e,r,t,n){var i=t(Ae),a=t(cr),o=t(Gf),s=t(Zf),u=t(Ps),c=n("median",{"Array | Matrix":f,"Array | Matrix, number | BigNumber":function(e,r){throw new Error("median(A, dim) is not yet supported")},"...":function(e){if(Bs(e))throw new TypeError("Scalar values expected in function median");return f(e)}});function f(e){try{var r=(e=Ql(e.valueOf())).length;if(0==r)throw new Error("Cannot calculate median of an empty array");if(r%2==0){for(var t=r/2-1,n=s(e,t+1),i=e[t],a=0;a<t;++a)o(e[a],i)>0&&(i=e[a]);return p(i,n)}var c=s(e,(r-1)/2);return l(c)}catch(e){throw u(e,"median")}}var l=n({"number | BigNumber | Complex | Unit":function(e){return e}}),p=n({"number | BigNumber | Complex | Unit, number | BigNumber | Complex | Unit":function(e,r){return a(i(e,r),2)}});return c.toTex=void 0,c}},ep=J.flatten;var rp={name:"mad",factory:function(e,r,t,n){var i=t(yr),a=t(Lf),o=t(Kl),s=t(sr),u=t(Ps),c=n("mad",{"Array | Matrix":f,"...":function(e){return f(e)}});return c.toTex=void 0,c;function f(e){if(0===(e=ep(e.valueOf())).length)throw new Error("Cannot calculate median absolute deviation (mad) of an empty array");try{var r=o(e);return o(a(e,function(e){return i(s(e,r))}))}catch(e){throw e instanceof TypeError&&-1!==e.message.indexOf("median")?new TypeError(e.message.replace("median","mad")):u(e,"mad")}}}},tp=J.flatten;var np={name:"mode",factory:function(e,r,t,n){return n("mode",{"Array | Matrix":i,"...":function(e){return i(e)}});function i(e){if(0==(e=tp(e.valueOf())).length)throw new Error("Cannot calculate mode of an empty array");var r={},t=[],n=0;for(var i in e)e[i]in r||(r[e[i]]=0),r[e[i]]++,r[e[i]]==n?t.push(e[i]):r[e[i]]>n&&(n=r[e[i]],t=[e[i]]);return t}}};var ip={name:"prod",factory:function(e,r,t,n){var i=t(ur),a=t(Ps),o=n("prod",{"Array | Matrix":s,"Array | Matrix, number | BigNumber":function(e,r){throw new Error("prod(A, dim) is not yet supported")},"...":function(e){return s(e)}});return o.toTex=void 0,o;function s(e){var r=void 0;if(_s(e,function(e){try{r=void 0===r?e:i(r,e)}catch(r){throw a(r,"prod",e)}}),void 0===r)throw new Error("Cannot calculate prod of an empty array");return r}}},ap=o.isInteger,op=o.isNumber,sp=J.flatten;var up="unbiased";var cp={name:"var",factory:function(e,r,t,n){var i=t(Ae),a=t(sr),o=t(ur),s=t(cr),u=t(Ps),c=n("variance",{"Array | Matrix":function(e){return f(e,up)},"Array | Matrix, string":f,"...":function(e){return f(e,up)}});return c.toTex="\\mathrm{Var}\\left(${args}\\right)",c;function f(r,t){var n=0,c=0;if(0==r.length)throw new SyntaxError("Function var requires one or more parameters (0 provided)");if(_s(r,function(e){try{n=i(n,e),c++}catch(r){throw u(r,"var",e)}}),0===c)throw new Error("Cannot calculate var of an empty array");var f=s(n,c);switch(n=0,_s(r,function(e){var r=a(e,f);n=i(n,o(r,r))}),t){case"uncorrected":return s(n,c);case"biased":return s(n,c+1);case"unbiased":var l=e.isBigNumber(n)?new e.BigNumber(0):0;return 1==c?l:s(n,c-1);default:throw new Error('Unknown normalization "'+t+'". Choose "unbiased" (default), "uncorrected", or "biased".')}}}};var fp=[rp,Is,$s,Kl,Vs,np,ip,{name:"quantileSeq",factory:function(e,r,t,n){var i=t(Pe),a=t(hr),o=t(Zf),s=t(Gf);function u(e,r,t){var n=sp(e),u=n.length;if(0===u)throw new Error("Cannot calculate quantile of an empty sequence");if(op(r)){var f;if(0==(g=(f=r*(u-1))%1)){var l=t?n[f]:o(n,f);return c(l),l}var p=Math.floor(f);if(t)h=n[p],d=n[p+1];else{d=o(n,p+1),h=n[p];for(var m=0;m<p;++m)s(n[m],h)>0&&(h=n[m])}return c(h),c(d),i(a(h,1-g),a(d,g))}if((f=r.times(u-1)).isInteger())return f=f.toNumber(),l=t?n[f]:o(n,f),c(l),l;p=f.floor();var h,d,g=f.minus(p),v=p.toNumber();if(t)h=n[v],d=n[v+1];else for(d=o(n,v+1),h=n[v],m=0;m<v;++m)s(n[m],h)>0&&(h=n[m]);c(h),c(d);var y=new g.constructor(1);return i(a(h,y.minus(g)),a(d,g))}var c=n({"number | BigNumber | Unit":function(e){return e}});return function(r,t,n){var i,a,o;if(arguments.length<2||arguments.length>3)throw new SyntaxError("Function quantileSeq requires two or three parameters");if(Ss(r)){if("boolean"==typeof(n=n||!1)){if(a=r.valueOf(),op(t)){if(t<0)throw new Error("N/prob must be non-negative");if(t<=1)return u(a,t,n);if(t>1){if(!ap(t))throw new Error("N must be a positive integer");var s=t+1;i=new Array(t);for(var c=0;c<t;)i[c]=u(a,++c/s,n);return i}}if(e.isBigNumber(t)){if(t.isNegative())throw new Error("N/prob must be non-negative");if(o=new t.constructor(1),t.lte(o))return u(a,t,n);if(t.gt(o)){if(!t.isInteger())throw new Error("N must be a positive integer");var f=t.toNumber();if(f>4294967295)throw new Error("N must be less than or equal to 2^32-1, as that is the maximum length of an Array");for(s=new e.BigNumber(f+1),i=new Array(f),c=0;c<f;)i[c]=u(a,new e.BigNumber(++c).div(s),n);return i}}if(Array.isArray(t)){for(i=new Array(t.length),c=0;c<i.length;++c){var l=t[c];if(op(l)){if(l<0||l>1)throw new Error("Probability must be between 0 and 1, inclusive")}else{if(!e.isBigNumber(l))throw new TypeError("Unexpected type of argument in function quantileSeq");if(o=new l.constructor(1),l.isNegative()||l.gt(o))throw new Error("Probability must be between 0 and 1, inclusive")}i[c]=u(a,l,n)}return i}throw new TypeError("Unexpected type of argument in function quantileSeq")}throw new TypeError("Unexpected type of argument in function quantileSeq")}throw new TypeError("Unexpected type of argument in function quantileSeq")}}},{name:"std",factory:function(e,r,t,n){var i=t(fu),a=t(cp),o=n("std",{"Array | Matrix":s,"Array | Matrix, string":s,"...":function(e){return s(e)}});return o.toTex=void 0,o;function s(e,r){if(0==e.length)throw new SyntaxError("Function std requires one or more parameters (0 provided)");try{return i(a.apply(null,arguments))}catch(e){throw e instanceof TypeError&&-1!==e.message.indexOf(" var")?new TypeError(e.message.replace(" var"," std")):e}}}},al,cp],lp=T.isString,pp=T.format;function mp(e,r,t){return e.replace(/\$([\w\.]+)/g,function(e,n){for(var i=n.split("."),a=r[i.shift()];i.length&&void 0!==a;){var o=i.shift();a=o?a[o]:a+"."}return void 0!==a?lp(a)?a:pp(a,t):e})}var hp=[Tr,{name:"print",factory:function(e,r,t,n){var i=n("print",{"string, Object | Array":mp,"string, Object | Array, number | Object":mp});return i.toTex=void 0,i}}];var dp={name:"acos",factory:function(e,r,t,n){var i=n("acos",{number:function(t){return t>=-1&&t<=1||r.predictable?Math.acos(t):new e.Complex(t,0).acos()},Complex:function(e){return e.acos()},BigNumber:function(e){return e.acos()},"Array | Matrix":function(e){return A(e,i)}});return i.toTex={1:"\\cos^{-1}\\left(${args[0]}\\right)"},i}};var gp=Math.acosh||function(e){return Math.log(Math.sqrt(e*e-1)+e)},vp={name:"acosh",factory:function(e,r,t,n){var i=n("acosh",{number:function(t){return t>=1||r.predictable?gp(t):t<=-1?new e.Complex(Math.log(Math.sqrt(t*t-1)-t),Math.PI):new e.Complex(t,0).acosh()},Complex:function(e){return e.acosh()},BigNumber:function(e){return e.acosh()},"Array | Matrix":function(e){return A(e,i)}});return i.toTex={1:"\\cosh^{-1}\\left(${args[0]}\\right)"},i}};var yp={name:"acot",factory:function(e,r,t,n){var i=n("acot",{number:function(e){return Math.atan(1/e)},Complex:function(e){return e.acot()},BigNumber:function(r){return new e.BigNumber(1).div(r).atan()},"Array | Matrix":function(e){return A(e,i)}});return i.toTex={1:"\\cot^{-1}\\left(${args[0]}\\right)"},i}};var xp={name:"acoth",factory:function(e,r,t,n){var i=n("acoth",{number:function(t){return t>=1||t<=-1||r.predictable?isFinite(t)?(Math.log((t+1)/t)+Math.log(t/(t-1)))/2:0:new e.Complex(t,0).acoth()},Complex:function(e){return e.acoth()},BigNumber:function(r){return new e.BigNumber(1).div(r).atanh()},"Array | Matrix":function(e){return A(e,i)}});return i.toTex={1:"\\coth^{-1}\\left(${args[0]}\\right)"},i}};var wp={name:"acsc",factory:function(e,r,t,n){var i=n("acsc",{number:function(t){return t<=-1||t>=1||r.predictable?Math.asin(1/t):new e.Complex(t,0).acsc()},Complex:function(e){return e.acsc()},BigNumber:function(r){return new e.BigNumber(1).div(r).asin()},"Array | Matrix":function(e){return A(e,i)}});return i.toTex={1:"\\csc^{-1}\\left(${args[0]}\\right)"},i}};var bp={name:"acsch",factory:function(e,r,t,n){var i=n("acsch",{number:function(e){return e=1/e,Math.log(e+Math.sqrt(e*e+1))},Complex:function(e){return e.acsch()},BigNumber:function(r){return new e.BigNumber(1).div(r).asinh()},"Array | Matrix":function(e){return A(e,i)}});return i.toTex={1:"\\mathrm{csch}^{-1}\\left(${args[0]}\\right)"},i}};var Np={name:"asec",factory:function(e,r,t,n){var i=n("asec",{number:function(t){return t<=-1||t>=1||r.predictable?Math.acos(1/t):new e.Complex(t,0).asec()},Complex:function(e){return e.asec()},BigNumber:function(r){return new e.BigNumber(1).div(r).acos()},"Array | Matrix":function(e){return A(e,i)}});return i.toTex={1:"\\sec^{-1}\\left(${args[0]}\\right)"},i}};var Mp={name:"asech",factory:function(e,r,t,n){n.find(t(vp),["Complex"]);var i=n("asech",{number:function(t){if(t<=1&&t>=-1||r.predictable){t=1/t;var n=Math.sqrt(t*t-1);return t>0||r.predictable?Math.log(n+t):new e.Complex(Math.log(n-t),Math.PI)}return new e.Complex(t,0).asech()},Complex:function(e){return e.asech()},BigNumber:function(r){return new e.BigNumber(1).div(r).acosh()},"Array | Matrix":function(e){return A(e,i)}});return i.toTex={1:"\\mathrm{sech}^{-1}\\left(${args[0]}\\right)"},i}};var Ep={name:"asin",factory:function(e,r,t,n){var i=n("asin",{number:function(t){return t>=-1&&t<=1||r.predictable?Math.asin(t):new e.Complex(t,0).asin()},Complex:function(e){return e.asin()},BigNumber:function(e){return e.asin()},"Array | Matrix":function(e){return A(e,i,!0)}});return i.toTex={1:"\\sin^{-1}\\left(${args[0]}\\right)"},i}};var Ap={name:"asinh",factory:function(e,r,t,n){var i=n("asinh",{number:Math.asinh||function(e){return Math.log(Math.sqrt(e*e+1)+e)},Complex:function(e){return e.asinh()},BigNumber:function(e){return e.asinh()},"Array | Matrix":function(e){return A(e,i,!0)}});return i.toTex={1:"\\sinh^{-1}\\left(${args[0]}\\right)"},i}};var Op={name:"atan",factory:function(e,r,t,n){var i=n("atan",{number:function(e){return Math.atan(e)},Complex:function(e){return e.atan()},BigNumber:function(e){return e.atan()},"Array | Matrix":function(e){return A(e,i,!0)}});return i.toTex={1:"\\tan^{-1}\\left(${args[0]}\\right)"},i}};var Sp={name:"atan2",factory:function(e,r,t,n){var i=t(Ee),a=t(Ku),o=t(Re),s=t(rc),u=t(pr),c=t(ke),f=t(Te),l=t(ze),p=n("atan2",{"number, number":Math.atan2,"BigNumber, BigNumber":function(r,t){return e.BigNumber.atan2(r,t)},"SparseMatrix, SparseMatrix":function(e,r){return s(e,r,p,!1)},"SparseMatrix, DenseMatrix":function(e,r){return a(r,e,p,!0)},"DenseMatrix, SparseMatrix":function(e,r){return o(e,r,p,!1)},"DenseMatrix, DenseMatrix":function(e,r){return f(e,r,p)},"Array, Array":function(e,r){return p(i(e),i(r)).valueOf()},"Array, Matrix":function(e,r){return p(i(e),r)},"Matrix, Array":function(e,r){return p(e,i(r))},"SparseMatrix, number | BigNumber":function(e,r){return u(e,r,p,!1)},"DenseMatrix, number | BigNumber":function(e,r){return l(e,r,p,!1)},"number | BigNumber, SparseMatrix":function(e,r){return c(r,e,p,!0)},"number | BigNumber, DenseMatrix":function(e,r){return l(r,e,p,!0)},"Array, number | BigNumber":function(e,r){return l(i(e),r,p,!1).valueOf()},"number | BigNumber, Array":function(e,r){return l(i(r),e,p,!0).valueOf()}});return p.toTex={2:"\\mathrm{atan2}\\left(${args}\\right)"},p}};var _p=Math.atanh||function(e){return Math.log((1+e)/(1-e))/2},Tp={name:"atanh",factory:function(e,r,t,n){var i=n("atanh",{number:function(t){return t<=1&&t>=-1||r.predictable?_p(t):new e.Complex(t,0).atanh()},Complex:function(e){return e.atanh()},BigNumber:function(e){return e.atanh()},"Array | Matrix":function(e){return A(e,i,!0)}});return i.toTex={1:"\\tanh^{-1}\\left(${args[0]}\\right)"},i}};var Cp={name:"cos",factory:function(e,r,t,n){var i=n("cos",{number:Math.cos,Complex:function(e){return e.cos()},BigNumber:function(e){return e.cos()},Unit:function(r){if(!r.hasBase(e.Unit.BASE_UNITS.ANGLE))throw new TypeError("Unit in function cos is no angle");return i(r.value)},"Array | Matrix":function(e){return A(e,i)}});return i.toTex={1:"\\cos\\left(${args[0]}\\right)"},i}};var zp=Math.cosh||function(e){return(Math.exp(e)+Math.exp(-e))/2},Bp={name:"cosh",factory:function(e,r,t,n){var i=n("cosh",{number:zp,Complex:function(e){return e.cosh()},BigNumber:function(e){return e.cosh()},Unit:function(r){if(!r.hasBase(e.Unit.BASE_UNITS.ANGLE))throw new TypeError("Unit in function cosh is no angle");return i(r.value)},"Array | Matrix":function(e){return A(e,i)}});return i.toTex={1:"\\cosh\\left(${args[0]}\\right)"},i}};var Pp={name:"cot",factory:function(e,r,t,n){var i=n("cot",{number:function(e){return 1/Math.tan(e)},Complex:function(e){return e.cot()},BigNumber:function(r){return new e.BigNumber(1).div(r.tan())},Unit:function(r){if(!r.hasBase(e.Unit.BASE_UNITS.ANGLE))throw new TypeError("Unit in function cot is no angle");return i(r.value)},"Array | Matrix":function(e){return A(e,i)}});return i.toTex={1:"\\cot\\left(${args[0]}\\right)"},i}};function Ip(e){var r=Math.exp(2*e);return(r+1)/(r-1)}var Rp={name:"coth",factory:function(e,r,t,n){var i=n("coth",{number:Ip,Complex:function(e){return e.coth()},BigNumber:function(r){return new e.BigNumber(1).div(r.tanh())},Unit:function(r){if(!r.hasBase(e.Unit.BASE_UNITS.ANGLE))throw new TypeError("Unit in function coth is no angle");return i(r.value)},"Array | Matrix":function(e){return A(e,i)}});return i.toTex={1:"\\coth\\left(${args[0]}\\right)"},i}};var Up={name:"csc",factory:function(e,r,t,n){var i=n("csc",{number:function(e){return 1/Math.sin(e)},Complex:function(e){return e.csc()},BigNumber:function(r){return new e.BigNumber(1).div(r.sin())},Unit:function(r){if(!r.hasBase(e.Unit.BASE_UNITS.ANGLE))throw new TypeError("Unit in function csc is no angle");return i(r.value)},"Array | Matrix":function(e){return A(e,i)}});return i.toTex={1:"\\csc\\left(${args[0]}\\right)"},i}},kp=o.sign;function Dp(e){return 0==e?Number.POSITIVE_INFINITY:Math.abs(2/(Math.exp(e)-Math.exp(-e)))*kp(e)}var qp={name:"csch",factory:function(e,r,t,n){var i=n("csch",{number:Dp,Complex:function(e){return e.csch()},BigNumber:function(r){return new e.BigNumber(1).div(r.sinh())},Unit:function(r){if(!r.hasBase(e.Unit.BASE_UNITS.ANGLE))throw new TypeError("Unit in function csch is no angle");return i(r.value)},"Array | Matrix":function(e){return A(e,i)}});return i.toTex={1:"\\mathrm{csch}\\left(${args[0]}\\right)"},i}};var Lp={name:"sec",factory:function(e,r,t,n){var i=n("sec",{number:function(e){return 1/Math.cos(e)},Complex:function(e){return e.sec()},BigNumber:function(r){return new e.BigNumber(1).div(r.cos())},Unit:function(r){if(!r.hasBase(e.Unit.BASE_UNITS.ANGLE))throw new TypeError("Unit in function sec is no angle");return i(r.value)},"Array | Matrix":function(e){return A(e,i)}});return i.toTex={1:"\\sec\\left(${args[0]}\\right)"},i}};function Fp(e){return 2/(Math.exp(e)+Math.exp(-e))}var jp={name:"sech",factory:function(e,r,t,n){var i=n("sech",{number:Fp,Complex:function(e){return e.sech()},BigNumber:function(r){return new e.BigNumber(1).div(r.cosh())},Unit:function(r){if(!r.hasBase(e.Unit.BASE_UNITS.ANGLE))throw new TypeError("Unit in function sech is no angle");return i(r.value)},"Array | Matrix":function(e){return A(e,i)}});return i.toTex={1:"\\mathrm{sech}\\left(${args[0]}\\right)"},i}};var Hp={name:"sin",factory:function(e,r,t,n){var i=n("sin",{number:Math.sin,Complex:function(e){return e.sin()},BigNumber:function(e){return e.sin()},Unit:function(r){if(!r.hasBase(e.Unit.BASE_UNITS.ANGLE))throw new TypeError("Unit in function sin is no angle");return i(r.value)},"Array | Matrix":function(e){return A(e,i,!0)}});return i.toTex={1:"\\sin\\left(${args[0]}\\right)"},i}};var $p=Math.sinh||function(e){return(Math.exp(e)-Math.exp(-e))/2},Gp={name:"sinh",factory:function(e,r,t,n){var i=n("sinh",{number:$p,Complex:function(e){return e.sinh()},BigNumber:function(e){return e.sinh()},Unit:function(r){if(!r.hasBase(e.Unit.BASE_UNITS.ANGLE))throw new TypeError("Unit in function sinh is no angle");return i(r.value)},"Array | Matrix":function(e){return A(e,i,!0)}});return i.toTex={1:"\\sinh\\left(${args[0]}\\right)"},i}};var Vp={name:"tan",factory:function(e,r,t,n){var i=n("tan",{number:Math.tan,Complex:function(e){return e.tan()},BigNumber:function(e){return e.tan()},Unit:function(r){if(!r.hasBase(e.Unit.BASE_UNITS.ANGLE))throw new TypeError("Unit in function tan is no angle");return i(r.value)},"Array | Matrix":function(e){return A(e,i,!0)}});return i.toTex={1:"\\tan\\left(${args[0]}\\right)"},i}};var Zp=Math.tanh||function(e){var r=Math.exp(2*e);return(r-1)/(r+1)};var Wp=[Lr,$r,Ys,[Zu,Pc,tf,hf,df,gf,yf,il,gl,xl,$l,Xl,fp,hp,[dp,vp,yp,xp,wp,bp,Np,Mp,Ep,Ap,Op,Sp,Tp,Cp,Bp,Pp,Rp,Up,qp,Lp,jp,Hp,Gp,Vp,{name:"tanh",factory:function(e,r,t,n){var i=n("tanh",{number:Zp,Complex:function(e){return e.tanh()},BigNumber:function(e){return e.tanh()},Unit:function(r){if(!r.hasBase(e.Unit.BASE_UNITS.ANGLE))throw new TypeError("Unit in function tanh is no angle");return i(r.value)},"Array | Matrix":function(e){return A(e,i,!0)}});return i.toTex={1:"\\tanh\\left(${args[0]}\\right)"},i}}],[{name:"to",factory:function(e,r,t,n){var i=L,a=t(Ee),o=t(Te),s=t(ze),u=n("to",{"Unit, Unit | string":function(e,r){return e.to(r)},"Matrix, Matrix":function(e,r){return o(e,r,u)},"Array, Array":function(e,r){return u(a(e),a(r)).valueOf()},"Array, Matrix":function(e,r){return u(a(e),r)},"Matrix, Array":function(e,r){return u(e,a(r))},"Matrix, any":function(e,r){return s(e,r,u,!1)},"any, Matrix":function(e,r){return s(r,e,u,!0)},"Array, any":function(e,r){return s(a(e),r,u,!1).valueOf()},"any, Array":function(e,r){return s(a(r),e,u,!0).valueOf()}});return u.toTex={2:"\\left(${args[0]}"+i.operators.to+"${args[1]}\\right)"},u}}],[au,pf,Wu,_r,ou,{name:"isPrime",factory:function(e,r,t,n){var i=n("isPrime",{number:function(e){if(e<2)return!1;if(2==e)return!0;if(e%2==0)return!1;for(var r=3;r*r<=e;r+=2)if(e%r==0)return!1;return!0},BigNumber:function(r){if(r.lt(2))return!1;if(r.equals(2))return!0;if(r.mod(2).isZero())return!1;for(var t=e.BigNumber(3);t.times(t).lte(r);t=t.plus(1))if(r.mod(t).isZero())return!1;return!0},"Array | Matrix":function(e){return A(e,i)}});return i}},Ks,{name:"isNaN",factory:function(e,r,t,n){return n("isNaN",{number:function(e){return Number.isNaN(e)},BigNumber:function(e){return e.isNaN()},Fraction:function(e){return!1},Complex:function(e){return e.isNaN()},Unit:function(e){return Number.isNaN(e.value)},"Array | Matrix":function(e){return A(e,Number.isNaN)}})}},Cr]],[{name:"reviver",path:"json",factory:function(e,r,t,n,i){return function(r,t){var n=e[t&&t.mathjs]||i.expression&&i.expression.node[t&&t.mathjs];return n&&"function"==typeof n.fromJSON?n.fromJSON(t):t}},math:!0}],[{name:"ArgumentsError",path:"error",factory:function(){return d}},{name:"DimensionError",path:"error",factory:function(){return V}},{name:"IndexError",path:"error",factory:function(){return W}}]];var Jp=function e(r){var t=M.create(r);return t.create=e,t.import(Wp),t}(),Yp=function(){function e(e,r,t){var n=Jp.transpose(e);if(void 0==t||0==t)var i=Jp.multiply(Jp.inv(Jp.multiply(n,e)),n);else i=Jp.multiply(Jp.inv(Jp.add(Jp.multiply(n,e),t)),n);var a=Jp.multiply(i,r),o=Jp.multiply(e,a),s=Jp.multiply(e,i);return{estPara:a,fittedValues:o,projMatrix:s,dof:Jp.trace(s)}}return e.estPara=function(e,r,t){var n=Jp.transpose(e);if(void 0==t)var i=Jp.multiply(Jp.inv(Jp.multiply(n,e)),n);else i=Jp.multiply(Jp.inv(Jp.add(Jp.multiply(n,e),t)),n);return Jp.multiply(i,r)},e.fittedValues=function(e,r,t){var n=Jp.transpose(e);if(void 0==t)var i=Jp.multiply(Jp.inv(Jp.multiply(n,e)),n);else i=Jp.multiply(Jp.inv(Jp.add(Jp.multiply(n,e),t)),n);return Jp.multiply(e,Jp.multiply(i,r))},e.projMatrix=function(e,r,t){var n=Jp.transpose(e);if(void 0==t)var i=Jp.multiply(Jp.inv(Jp.multiply(n,e)),n);else i=Jp.multiply(Jp.inv(Jp.add(Jp.multiply(n,e),t)),n);return Jp.multiply(e,i)},e}(),Xp=new function(){function e(e,r){var t=r.length,n=[];n.length=e.length;for(let e=0;e<n.length;e++)n[e]=new Array(t+4);for(let i=0;i<e.length;i++){n[i][0]=1,n[i][1]=e[i],n[i][2]=Math.pow(e[i],2),n[i][3]=Math.pow(e[i],3);for(let a=0;a<t;a++)n[i][a+4]=Math.max(Math.pow(e[i]-r[a],3),0)}return n}this.defaults={regualizer:"Sq2ndDer",knots:!0},this.calcKnots=function(e){var r=e.X.map(e=>e);r.sort();for(let e=0;e<r.length-1;e++)r[e]==r[e+1]&&(r.splice(e,1),e--);return r},this.calcRegression=function(r){var t=r.data,n=r.knots,i=r.regualizer,a=r.lambda,o=r.interval||[n[0]-.05*(n[n.length-1]-n[0]),n[n.length-1]+.05*(n[n.length-1]-n[0])],s=e(t.X,n),u=function(e,r,t,n){switch(e){case"Sq2ndDer":var i=n[0],a=n[1],o=[];o.length=t.length+4;for(let e=0;e<o.length;e++)o[e]=new Array(o.length),o[e].fill(0);o[2][2]=4*(a-i),o[2][3]=6*(a*a-i*i),o[3][3]=12*(Math.pow(a,3)-Math.pow(i,3));for(let e=4;e<o.length;e++){o[e][2]=o[2][e]=6*a*(a-2*t[e-4])+6*Math.pow(t[e-4],2),o[e][3]=o[3][e]=6*Math.pow(a,2)*(2*a-3*t[e-4])+6*Math.pow(t[e-4],3);for(let r=e;r<o.length;r++)o[e][r]=o[r][e]=6*a*(a*(2*a-3*(t[e-4]+t[r-4]))+6*t[e-4]*t[r-4])+6*Math.pow(t[r-4],3)-18*Math.pow(t[r-4],2)*t[e-4]}return o=Jp.multiply(o,r);case"ridge":var o=Jp.multiply(Jp.eye(t.length+4).toArray(),r);return o[0][0]=0,o;case"none":var o=!1;return o;default:return console.log("truncPower: "+e+" is not a supported regualizer"),!1}}(i,a,n,o);return Yp(s,t.Y,u)},this.sample=function(r){var t=r.interval,n=r.res,i=r.estPara,a=r.knots,o=[];o.length=n;var s=(t[1]-t[0])/(n-1);for(let e=0;e<n;e++)o[e]=e*s+t[0];var u=e(o,a);return{X:o,Y:Jp.multiply(u,i)}},this.sampleDer=function(e){var r=e.interval,t=e.res,n=e.estPara,i=e.knots,a=[];a.length=t;var o=(r[1]-r[0])/(t-1);for(let e=0;e<t;e++)a[e]=e*o+r[0];var s=function(e,r){var t=r.length,n=[];n.length=e.length;for(let e=0;e<n.length;e++)n[e]=new Array(t+4);for(let i=0;i<e.length;i++){n[i][0]=0,n[i][1]=1,n[i][2]=2*e[i],n[i][3]=3*Math.pow(e[i],2);for(let a=0;a<t;a++)n[i][a+4]=e[i]>r[a]?3*Math.pow(e[i]-r[a],2):0}return n}(a,i);return{X:a,Y:Jp.multiply(s,n)}},this.sample2ndDer=function(e){var r=e.interval,t=e.res,n=e.estPara,i=e.knots,a=[];a.length=t;var o=(r[1]-r[0])/(t-1);for(let e=0;e<t;e++)a[e]=e*o+r[0];var s=function(e,r){var t=r.length,n=[];n.length=e.length;for(let e=0;e<n.length;e++)n[e]=new Array(t+4);for(let i=0;i<e.length;i++){n[i][0]=0,n[i][1]=0,n[i][2]=2,n[i][3]=6*e[i];for(let a=0;a<t;a++)n[i][a+4]=e[i]>r[a]?6*(e[i]-r[a]):0}return n}(a,i);return{X:a,Y:Jp.multiply(s,n)}},this.eval=function(r){var t=r.pos,n=r.knots,i=r.estPara,a=e([t],n);return{X:[t],Y:Jp.multiply(a,i)}},this.evalIntegral=function(e){var r=e.interval,t=e.knots,i=e.estPara,a=function(e,r){var t=r.length,i=e[0],a=e[1],o=[];o.length=n+4,o[0]=a-i,o[1]=.5*(Math.pow(a,2)-Math.pow(i,2)),o[2]=1/3*(Math.pow(a,3)-Math.pow(i,3)),o[3]=.25*(Math.pow(a,4)-Math.pow(i,4));for(let e=0;e<t;e++)o[e+4]=0,i>r[e]&&(o[e+4]+=.25*Math.pow(i-r[e],4)),a>r[e]&&(o[e+4]+=.25*Math.pow(a-r[e],4)),knot[e]<0&&(o[e+4]-=.25*Math.pow(knot[e],4));return o}(r,t);return Jp.multiply(a,i)},this.calcFittedValues=function(r){var t=r.data.X,n=r.knots,i=r.estPara,a=e(t,n);return{X:t,Y:Jp.multiply(a,i)}}},Qp=new function(){function e(e){var r=[];r.length=e.length;for(let e=0;e<r.length;e++)r[e]=new Array(2);for(let t=0;t<e.length;t++)r[t][0]=1,r[t][1]=e[t];return r}this.defaults={regualizer:"none",knots:!1},this.calcKnots=function(){return console.log("linear - no knots needed for this basis"),!1},this.calcRegression=function(r){var t=r.data,n=r.regualizer,i=r.lambda,a=e(t.X),o=function(e,r){switch(e){case"ridge":var t=[[0,0],[0,r]];return t;case"none":var t=!1;return t;default:return console.log("truncPower: "+e+" is not a supported regualizer"),!1}}(n,i);return Yp(a,t.Y,o)},this.sample=function(r){var t=r.interval,n=r.res,i=r.estPara,a=[];a.length=n;var o=(t[1]-t[0])/(n-1);for(let e=0;e<n;e++)a[e]=e*o+t[0];var s=e(a);return{X:a,Y:Jp.multiply(s,i)}},this.sampleDer=function(e){var r=e.interval,t=e.res,n=e.estPara,i=[];i.length=t;var a=(r[1]-r[0])/(t-1);for(let e=0;e<t;e++)i[e]=e*a+r[0];var o=[];return o.length=t,o.fill(n[0]),{X:i,Y:o}},this.sample2ndDer=function(e){var r=e.interval,t=e.res,n=(e.estPara,[]);n.length=t;var i=(r[1]-r[0])/(t-1);for(let e=0;e<t;e++)n[e]=e*i+r[0];var a=[];return a.length=t,a.fill(0),{X:n,Y:a}},this.eval=function(r){var t=r.pos,n=r.estPara,i=e([t]);return{X:[t],Y:Jp.multiply(i,n)}},this.evalIntegral=function(e){var r=e.interval[0],t=e.interval[1],n=e.estPara;return n[0]*(t-r)+.5*n[1]*(Math.pow(t,2)-Math.pow(r,2))},this.calcFittedValues=function(r){var t=r.data.X,n=r.estPara,i=e(t);return{X:t,Y:Jp.multiply(i,n)}}};function Kp(e){this.data=!1,this.currentBasis=!1,this.knots=!1,this.regualizer=!1,this.lambda=0,this.estPara=!1,this.dof=0,Object.assign(this,e),e.basis&&(this.setBasis(e.basis),delete this.basis)}return Kp.prototype.bases={"trunc-power":Xp,linear:Qp},Kp.prototype.setBasis=function(e){var r=this.bases[e];this.currentBasis=r,this.knots||r.defaults.knots&&(this.knots=r.calcKnots(this.data)),this.regualizer||(this.regualizer=r.defaults.regualizer)},Kp.prototype.calcRegression=function(e){e&&Object.assign(this,e),e.basis&&(this.setBasis(e.basis),delete this.basis);var r=this.currentBasis.calcRegression({data:this.data,regualizer:this.regualizer,knots:this.knots,lambda:this.lambda});return this.estPara=r.estPara,this.dof=r.dof,r},Kp.prototype.sample=function(e,r){return this.estPara||this.calcRegression(),this.currentBasis.sample({interval:e,res:r,estPara:this.estPara,knots:this.knots})},Kp.prototype.sampleDer=function(e,r){return this.estPara||this.calcRegression(),this.currentBasis.sampleDer({interval:e,res:r,estPara:this.estPara,knots:this.knots})},Kp.prototype.sample2ndDer=function(e,r){return this.estPara||this.calcRegression(),this.currentBasis.sample2ndDer({interval:e,res:r,estPara:this.estPara,knots:this.knots})},Kp.prototype.eval=function(e){return this.estPara||this.calcRegression(),this.currentBasis.eval({pos:e,estPara:this.estPara,knots:this.knots})},Kp.prototype.evalIntegral=function(e){return this.estPara||this.calcRegression(),this.currentBasis.evalIntegral({inteval:e,estPara:this.estPara,knots:this.knots})},Kp});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
